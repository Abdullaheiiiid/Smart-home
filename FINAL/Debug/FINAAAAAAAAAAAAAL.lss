
FINAAAAAAAAAAAAAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000056a  00800060  00003dc2  00003e56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008005ca  008005ca  000043c0  2**0
                  ALLOC
  3 .stab         00004f74  00000000  00000000  000043c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000020bc  00000000  00000000  00009334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000b802  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000e093  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000f6bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00010a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00010c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00010fab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011a01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 05 08 	jmp	0x100a	; 0x100a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	15 e0       	ldi	r17, 0x05	; 5
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b5 e0       	ldi	r27, 0x05	; 5
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <main>
      8a:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ee       	ldi	r26, 0xE0	; 224
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ee       	ldi	r24, 0xE0	; 224
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ee       	ldi	r22, 0xE0	; 224
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 10 1c 	jmp	0x3820	; 0x3820 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 17 1c 	jmp	0x382e	; 0x382e <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e8 51       	subi	r30, 0x18	; 24
     be6:	fd 4f       	sbci	r31, 0xFD	; 253
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <UART_init>:
#include "UART_INTERFACE.h"
#include <stddef.h>

static UART_Callback UARTCallback = NULL;

void UART_init(uint32 UBR_value){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <UART_init+0x6>
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	9a 83       	std	Y+2, r25	; 0x02
     f56:	89 83       	std	Y+1, r24	; 0x01

    //uint16 UBR_value = (F_CPU/ (16*(baudRate))) -1;
	UBRRH = (uint8)(UBR_value>>8);
     f58:	e0 e4       	ldi	r30, 0x40	; 64
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	89 2f       	mov	r24, r25
     f62:	99 27       	eor	r25, r25
     f64:	80 83       	st	Z, r24
	UBRRL = (uint8)UBR_value;
     f66:	e9 e2       	ldi	r30, 0x29	; 41
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	80 83       	st	Z, r24
    UCSRB |= (1<<RXEN) | (1<<TXEN) | (1<<RXCIE) | (1<<TXCIE);
     f6e:	aa e2       	ldi	r26, 0x2A	; 42
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ea e2       	ldi	r30, 0x2A	; 42
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	88 6d       	ori	r24, 0xD8	; 216
     f7a:	8c 93       	st	X, r24
    
    UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
     f7c:	a0 e4       	ldi	r26, 0x40	; 64
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e0 e4       	ldi	r30, 0x40	; 64
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	86 68       	ori	r24, 0x86	; 134
     f88:	8c 93       	st	X, r24
\
}
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <UART_sendData>:

void UART_sendData(uint8 data){
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	0f 92       	push	r0
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	89 83       	std	Y+1, r24	; 0x01
    while(!GET_BIT(UCSRA, UDRE));
     fa0:	eb e2       	ldi	r30, 0x2B	; 43
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	82 95       	swap	r24
     fa8:	86 95       	lsr	r24
     faa:	87 70       	andi	r24, 0x07	; 7
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	81 70       	andi	r24, 0x01	; 1
     fb2:	90 70       	andi	r25, 0x00	; 0
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	a1 f3       	breq	.-24     	; 0xfa0 <UART_sendData+0xc>
    UDR = data;
     fb8:	ec e2       	ldi	r30, 0x2C	; 44
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	80 83       	st	Z, r24
}
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <UART_receiveData>:

uint8 UART_receiveData(){
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
    while (!GET_BIT(UCSRA, RXC));
     fd0:	eb e2       	ldi	r30, 0x2B	; 43
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 23       	and	r24, r24
     fd8:	dc f7       	brge	.-10     	; 0xfd0 <UART_receiveData+0x8>
    return UDR;
     fda:	ec e2       	ldi	r30, 0x2C	; 44
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
}
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <UART_setCallBack>:

void UART_setCallBack(UART_Callback callback){
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	00 d0       	rcall	.+0      	; 0xfec <UART_setCallBack+0x6>
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
    UARTCallback = callback;
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	9a 81       	ldd	r25, Y+2	; 0x02
     ff8:	90 93 cb 05 	sts	0x05CB, r25
     ffc:	80 93 ca 05 	sts	0x05CA, r24
}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <__vector_13>:

void __vector_13(void) __attribute__((signal, used));
void __vector_13(void) {
    100a:	1f 92       	push	r1
    100c:	0f 92       	push	r0
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	0f 92       	push	r0
    1012:	11 24       	eor	r1, r1
    1014:	2f 93       	push	r18
    1016:	3f 93       	push	r19
    1018:	4f 93       	push	r20
    101a:	5f 93       	push	r21
    101c:	6f 93       	push	r22
    101e:	7f 93       	push	r23
    1020:	8f 93       	push	r24
    1022:	9f 93       	push	r25
    1024:	af 93       	push	r26
    1026:	bf 93       	push	r27
    1028:	ef 93       	push	r30
    102a:	ff 93       	push	r31
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    if (UARTCallback != NULL) {
    1034:	80 91 ca 05 	lds	r24, 0x05CA
    1038:	90 91 cb 05 	lds	r25, 0x05CB
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	41 f0       	breq	.+16     	; 0x1050 <__vector_13+0x46>
        UARTCallback(UDR);
    1040:	e0 91 ca 05 	lds	r30, 0x05CA
    1044:	f0 91 cb 05 	lds	r31, 0x05CB
    1048:	ac e2       	ldi	r26, 0x2C	; 44
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	8c 91       	ld	r24, X
    104e:	09 95       	icall
    }
}
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	ff 91       	pop	r31
    1056:	ef 91       	pop	r30
    1058:	bf 91       	pop	r27
    105a:	af 91       	pop	r26
    105c:	9f 91       	pop	r25
    105e:	8f 91       	pop	r24
    1060:	7f 91       	pop	r23
    1062:	6f 91       	pop	r22
    1064:	5f 91       	pop	r21
    1066:	4f 91       	pop	r20
    1068:	3f 91       	pop	r19
    106a:	2f 91       	pop	r18
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	0f 90       	pop	r0
    1072:	1f 90       	pop	r1
    1074:	18 95       	reti

00001076 <TIMER1_init>:
#include "../../DIO/DIO_INTERFACE.h"
#include "TIMER1_PRIVATE.h"
#include "TIMER1_INTERFACE.h"
#include <stddef.h>

void TIMER1_init(et_TIMER1MODE mode, et_TIMER1PRESCALER prescaler) {
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <TIMER1_init+0x6>
    107c:	00 d0       	rcall	.+0      	; 0x107e <TIMER1_init+0x8>
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	6a 83       	std	Y+2, r22	; 0x02
    // Set the mode in TCCR1A and TCCR1B registers based on the 'mode' argument
    switch (mode) {
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	3c 83       	std	Y+4, r19	; 0x04
    108e:	2b 83       	std	Y+3, r18	; 0x03
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	91 05       	cpc	r25, r1
    1098:	41 f1       	breq	.+80     	; 0x10ea <TIMER1_init+0x74>
    109a:	2b 81       	ldd	r18, Y+3	; 0x03
    109c:	3c 81       	ldd	r19, Y+4	; 0x04
    109e:	22 30       	cpi	r18, 0x02	; 2
    10a0:	31 05       	cpc	r19, r1
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <TIMER1_init+0x30>
    10a4:	3f c0       	rjmp	.+126    	; 0x1124 <TIMER1_init+0xae>
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	9c 81       	ldd	r25, Y+4	; 0x04
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <TIMER1_init+0x3a>
    10ae:	56 c0       	rjmp	.+172    	; 0x115c <TIMER1_init+0xe6>
        case TIMER1_NORMAL_MODE:
            CLEAR_BIT(TCCR1A, TCCR1A_WGM10);
    10b0:	af e4       	ldi	r26, 0x4F	; 79
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	ef e4       	ldi	r30, 0x4F	; 79
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	8e 7f       	andi	r24, 0xFE	; 254
    10bc:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1A, TCCR1A_WGM11);
    10be:	af e4       	ldi	r26, 0x4F	; 79
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	ef e4       	ldi	r30, 0x4F	; 79
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	8d 7f       	andi	r24, 0xFD	; 253
    10ca:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1B, TCCR1B_WGM12);
    10cc:	ae e4       	ldi	r26, 0x4E	; 78
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	ee e4       	ldi	r30, 0x4E	; 78
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	87 7f       	andi	r24, 0xF7	; 247
    10d8:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1B, TCCR1B_WGM13);
    10da:	ae e4       	ldi	r26, 0x4E	; 78
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	ee e4       	ldi	r30, 0x4E	; 78
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8f 7e       	andi	r24, 0xEF	; 239
    10e6:	8c 93       	st	X, r24
    10e8:	39 c0       	rjmp	.+114    	; 0x115c <TIMER1_init+0xe6>
            break;

        case TIMER1_CTC_MODE:
            // Configure for CTC mode, you need to set the WGM12 bit in TCCR1B
            CLEAR_BIT(TCCR1A, TCCR1A_WGM10);
    10ea:	af e4       	ldi	r26, 0x4F	; 79
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	ef e4       	ldi	r30, 0x4F	; 79
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8e 7f       	andi	r24, 0xFE	; 254
    10f6:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1A, TCCR1A_WGM11);
    10f8:	af e4       	ldi	r26, 0x4F	; 79
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ef e4       	ldi	r30, 0x4F	; 79
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	8d 7f       	andi	r24, 0xFD	; 253
    1104:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_WGM12);
    1106:	ae e4       	ldi	r26, 0x4E	; 78
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ee e4       	ldi	r30, 0x4E	; 78
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	88 60       	ori	r24, 0x08	; 8
    1112:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1B, TCCR1B_WGM13);
    1114:	ae e4       	ldi	r26, 0x4E	; 78
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ee e4       	ldi	r30, 0x4E	; 78
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8f 7e       	andi	r24, 0xEF	; 239
    1120:	8c 93       	st	X, r24
    1122:	1c c0       	rjmp	.+56     	; 0x115c <TIMER1_init+0xe6>
            break;

        case TIMER1_FASTPWM_MODE:
            // Configure for Fast PWM mode, set both WGM11 and WGM12 bits in TCCR1A and WGM13 bit in TCCR1B
            CLEAR_BIT(TCCR1A, TCCR1A_WGM10);
    1124:	af e4       	ldi	r26, 0x4F	; 79
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	ef e4       	ldi	r30, 0x4F	; 79
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8e 7f       	andi	r24, 0xFE	; 254
    1130:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, TCCR1A_WGM11);
    1132:	af e4       	ldi	r26, 0x4F	; 79
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	ef e4       	ldi	r30, 0x4F	; 79
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	82 60       	ori	r24, 0x02	; 2
    113e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_WGM12);
    1140:	ae e4       	ldi	r26, 0x4E	; 78
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	ee e4       	ldi	r30, 0x4E	; 78
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	88 60       	ori	r24, 0x08	; 8
    114c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_WGM13);
    114e:	ae e4       	ldi	r26, 0x4E	; 78
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	ee e4       	ldi	r30, 0x4E	; 78
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	80 61       	ori	r24, 0x10	; 16
    115a:	8c 93       	st	X, r24
            break;
    }

    // Set the prescaler in TCCR1B register based on the 'prescaler' argument
    TCCR1B |= prescaler;
    115c:	ae e4       	ldi	r26, 0x4E	; 78
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ee e4       	ldi	r30, 0x4E	; 78
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	90 81       	ld	r25, Z
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	89 2b       	or	r24, r25
    116a:	8c 93       	st	X, r24
}
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <TIMER1_setPWMMode>:

void TIMER1_setPWMMode(ed_TIMER1PWM pwmMode) {
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <TIMER1_setPWMMode+0x6>
    1180:	0f 92       	push	r0
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	89 83       	std	Y+1, r24	; 0x01
    // Configure PWM mode based on the 'pwmMode' argument
    switch (pwmMode) {
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	3b 83       	std	Y+3, r19	; 0x03
    1190:	2a 83       	std	Y+2, r18	; 0x02
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	9b 81       	ldd	r25, Y+3	; 0x03
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	31 f0       	breq	.+12     	; 0x11a6 <TIMER1_setPWMMode+0x2c>
    119a:	2a 81       	ldd	r18, Y+2	; 0x02
    119c:	3b 81       	ldd	r19, Y+3	; 0x03
    119e:	21 30       	cpi	r18, 0x01	; 1
    11a0:	31 05       	cpc	r19, r1
    11a2:	f1 f0       	breq	.+60     	; 0x11e0 <TIMER1_setPWMMode+0x66>
    11a4:	39 c0       	rjmp	.+114    	; 0x1218 <TIMER1_setPWMMode+0x9e>
        case inverted:
            SET_BIT(TCCR1A, TCCR1A_COM1A1);
    11a6:	af e4       	ldi	r26, 0x4F	; 79
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ef e4       	ldi	r30, 0x4F	; 79
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	80 68       	ori	r24, 0x80	; 128
    11b2:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, TCCR1A_COM1A0);
    11b4:	af e4       	ldi	r26, 0x4F	; 79
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	ef e4       	ldi	r30, 0x4F	; 79
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	80 64       	ori	r24, 0x40	; 64
    11c0:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, TCCR1A_COM1B1);
    11c2:	af e4       	ldi	r26, 0x4F	; 79
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	ef e4       	ldi	r30, 0x4F	; 79
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	80 62       	ori	r24, 0x20	; 32
    11ce:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, TCCR1A_COM1B0);
    11d0:	af e4       	ldi	r26, 0x4F	; 79
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	ef e4       	ldi	r30, 0x4F	; 79
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	80 61       	ori	r24, 0x10	; 16
    11dc:	8c 93       	st	X, r24
    11de:	1c c0       	rjmp	.+56     	; 0x1218 <TIMER1_setPWMMode+0x9e>
            break;
        case non_inverted:
            SET_BIT(TCCR1A, TCCR1A_COM1A1);
    11e0:	af e4       	ldi	r26, 0x4F	; 79
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	ef e4       	ldi	r30, 0x4F	; 79
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	80 68       	ori	r24, 0x80	; 128
    11ec:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1A, TCCR1A_COM1A0);
    11ee:	af e4       	ldi	r26, 0x4F	; 79
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	ef e4       	ldi	r30, 0x4F	; 79
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	8f 7b       	andi	r24, 0xBF	; 191
    11fa:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, TCCR1A_COM1B1);
    11fc:	af e4       	ldi	r26, 0x4F	; 79
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	ef e4       	ldi	r30, 0x4F	; 79
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	80 62       	ori	r24, 0x20	; 32
    1208:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1A, TCCR1A_COM1B0);
    120a:	af e4       	ldi	r26, 0x4F	; 79
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ef e4       	ldi	r30, 0x4F	; 79
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	8f 7e       	andi	r24, 0xEF	; 239
    1216:	8c 93       	st	X, r24
            break;
    }
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <TIMER1_setValue>:

void TIMER1_setValue(uint16 value){
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <TIMER1_setValue+0x6>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	9a 83       	std	Y+2, r25	; 0x02
    1230:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = value;
    1232:	e4 e4       	ldi	r30, 0x44	; 68
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	9a 81       	ldd	r25, Y+2	; 0x02
    123a:	91 83       	std	Z+1, r25	; 0x01
    123c:	80 83       	st	Z, r24
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <TIMER1_readValue>:
uint16 TIMER1_readValue(){
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    return TCNT1;
    1250:	e4 e4       	ldi	r30, 0x44	; 68
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
}
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <TIMER1_setCompareValue>:

void TIMER1_setCompareValue(uint16 value){
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <TIMER1_setCompareValue+0x6>
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	9a 83       	std	Y+2, r25	; 0x02
    126a:	89 83       	std	Y+1, r24	; 0x01

    OCR1A = value;
    126c:	ea e4       	ldi	r30, 0x4A	; 74
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	9a 81       	ldd	r25, Y+2	; 0x02
    1274:	91 83       	std	Z+1, r25	; 0x01
    1276:	80 83       	st	Z, r24
}
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <TIMER1_DUTYCYCLE>:
void TIMER1_DUTYCYCLE(uint8 dutyCycle)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <TIMER1_DUTYCYCLE+0x6>
    1288:	0f 92       	push	r0
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	8b 83       	std	Y+3, r24	; 0x03
    uint16 compVal = (uint16)(((uint32)(dutyCycle * 65535)) / 100);
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	88 2f       	mov	r24, r24
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a0 e0       	ldi	r26, 0x00	; 0
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	2f ef       	ldi	r18, 0xFF	; 255
    129c:	3f ef       	ldi	r19, 0xFF	; 255
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	bc 01       	movw	r22, r24
    12a4:	cd 01       	movw	r24, r26
    12a6:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__mulsi3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	24 e6       	ldi	r18, 0x64	; 100
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	b9 01       	movw	r22, r18
    12b4:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__udivmodhi4>
    12b8:	cb 01       	movw	r24, r22
    12ba:	9a 83       	std	Y+2, r25	; 0x02
    12bc:	89 83       	std	Y+1, r24	; 0x01
    TIMER1_setCompareValue(compVal);
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	9a 81       	ldd	r25, Y+2	; 0x02
    12c2:	0e 94 2f 09 	call	0x125e	; 0x125e <TIMER1_setCompareValue>
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <TIMER0_init>:
static TIMER0_Callback timer0Callback = NULL;
static uint8 counter = 0;
static uint32 timex = 0;
static ed_TIMEDEF typex = mS;

void TIMER0_init(et_TIMER0MODE mode, et_TIMERPRESCALER prescaller){
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <TIMER0_init+0x6>
    12d8:	00 d0       	rcall	.+0      	; 0x12da <TIMER0_init+0x8>
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	6a 83       	std	Y+2, r22	; 0x02
    switch (mode)
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3c 83       	std	Y+4, r19	; 0x04
    12ea:	2b 83       	std	Y+3, r18	; 0x03
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	91 05       	cpc	r25, r1
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <TIMER0_init+0x26>
    12f6:	42 c0       	rjmp	.+132    	; 0x137c <TIMER0_init+0xaa>
    12f8:	2b 81       	ldd	r18, Y+3	; 0x03
    12fa:	3c 81       	ldd	r19, Y+4	; 0x04
    12fc:	22 30       	cpi	r18, 0x02	; 2
    12fe:	31 05       	cpc	r19, r1
    1300:	2c f4       	brge	.+10     	; 0x130c <TIMER0_init+0x3a>
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	9c 81       	ldd	r25, Y+4	; 0x04
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	61 f0       	breq	.+24     	; 0x1322 <TIMER0_init+0x50>
    130a:	46 c0       	rjmp	.+140    	; 0x1398 <TIMER0_init+0xc6>
    130c:	2b 81       	ldd	r18, Y+3	; 0x03
    130e:	3c 81       	ldd	r19, Y+4	; 0x04
    1310:	22 30       	cpi	r18, 0x02	; 2
    1312:	31 05       	cpc	r19, r1
    1314:	a9 f0       	breq	.+42     	; 0x1340 <TIMER0_init+0x6e>
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	83 30       	cpi	r24, 0x03	; 3
    131c:	91 05       	cpc	r25, r1
    131e:	f9 f0       	breq	.+62     	; 0x135e <TIMER0_init+0x8c>
    1320:	3b c0       	rjmp	.+118    	; 0x1398 <TIMER0_init+0xc6>
    {
    case TIMER0_NORMAL_MODE:
        CLEAR_BIT(TCCR0, TCCR0_WGM00);
    1322:	a3 e5       	ldi	r26, 0x53	; 83
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e3 e5       	ldi	r30, 0x53	; 83
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8f 7b       	andi	r24, 0xBF	; 191
    132e:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR0, TCCR0_WGM01);
    1330:	a3 e5       	ldi	r26, 0x53	; 83
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e3 e5       	ldi	r30, 0x53	; 83
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	87 7f       	andi	r24, 0xF7	; 247
    133c:	8c 93       	st	X, r24
    133e:	2c c0       	rjmp	.+88     	; 0x1398 <TIMER0_init+0xc6>
        break;
    case TIMER0_CTC_MODE:
        CLEAR_BIT(TCCR0, TCCR0_WGM00);
    1340:	a3 e5       	ldi	r26, 0x53	; 83
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e3 e5       	ldi	r30, 0x53	; 83
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	8f 7b       	andi	r24, 0xBF	; 191
    134c:	8c 93       	st	X, r24
        SET_BIT(TCCR0, TCCR0_WGM01);
    134e:	a3 e5       	ldi	r26, 0x53	; 83
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e3 e5       	ldi	r30, 0x53	; 83
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	88 60       	ori	r24, 0x08	; 8
    135a:	8c 93       	st	X, r24
    135c:	1d c0       	rjmp	.+58     	; 0x1398 <TIMER0_init+0xc6>
        break;
    case TIMER0_FASTPWM_MODE:
        SET_BIT(TCCR0, TCCR0_WGM00);
    135e:	a3 e5       	ldi	r26, 0x53	; 83
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e3 e5       	ldi	r30, 0x53	; 83
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	80 64       	ori	r24, 0x40	; 64
    136a:	8c 93       	st	X, r24
        SET_BIT(TCCR0, TCCR0_WGM01);
    136c:	a3 e5       	ldi	r26, 0x53	; 83
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e3 e5       	ldi	r30, 0x53	; 83
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	88 60       	ori	r24, 0x08	; 8
    1378:	8c 93       	st	X, r24
    137a:	0e c0       	rjmp	.+28     	; 0x1398 <TIMER0_init+0xc6>
        break;
    case TIMER0_PHASECORRECT_MODE:
        SET_BIT(TCCR0, TCCR0_WGM00);
    137c:	a3 e5       	ldi	r26, 0x53	; 83
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e3 e5       	ldi	r30, 0x53	; 83
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	80 64       	ori	r24, 0x40	; 64
    1388:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR0, TCCR0_WGM01);
    138a:	a3 e5       	ldi	r26, 0x53	; 83
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e3 e5       	ldi	r30, 0x53	; 83
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	87 7f       	andi	r24, 0xF7	; 247
    1396:	8c 93       	st	X, r24
        break;
    default:
        break;
    }

    TCCR0 &= 0xF8;
    1398:	a3 e5       	ldi	r26, 0x53	; 83
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e3 e5       	ldi	r30, 0x53	; 83
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	88 7f       	andi	r24, 0xF8	; 248
    13a4:	8c 93       	st	X, r24
    TCCR0 |= prescaller;
    13a6:	a3 e5       	ldi	r26, 0x53	; 83
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e3 e5       	ldi	r30, 0x53	; 83
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	90 81       	ld	r25, Z
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	89 2b       	or	r24, r25
    13b4:	8c 93       	st	X, r24
}
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <TIMER_INIT_SASA>:

void TIMER_INIT_SASA(){
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TCCR0, TCCR0_WGM00);
    13cc:	a3 e5       	ldi	r26, 0x53	; 83
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e3 e5       	ldi	r30, 0x53	; 83
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	80 64       	ori	r24, 0x40	; 64
    13d8:	8c 93       	st	X, r24
    SET_BIT(TCCR0, TCCR0_WGM01);
    13da:	a3 e5       	ldi	r26, 0x53	; 83
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e3 e5       	ldi	r30, 0x53	; 83
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	88 60       	ori	r24, 0x08	; 8
    13e6:	8c 93       	st	X, r24

    OCR0 = 64;
    13e8:	ec e5       	ldi	r30, 0x5C	; 92
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 e4       	ldi	r24, 0x40	; 64
    13ee:	80 83       	st	Z, r24

    SET_BIT(TCCR0, 5);
    13f0:	a3 e5       	ldi	r26, 0x53	; 83
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e3 e5       	ldi	r30, 0x53	; 83
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	80 62       	ori	r24, 0x20	; 32
    13fc:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR0, 4);
    13fe:	a3 e5       	ldi	r26, 0x53	; 83
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e3 e5       	ldi	r30, 0x53	; 83
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	8f 7e       	andi	r24, 0xEF	; 239
    140a:	8c 93       	st	X, r24

    CLEAR_BIT(TCCR0, TCCR0_CS00);
    140c:	a3 e5       	ldi	r26, 0x53	; 83
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e3 e5       	ldi	r30, 0x53	; 83
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8e 7f       	andi	r24, 0xFE	; 254
    1418:	8c 93       	st	X, r24
    SET_BIT(TCCR0, TCCR0_CS01);
    141a:	a3 e5       	ldi	r26, 0x53	; 83
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e3 e5       	ldi	r30, 0x53	; 83
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	82 60       	ori	r24, 0x02	; 2
    1426:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR0, TCCR0_CS02);
    1428:	a3 e5       	ldi	r26, 0x53	; 83
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e3 e5       	ldi	r30, 0x53	; 83
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8b 7f       	andi	r24, 0xFB	; 251
    1434:	8c 93       	st	X, r24
}
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <TIMER0_OVF_IE>:

void TIMER0_OVF_IE(){
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TIMSK_TOIE0);
    1444:	a9 e5       	ldi	r26, 0x59	; 89
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e9 e5       	ldi	r30, 0x59	; 89
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	81 60       	ori	r24, 0x01	; 1
    1450:	8c 93       	st	X, r24
}
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <TIMER0_OVF_ID>:

void TIMER0_OVF_ID(){
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TIMSK_TOIE0);
    1460:	a9 e5       	ldi	r26, 0x59	; 89
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e9 e5       	ldi	r30, 0x59	; 89
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	8e 7f       	andi	r24, 0xFE	; 254
    146c:	8c 93       	st	X, r24
}
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <TIMER0_CMP_IE>:

void TIMER0_CMP_IE(){
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TIMSK_OCIE0);
    147c:	a9 e5       	ldi	r26, 0x59	; 89
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e9 e5       	ldi	r30, 0x59	; 89
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	82 60       	ori	r24, 0x02	; 2
    1488:	8c 93       	st	X, r24
}
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <TIMER0_CMP_ID>:

void TIMER0_CMP_ID(){
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TIMSK_OCIE0);
    1498:	a9 e5       	ldi	r26, 0x59	; 89
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e9 e5       	ldi	r30, 0x59	; 89
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	8d 7f       	andi	r24, 0xFD	; 253
    14a4:	8c 93       	st	X, r24
}
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <TIMER0_setCompareValue>:

void TIMER0_setCompareValue(uint8 value) {
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	0f 92       	push	r0
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = value;
    14b8:	ec e5       	ldi	r30, 0x5C	; 92
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	80 83       	st	Z, r24
}
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <TIMER0_setValue>:

void TIMER0_setValue(uint8 value) {
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = value;
    14d4:	e2 e5       	ldi	r30, 0x52	; 82
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	80 83       	st	Z, r24
}
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <TIMER0_setCallback>:

void TIMER0_setCallback(TIMER0_Callback callback) {
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <TIMER0_setCallback+0x6>
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	9a 83       	std	Y+2, r25	; 0x02
    14f0:	89 83       	std	Y+1, r24	; 0x01
    timer0Callback = callback;
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	90 93 cd 05 	sts	0x05CD, r25
    14fa:	80 93 cc 05 	sts	0x05CC, r24
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <TIMER0_VidDUTYCYCLE>:


void TIMER0_VidDUTYCYCLE(uint8 dutyCycle)
{
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	00 d0       	rcall	.+0      	; 0x150e <TIMER0_VidDUTYCYCLE+0x6>
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	8a 83       	std	Y+2, r24	; 0x02
    uint8 compVal = (uint8)(((uint32)(dutyCycle * 255)) / 100);
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	48 2f       	mov	r20, r24
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	ca 01       	movw	r24, r20
    151c:	9c 01       	movw	r18, r24
    151e:	22 0f       	add	r18, r18
    1520:	33 1f       	adc	r19, r19
    1522:	c9 01       	movw	r24, r18
    1524:	96 95       	lsr	r25
    1526:	98 2f       	mov	r25, r24
    1528:	88 27       	eor	r24, r24
    152a:	97 95       	ror	r25
    152c:	87 95       	ror	r24
    152e:	82 1b       	sub	r24, r18
    1530:	93 0b       	sbc	r25, r19
    1532:	84 0f       	add	r24, r20
    1534:	95 1f       	adc	r25, r21
    1536:	24 e6       	ldi	r18, 0x64	; 100
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	b9 01       	movw	r22, r18
    153c:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__udivmodhi4>
    1540:	cb 01       	movw	r24, r22
    1542:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_setCompareValue(compVal);
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	0e 94 56 0a 	call	0x14ac	; 0x14ac <TIMER0_setCompareValue>
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <TIMER0_setPWMMode>:

void TIMER0_setPWMMode(ed_TIMER0PWM mode){
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	00 d0       	rcall	.+0      	; 0x155a <TIMER0_setPWMMode+0x6>
    155a:	0f 92       	push	r0
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	89 83       	std	Y+1, r24	; 0x01
    switch (mode)
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	3b 83       	std	Y+3, r19	; 0x03
    156a:	2a 83       	std	Y+2, r18	; 0x02
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	9b 81       	ldd	r25, Y+3	; 0x03
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	31 f0       	breq	.+12     	; 0x1580 <TIMER0_setPWMMode+0x2c>
    1574:	2a 81       	ldd	r18, Y+2	; 0x02
    1576:	3b 81       	ldd	r19, Y+3	; 0x03
    1578:	21 30       	cpi	r18, 0x01	; 1
    157a:	31 05       	cpc	r19, r1
    157c:	81 f0       	breq	.+32     	; 0x159e <TIMER0_setPWMMode+0x4a>
    157e:	1d c0       	rjmp	.+58     	; 0x15ba <TIMER0_setPWMMode+0x66>
    {
    case inverted:
        SET_BIT(TCCR0, TCCR0_COM00);
    1580:	a3 e5       	ldi	r26, 0x53	; 83
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e3 e5       	ldi	r30, 0x53	; 83
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	80 61       	ori	r24, 0x10	; 16
    158c:	8c 93       	st	X, r24
        SET_BIT(TCCR0, TCCR0_COM01);
    158e:	a3 e5       	ldi	r26, 0x53	; 83
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e3 e5       	ldi	r30, 0x53	; 83
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	80 62       	ori	r24, 0x20	; 32
    159a:	8c 93       	st	X, r24
    159c:	0e c0       	rjmp	.+28     	; 0x15ba <TIMER0_setPWMMode+0x66>
        break;
    case non_inverted:
        SET_BIT(TCCR0, TCCR0_COM01);
    159e:	a3 e5       	ldi	r26, 0x53	; 83
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e3 e5       	ldi	r30, 0x53	; 83
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	80 62       	ori	r24, 0x20	; 32
    15aa:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR0, TCCR0_COM00);
    15ac:	a3 e5       	ldi	r26, 0x53	; 83
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e3 e5       	ldi	r30, 0x53	; 83
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	8f 7e       	andi	r24, 0xEF	; 239
    15b8:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <TIMER_executeByInterval>:

void TIMER_executeByInterval(TIMER0_Callback callback, uint32 time, ed_TIMEDEF type){
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	2b 97       	sbiw	r28, 0x0b	; 11
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	9e 83       	std	Y+6, r25	; 0x06
    15dc:	8d 83       	std	Y+5, r24	; 0x05
    15de:	78 87       	std	Y+8, r23	; 0x08
    15e0:	6f 83       	std	Y+7, r22	; 0x07
    15e2:	49 87       	std	Y+9, r20	; 0x09
    switch (type)
    15e4:	89 85       	ldd	r24, Y+9	; 0x09
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	3b 87       	std	Y+11, r19	; 0x0b
    15ec:	2a 87       	std	Y+10, r18	; 0x0a
    15ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    15f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <TIMER_executeByInterval+0x32>
    15f6:	6b c0       	rjmp	.+214    	; 0x16ce <TIMER_executeByInterval+0x108>
    15f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    15fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    15fc:	21 30       	cpi	r18, 0x01	; 1
    15fe:	31 05       	cpc	r19, r1
    1600:	09 f0       	breq	.+2      	; 0x1604 <TIMER_executeByInterval+0x3e>
    1602:	d2 c0       	rjmp	.+420    	; 0x17a8 <TIMER_executeByInterval+0x1e2>
    {
    case S:
        {
            if(counter == 0){
    1604:	80 91 ce 05 	lds	r24, 0x05CE
    1608:	88 23       	and	r24, r24
    160a:	b9 f4       	brne	.+46     	; 0x163a <TIMER_executeByInterval+0x74>
                TCCR0 &= 0xF8;
    160c:	a3 e5       	ldi	r26, 0x53	; 83
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e3 e5       	ldi	r30, 0x53	; 83
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	88 7f       	andi	r24, 0xF8	; 248
    1618:	8c 93       	st	X, r24
                TCCR0 |= 5;
    161a:	a3 e5       	ldi	r26, 0x53	; 83
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e3 e5       	ldi	r30, 0x53	; 83
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	85 60       	ori	r24, 0x05	; 5
    1626:	8c 93       	st	X, r24
                TIMER0_setCompareValue(125);
    1628:	8d e7       	ldi	r24, 0x7D	; 125
    162a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <TIMER0_setCompareValue>
                timer0Callback = callback;
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	90 93 cd 05 	sts	0x05CD, r25
    1636:	80 93 cc 05 	sts	0x05CC, r24
            }
            timex = time;
    163a:	8f 81       	ldd	r24, Y+7	; 0x07
    163c:	98 85       	ldd	r25, Y+8	; 0x08
    163e:	90 93 d0 05 	sts	0x05D0, r25
    1642:	80 93 cf 05 	sts	0x05CF, r24
            counter++;
    1646:	80 91 ce 05 	lds	r24, 0x05CE
    164a:	8f 5f       	subi	r24, 0xFF	; 255
    164c:	80 93 ce 05 	sts	0x05CE, r24
            uint32 counterVAl = (time/(0.000064))/125;
    1650:	8f 81       	ldd	r24, Y+7	; 0x07
    1652:	98 85       	ldd	r25, Y+8	; 0x08
    1654:	cc 01       	movw	r24, r24
    1656:	a0 e0       	ldi	r26, 0x00	; 0
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	bc 01       	movw	r22, r24
    165c:	cd 01       	movw	r24, r26
    165e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	2d eb       	ldi	r18, 0xBD	; 189
    166c:	37 e3       	ldi	r19, 0x37	; 55
    166e:	46 e8       	ldi	r20, 0x86	; 134
    1670:	58 e3       	ldi	r21, 0x38	; 56
    1672:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	bc 01       	movw	r22, r24
    167c:	cd 01       	movw	r24, r26
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	4a ef       	ldi	r20, 0xFA	; 250
    1684:	52 e4       	ldi	r21, 0x42	; 66
    1686:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	bc 01       	movw	r22, r24
    1690:	cd 01       	movw	r24, r26
    1692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	9c 83       	std	Y+4, r25	; 0x04
    169c:	8b 83       	std	Y+3, r24	; 0x03
            if (counter == counterVAl) {
    169e:	80 91 ce 05 	lds	r24, 0x05CE
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	9c 81       	ldd	r25, Y+4	; 0x04
    16aa:	28 17       	cp	r18, r24
    16ac:	39 07       	cpc	r19, r25
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <TIMER_executeByInterval+0xec>
    16b0:	7b c0       	rjmp	.+246    	; 0x17a8 <TIMER_executeByInterval+0x1e2>
                if (timer0Callback != NULL) {
    16b2:	80 91 cc 05 	lds	r24, 0x05CC
    16b6:	90 91 cd 05 	lds	r25, 0x05CD
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	29 f0       	breq	.+10     	; 0x16c8 <TIMER_executeByInterval+0x102>
                    timer0Callback();
    16be:	e0 91 cc 05 	lds	r30, 0x05CC
    16c2:	f0 91 cd 05 	lds	r31, 0x05CD
    16c6:	09 95       	icall
                }
                counter = 0;
    16c8:	10 92 ce 05 	sts	0x05CE, r1
    16cc:	6d c0       	rjmp	.+218    	; 0x17a8 <TIMER_executeByInterval+0x1e2>
            }
        }
        break;
    case mS:
        {
            if(counter == 0){
    16ce:	80 91 ce 05 	lds	r24, 0x05CE
    16d2:	88 23       	and	r24, r24
    16d4:	b9 f4       	brne	.+46     	; 0x1704 <TIMER_executeByInterval+0x13e>
                TCCR0 &= 0xF8;
    16d6:	a3 e5       	ldi	r26, 0x53	; 83
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e3 e5       	ldi	r30, 0x53	; 83
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	88 7f       	andi	r24, 0xF8	; 248
    16e2:	8c 93       	st	X, r24
                TCCR0 |= 5;
    16e4:	a3 e5       	ldi	r26, 0x53	; 83
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e3 e5       	ldi	r30, 0x53	; 83
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	85 60       	ori	r24, 0x05	; 5
    16f0:	8c 93       	st	X, r24
                TIMER0_setCompareValue(125);
    16f2:	8d e7       	ldi	r24, 0x7D	; 125
    16f4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <TIMER0_setCompareValue>
                timer0Callback = callback;
    16f8:	8d 81       	ldd	r24, Y+5	; 0x05
    16fa:	9e 81       	ldd	r25, Y+6	; 0x06
    16fc:	90 93 cd 05 	sts	0x05CD, r25
    1700:	80 93 cc 05 	sts	0x05CC, r24
            }
            timex = time;
    1704:	8f 81       	ldd	r24, Y+7	; 0x07
    1706:	98 85       	ldd	r25, Y+8	; 0x08
    1708:	90 93 d0 05 	sts	0x05D0, r25
    170c:	80 93 cf 05 	sts	0x05CF, r24
            counter++;
    1710:	80 91 ce 05 	lds	r24, 0x05CE
    1714:	8f 5f       	subi	r24, 0xFF	; 255
    1716:	80 93 ce 05 	sts	0x05CE, r24
            uint32 counterVAl = (time*0.001/(0.000064))/125;
    171a:	8f 81       	ldd	r24, Y+7	; 0x07
    171c:	98 85       	ldd	r25, Y+8	; 0x08
    171e:	cc 01       	movw	r24, r24
    1720:	a0 e0       	ldi	r26, 0x00	; 0
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	bc 01       	movw	r22, r24
    1732:	cd 01       	movw	r24, r26
    1734:	2f e6       	ldi	r18, 0x6F	; 111
    1736:	32 e1       	ldi	r19, 0x12	; 18
    1738:	43 e8       	ldi	r20, 0x83	; 131
    173a:	5a e3       	ldi	r21, 0x3A	; 58
    173c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	bc 01       	movw	r22, r24
    1746:	cd 01       	movw	r24, r26
    1748:	2d eb       	ldi	r18, 0xBD	; 189
    174a:	37 e3       	ldi	r19, 0x37	; 55
    174c:	46 e8       	ldi	r20, 0x86	; 134
    174e:	58 e3       	ldi	r21, 0x38	; 56
    1750:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	4a ef       	ldi	r20, 0xFA	; 250
    1762:	52 e4       	ldi	r21, 0x42	; 66
    1764:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	bc 01       	movw	r22, r24
    176e:	cd 01       	movw	r24, r26
    1770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	9a 83       	std	Y+2, r25	; 0x02
    177a:	89 83       	std	Y+1, r24	; 0x01
            if (counter == counterVAl) {
    177c:	80 91 ce 05 	lds	r24, 0x05CE
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	28 17       	cp	r18, r24
    178a:	39 07       	cpc	r19, r25
    178c:	69 f4       	brne	.+26     	; 0x17a8 <TIMER_executeByInterval+0x1e2>
                if (timer0Callback != NULL) {
    178e:	80 91 cc 05 	lds	r24, 0x05CC
    1792:	90 91 cd 05 	lds	r25, 0x05CD
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	29 f0       	breq	.+10     	; 0x17a4 <TIMER_executeByInterval+0x1de>
                    timer0Callback();
    179a:	e0 91 cc 05 	lds	r30, 0x05CC
    179e:	f0 91 cd 05 	lds	r31, 0x05CD
    17a2:	09 95       	icall
                }
                counter = 0;
    17a4:	10 92 ce 05 	sts	0x05CE, r1
        }
        break;
    default:
        break;
    }
}
    17a8:	2b 96       	adiw	r28, 0x0b	; 11
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <__vector_11>:

void __vector_11(void) __attribute__((signal, used));
void __vector_11(void) {
    17ba:	1f 92       	push	r1
    17bc:	0f 92       	push	r0
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	0f 92       	push	r0
    17c2:	11 24       	eor	r1, r1
    17c4:	2f 93       	push	r18
    17c6:	3f 93       	push	r19
    17c8:	4f 93       	push	r20
    17ca:	5f 93       	push	r21
    17cc:	6f 93       	push	r22
    17ce:	7f 93       	push	r23
    17d0:	8f 93       	push	r24
    17d2:	9f 93       	push	r25
    17d4:	af 93       	push	r26
    17d6:	bf 93       	push	r27
    17d8:	ef 93       	push	r30
    17da:	ff 93       	push	r31
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    TIMER_executeByInterval(timer0Callback, timex, typex);
    17e4:	80 91 cc 05 	lds	r24, 0x05CC
    17e8:	90 91 cd 05 	lds	r25, 0x05CD
    17ec:	20 91 cf 05 	lds	r18, 0x05CF
    17f0:	30 91 d0 05 	lds	r19, 0x05D0
    17f4:	40 91 d1 05 	lds	r20, 0x05D1
    17f8:	b9 01       	movw	r22, r18
    17fa:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <TIMER_executeByInterval>
}
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	ff 91       	pop	r31
    1804:	ef 91       	pop	r30
    1806:	bf 91       	pop	r27
    1808:	af 91       	pop	r26
    180a:	9f 91       	pop	r25
    180c:	8f 91       	pop	r24
    180e:	7f 91       	pop	r23
    1810:	6f 91       	pop	r22
    1812:	5f 91       	pop	r21
    1814:	4f 91       	pop	r20
    1816:	3f 91       	pop	r19
    1818:	2f 91       	pop	r18
    181a:	0f 90       	pop	r0
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	0f 90       	pop	r0
    1820:	1f 90       	pop	r1
    1822:	18 95       	reti

00001824 <ICU_init>:
#include "ICU_PRIVATE.h"
#include "ICU_INTERFACE.h"
#include <stddef.h>


void ICU_init(){
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62

    SET_BIT(TCCR1B, TCCR1B_ICES1);
    182c:	ae e4       	ldi	r26, 0x4E	; 78
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	ee e4       	ldi	r30, 0x4E	; 78
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	81 60       	ori	r24, 0x01	; 1
    1838:	8c 93       	st	X, r24

    SET_BIT(TIMSK, TCCR1B_TICIE1);
    183a:	a9 e5       	ldi	r26, 0x59	; 89
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e9 e5       	ldi	r30, 0x59	; 89
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	80 62       	ori	r24, 0x20	; 32
    1846:	8c 93       	st	X, r24
}
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <ICU_setTrigger>:

void ICU_setTrigger(et_ICUTYPE edge){
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	0f 92       	push	r0
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	89 83       	std	Y+1, r24	; 0x01
    if(edge == ICU_RISING_EDGE){
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	41 f4       	brne	.+16     	; 0x1870 <ICU_setTrigger+0x22>
        SET_BIT(TCCR1B, TCCR1B_ICES1);
    1860:	ae e4       	ldi	r26, 0x4E	; 78
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	ee e4       	ldi	r30, 0x4E	; 78
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	81 60       	ori	r24, 0x01	; 1
    186c:	8c 93       	st	X, r24
    186e:	0a c0       	rjmp	.+20     	; 0x1884 <ICU_setTrigger+0x36>
    }
    else if(edge == ICU_FALLING_EDGE){
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	88 23       	and	r24, r24
    1874:	39 f4       	brne	.+14     	; 0x1884 <ICU_setTrigger+0x36>
        CLEAR_BIT(TCCR1B, TCCR1B_ICES1);
    1876:	ae e4       	ldi	r26, 0x4E	; 78
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	ee e4       	ldi	r30, 0x4E	; 78
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8e 7f       	andi	r24, 0xFE	; 254
    1882:	8c 93       	st	X, r24
    }

}
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <ICU_IE>:

void ICU_IE(){
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TCCR1B_TICIE1);
    1894:	a9 e5       	ldi	r26, 0x59	; 89
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e9 e5       	ldi	r30, 0x59	; 89
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	80 62       	ori	r24, 0x20	; 32
    18a0:	8c 93       	st	X, r24
}
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <ICU_ID>:

void ICU_ID(){
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TCCR1B_TICIE1);
    18b0:	a9 e5       	ldi	r26, 0x59	; 89
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e9 e5       	ldi	r30, 0x59	; 89
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	8f 7d       	andi	r24, 0xDF	; 223
    18bc:	8c 93       	st	X, r24
}
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <ICU_readICU>:

uint16 ICU_readICU(){
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    return ICR1;
    18cc:	e6 e4       	ldi	r30, 0x46	; 70
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
}
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <SPI_masterInit>:
#include "SPI_PRIVATE.h"
#include "SPI_INTERFACE.h"
#include <stddef.h>

void SPI_masterInit()
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    setPinDirection(Port_B,Pin4, Input);
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	64 e0       	ldi	r22, 0x04	; 4
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(Port_B,Pin5, Output);
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	65 e0       	ldi	r22, 0x05	; 5
    18f2:	41 e0       	ldi	r20, 0x01	; 1
    18f4:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(Port_B,Pin6, Input);
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	66 e0       	ldi	r22, 0x06	; 6
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(Port_B,Pin7, Output);
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	67 e0       	ldi	r22, 0x07	; 7
    1906:	41 e0       	ldi	r20, 0x01	; 1
    1908:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	//select clk pol=0 ; clk ph=0
	CLEAR_BIT(SPCR,SPCR_CPHA);
    190c:	ad e2       	ldi	r26, 0x2D	; 45
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ed e2       	ldi	r30, 0x2D	; 45
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	8b 7f       	andi	r24, 0xFB	; 251
    1918:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR,SPCR_CPOL);
    191a:	ad e2       	ldi	r26, 0x2D	; 45
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	ed e2       	ldi	r30, 0x2D	; 45
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	87 7f       	andi	r24, 0xF7	; 247
    1926:	8c 93       	st	X, r24

	//select master mode
	SET_BIT(SPCR,SPCR_MSTR);
    1928:	ad e2       	ldi	r26, 0x2D	; 45
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	ed e2       	ldi	r30, 0x2D	; 45
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	80 61       	ori	r24, 0x10	; 16
    1934:	8c 93       	st	X, r24

	//set data order MSB
	CLEAR_BIT(SPCR,SPCR_DORD);
    1936:	ad e2       	ldi	r26, 0x2D	; 45
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	ed e2       	ldi	r30, 0x2D	; 45
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	8f 7d       	andi	r24, 0xDF	; 223
    1942:	8c 93       	st	X, r24

	//select clk in master
	CLEAR_BIT(SPSR,SPSR_SPI2X);
    1944:	ae e2       	ldi	r26, 0x2E	; 46
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ee e2       	ldi	r30, 0x2E	; 46
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8e 7f       	andi	r24, 0xFE	; 254
    1950:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR,SPCR_SPR1);
    1952:	ad e2       	ldi	r26, 0x2D	; 45
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ed e2       	ldi	r30, 0x2D	; 45
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	8d 7f       	andi	r24, 0xFD	; 253
    195e:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR,SPCR_SPR0);
    1960:	ad e2       	ldi	r26, 0x2D	; 45
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	ed e2       	ldi	r30, 0x2D	; 45
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	8e 7f       	andi	r24, 0xFE	; 254
    196c:	8c 93       	st	X, r24

	//enable spi
	SET_BIT(SPCR,SPCR_SPE);
    196e:	ad e2       	ldi	r26, 0x2D	; 45
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ed e2       	ldi	r30, 0x2D	; 45
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	80 64       	ori	r24, 0x40	; 64
    197a:	8c 93       	st	X, r24
}
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <SPI_sleveInit>:

void SPI_sleveInit(void)
{	
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
	setPinDirection(Port_B,Pin4, Input);
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	64 e0       	ldi	r22, 0x04	; 4
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(Port_B,Pin5, Input);
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	65 e0       	ldi	r22, 0x05	; 5
    1998:	40 e0       	ldi	r20, 0x00	; 0
    199a:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(Port_B,Pin6, Output);
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	66 e0       	ldi	r22, 0x06	; 6
    19a2:	41 e0       	ldi	r20, 0x01	; 1
    19a4:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(Port_B,Pin7, Input);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	67 e0       	ldi	r22, 0x07	; 7
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	//select sleve mode
	CLEAR_BIT(SPCR,SPCR_MSTR);
    19b2:	ad e2       	ldi	r26, 0x2D	; 45
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ed e2       	ldi	r30, 0x2D	; 45
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8f 7e       	andi	r24, 0xEF	; 239
    19be:	8c 93       	st	X, r24

	//set data order MSB
	CLEAR_BIT(SPCR,SPCR_DORD);
    19c0:	ad e2       	ldi	r26, 0x2D	; 45
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	ed e2       	ldi	r30, 0x2D	; 45
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	8f 7d       	andi	r24, 0xDF	; 223
    19cc:	8c 93       	st	X, r24

	//enable spi
	SET_BIT(SPCR,SPCR_SPE);
    19ce:	ad e2       	ldi	r26, 0x2D	; 45
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ed e2       	ldi	r30, 0x2D	; 45
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	80 64       	ori	r24, 0x40	; 64
    19da:	8c 93       	st	X, r24
}
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <SPI_transceive>:

uint8 SPI_transceive(uint8 Copy_U8data)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	0f 92       	push	r0
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	89 83       	std	Y+1, r24	; 0x01
	//send data
	SPDR = Copy_U8data ;
    19ee:	ef e2       	ldi	r30, 0x2F	; 47
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24

	//flag check
	while(!GET_BIT(SPSR,SPSR_SPIF));
    19fc:	ee e2       	ldi	r30, 0x2E	; 46
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	88 23       	and	r24, r24
    1a04:	dc f7       	brge	.-10     	; 0x19fc <SPI_transceive+0x1a>
	return SPDR ;
    1a06:	ef e2       	ldi	r30, 0x2F	; 47
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	91 81       	ldd	r25, Z+1	; 0x01
}
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <SERVO_init>:
#include "../TIMERS/TIMER1/TIMER1_INTERFACE.h"
#include "../TIMERS/TIMER1/TIMER1_PRIVATE.h"


void SERVO_init()
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
	
	TIMER1_setPWMMode(non_inverted);
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	0e 94 bd 08 	call	0x117a	; 0x117a <TIMER1_setPWMMode>
	TIMER1_init(TIMER1_FASTPWM_MODE, TIMER1_CLK_64_PRESCALER);
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	63 e0       	ldi	r22, 0x03	; 3
    1a28:	0e 94 3b 08 	call	0x1076	; 0x1076 <TIMER1_init>
	ICR1=(uint16)((0.02)/(64*1.0/F_CPU));
    1a2c:	e6 e4       	ldi	r30, 0x46	; 70
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	88 e8       	ldi	r24, 0x88	; 136
    1a32:	93 e1       	ldi	r25, 0x13	; 19
    1a34:	91 83       	std	Z+1, r25	; 0x01
    1a36:	80 83       	st	Z, r24
	setPinDirection(Port_D, Pin4, Output);
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	64 e0       	ldi	r22, 0x04	; 4
    1a3c:	41 e0       	ldi	r20, 0x01	; 1
    1a3e:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(Port_D, Pin5, Output);
    1a42:	83 e0       	ldi	r24, 0x03	; 3
    1a44:	65 e0       	ldi	r22, 0x05	; 5
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
    
}
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <SERVO_setDegree>:
void SERVO_setDegree(int d)
{
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <SERVO_setDegree+0xa>
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <SERVO_setDegree+0xc>
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <SERVO_setDegree+0xe>
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	9e 83       	std	Y+6, r25	; 0x06
    1a66:	8d 83       	std	Y+5, r24	; 0x05
    double onTime = (d*0.002)/180;
    1a68:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6c:	aa 27       	eor	r26, r26
    1a6e:	97 fd       	sbrc	r25, 7
    1a70:	a0 95       	com	r26
    1a72:	ba 2f       	mov	r27, r26
    1a74:	bc 01       	movw	r22, r24
    1a76:	cd 01       	movw	r24, r26
    1a78:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	bc 01       	movw	r22, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	2f e6       	ldi	r18, 0x6F	; 111
    1a86:	32 e1       	ldi	r19, 0x12	; 18
    1a88:	43 e0       	ldi	r20, 0x03	; 3
    1a8a:	5b e3       	ldi	r21, 0x3B	; 59
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	44 e3       	ldi	r20, 0x34	; 52
    1a9e:	53 e4       	ldi	r21, 0x43	; 67
    1aa0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	ab 83       	std	Y+3, r26	; 0x03
    1aae:	bc 83       	std	Y+4, r27	; 0x04
	OCR1A = (uint16)((onTime)/(64*1.0/F_CPU));
    1ab0:	0a e4       	ldi	r16, 0x4A	; 74
    1ab2:	10 e0       	ldi	r17, 0x00	; 0
    1ab4:	69 81       	ldd	r22, Y+1	; 0x01
    1ab6:	7a 81       	ldd	r23, Y+2	; 0x02
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	2d eb       	ldi	r18, 0xBD	; 189
    1abe:	37 e3       	ldi	r19, 0x37	; 55
    1ac0:	46 e8       	ldi	r20, 0x86	; 134
    1ac2:	56 e3       	ldi	r21, 0x36	; 54
    1ac4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	f8 01       	movw	r30, r16
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	80 83       	st	Z, r24
}
    1ade:	26 96       	adiw	r28, 0x06	; 6
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	08 95       	ret

00001af4 <LM35_handleADCResult>:
#include "LM35_INTERFACE.h"
#include "../SPI/SPI_INTERFACE.h"
#include <util/delay.h>
static uint16 temperature = 0;
static uint8 currentMode = 0;
void LM35_handleADCResult(uint16 result) {
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <LM35_handleADCResult+0x6>
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	9a 83       	std	Y+2, r25	; 0x02
    1b00:	89 83       	std	Y+1, r24	; 0x01

    temperature = (((uint32)result * 5UL * 100) / (1024UL));
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	9a 81       	ldd	r25, Y+2	; 0x02
    1b06:	cc 01       	movw	r24, r24
    1b08:	a0 e0       	ldi	r26, 0x00	; 0
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	24 ef       	ldi	r18, 0xF4	; 244
    1b0e:	31 e0       	ldi	r19, 0x01	; 1
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__mulsi3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	07 2e       	mov	r0, r23
    1b22:	7a e0       	ldi	r23, 0x0A	; 10
    1b24:	b6 95       	lsr	r27
    1b26:	a7 95       	ror	r26
    1b28:	97 95       	ror	r25
    1b2a:	87 95       	ror	r24
    1b2c:	7a 95       	dec	r23
    1b2e:	d1 f7       	brne	.-12     	; 0x1b24 <LM35_handleADCResult+0x30>
    1b30:	70 2d       	mov	r23, r0
    1b32:	90 93 d3 05 	sts	0x05D3, r25
    1b36:	80 93 d2 05 	sts	0x05D2, r24
    if(currentMode == 0){    
    1b3a:	80 91 d4 05 	lds	r24, 0x05D4
    1b3e:	88 23       	and	r24, r24
    1b40:	c9 f5       	brne	.+114    	; 0x1bb4 <LM35_handleADCResult+0xc0>
        if(temperature <= 25){
    1b42:	80 91 d2 05 	lds	r24, 0x05D2
    1b46:	90 91 d3 05 	lds	r25, 0x05D3
    1b4a:	8a 31       	cpi	r24, 0x1A	; 26
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	20 f4       	brcc	.+8      	; 0x1b58 <LM35_handleADCResult+0x64>
            SPI_transceive('d');
    1b50:	84 e6       	ldi	r24, 0x64	; 100
    1b52:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <SPI_transceive>
    1b56:	2e c0       	rjmp	.+92     	; 0x1bb4 <LM35_handleADCResult+0xc0>
        }else if(temperature > 25 && temperature <= 30){
    1b58:	80 91 d2 05 	lds	r24, 0x05D2
    1b5c:	90 91 d3 05 	lds	r25, 0x05D3
    1b60:	8a 31       	cpi	r24, 0x1A	; 26
    1b62:	91 05       	cpc	r25, r1
    1b64:	58 f0       	brcs	.+22     	; 0x1b7c <LM35_handleADCResult+0x88>
    1b66:	80 91 d2 05 	lds	r24, 0x05D2
    1b6a:	90 91 d3 05 	lds	r25, 0x05D3
    1b6e:	8f 31       	cpi	r24, 0x1F	; 31
    1b70:	91 05       	cpc	r25, r1
    1b72:	20 f4       	brcc	.+8      	; 0x1b7c <LM35_handleADCResult+0x88>
            SPI_transceive('D');
    1b74:	84 e4       	ldi	r24, 0x44	; 68
    1b76:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <SPI_transceive>
    1b7a:	1c c0       	rjmp	.+56     	; 0x1bb4 <LM35_handleADCResult+0xc0>
        }else if(temperature > 30 && temperature <= 35){
    1b7c:	80 91 d2 05 	lds	r24, 0x05D2
    1b80:	90 91 d3 05 	lds	r25, 0x05D3
    1b84:	8f 31       	cpi	r24, 0x1F	; 31
    1b86:	91 05       	cpc	r25, r1
    1b88:	58 f0       	brcs	.+22     	; 0x1ba0 <LM35_handleADCResult+0xac>
    1b8a:	80 91 d2 05 	lds	r24, 0x05D2
    1b8e:	90 91 d3 05 	lds	r25, 0x05D3
    1b92:	84 32       	cpi	r24, 0x24	; 36
    1b94:	91 05       	cpc	r25, r1
    1b96:	20 f4       	brcc	.+8      	; 0x1ba0 <LM35_handleADCResult+0xac>
            SPI_transceive('2');
    1b98:	82 e3       	ldi	r24, 0x32	; 50
    1b9a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <SPI_transceive>
    1b9e:	0a c0       	rjmp	.+20     	; 0x1bb4 <LM35_handleADCResult+0xc0>
        }else if(temperature > 35){
    1ba0:	80 91 d2 05 	lds	r24, 0x05D2
    1ba4:	90 91 d3 05 	lds	r25, 0x05D3
    1ba8:	84 32       	cpi	r24, 0x24	; 36
    1baa:	91 05       	cpc	r25, r1
    1bac:	18 f0       	brcs	.+6      	; 0x1bb4 <LM35_handleADCResult+0xc0>
            SPI_transceive('3');
    1bae:	83 e3       	ldi	r24, 0x33	; 51
    1bb0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <SPI_transceive>
        }
    }
}
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <LM35_init>:

void LM35_init(){
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    ADC_setCallback(LM35_handleADCResult);
    1bc6:	8a e7       	ldi	r24, 0x7A	; 122
    1bc8:	9d e0       	ldi	r25, 0x0D	; 13
    1bca:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <ADC_setCallback>
}
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <LM35_calculate>:

void LM35_calculate(uint8 CH, uint8 mode){
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <LM35_calculate+0x6>
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	6a 83       	std	Y+2, r22	; 0x02
    currentMode = mode;
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	80 93 d4 05 	sts	0x05D4, r24
    ADC_startConversion(CH);
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <ADC_startConversion>
}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <LM35_getTemperature>:

uint16 LM35_getTemperature(){
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    return temperature;
    1c00:	80 91 d2 05 	lds	r24, 0x05D2
    1c04:	90 91 d3 05 	lds	r25, 0x05D3
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <LDR_handleADCResult>:
#include "../ADC/ADC_INTERFACE.h"
#include "LDR_INTERFACE.h"
#include "../SPI/SPI_INTERFACE.h"
uint8 percentage = 0;
static uint8 currentMode = 0;
void LDR_handleADCResult(uint16 result) {
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <LDR_handleADCResult+0x6>
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <LDR_handleADCResult+0x8>
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	9c 83       	std	Y+4, r25	; 0x04
    1c1c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 value = result;
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	89 83       	std	Y+1, r24	; 0x01
	percentage = 100-(((float)value / 1023)*100);
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	cc 01       	movw	r24, r24
    1c2c:	a0 e0       	ldi	r26, 0x00	; 0
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 ec       	ldi	r19, 0xC0	; 192
    1c44:	4f e7       	ldi	r20, 0x7F	; 127
    1c46:	54 e4       	ldi	r21, 0x44	; 68
    1c48:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	bc 01       	movw	r22, r24
    1c52:	cd 01       	movw	r24, r26
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	48 ec       	ldi	r20, 0xC8	; 200
    1c5a:	52 ec       	ldi	r21, 0xC2	; 194
    1c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	48 ec       	ldi	r20, 0xC8	; 200
    1c6e:	52 e4       	ldi	r21, 0x42	; 66
    1c70:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	bc 01       	movw	r22, r24
    1c7a:	cd 01       	movw	r24, r26
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	80 93 d5 05 	sts	0x05D5, r24
    if(currentMode == 0){
    1c88:	80 91 d6 05 	lds	r24, 0x05D6
    1c8c:	88 23       	and	r24, r24
    1c8e:	59 f4       	brne	.+22     	; 0x1ca6 <LDR_handleADCResult+0x98>
        if(percentage <= 50){
    1c90:	80 91 d5 05 	lds	r24, 0x05D5
    1c94:	83 33       	cpi	r24, 0x33	; 51
    1c96:	20 f4       	brcc	.+8      	; 0x1ca0 <LDR_handleADCResult+0x92>
            SPI_transceive('R');
    1c98:	82 e5       	ldi	r24, 0x52	; 82
    1c9a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <SPI_transceive>
    1c9e:	03 c0       	rjmp	.+6      	; 0x1ca6 <LDR_handleADCResult+0x98>
        }
        else{
            SPI_transceive('r');
    1ca0:	82 e7       	ldi	r24, 0x72	; 114
    1ca2:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <SPI_transceive>
        }
    }
}
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <LDR_init>:


void LDR_init(){
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    ADC_setCallback(LDR_handleADCResult);
    1cbc:	87 e0       	ldi	r24, 0x07	; 7
    1cbe:	9e e0       	ldi	r25, 0x0E	; 14
    1cc0:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <ADC_setCallback>
}
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <LDR_calculate>:

void LDR_calculate(uint8 CH, uint8 mode){
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <LDR_calculate+0x6>
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	6a 83       	std	Y+2, r22	; 0x02
    currentMode = mode;
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	80 93 d6 05 	sts	0x05D6, r24
    ADC_startConversion(CH);
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <ADC_startConversion>
}
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <LDR_getPercentage>:

uint8 LDR_getPercentage(){
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    return percentage;
    1cf6:	80 91 d5 05 	lds	r24, 0x05D5
}
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <GLCD_sendCommand>:
#include <stdio.h>
#include <util/delay.h>

static uint8 count = 0;

void GLCD_sendCommand(uint8 CMD, uint8 cs){
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	6a 97       	sbiw	r28, 0x1a	; 26
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	89 8f       	std	Y+25, r24	; 0x19
    1d16:	6a 8f       	std	Y+26, r22	; 0x1a
	if( cs == 1 ){
    1d18:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	29 f4       	brne	.+10     	; 0x1d28 <GLCD_sendCommand+0x28>
		setPinValue(LCD_CONT_CS1, LCD_CS1, PinHigh);
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	67 e0       	ldi	r22, 0x07	; 7
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	}
	if( cs == 2 ){
    1d28:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d2a:	82 30       	cpi	r24, 0x02	; 2
    1d2c:	29 f4       	brne	.+10     	; 0x1d38 <GLCD_sendCommand+0x38>
		setPinValue(LCD_CONT_CS2, LCD_CS2, PinHigh);
    1d2e:	83 e0       	ldi	r24, 0x03	; 3
    1d30:	62 e0       	ldi	r22, 0x02	; 2
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	}
	setPinValue(LCD_CONT_DI, LCD_DI, PinLow);
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	66 e0       	ldi	r22, 0x06	; 6
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_CONT_EN, LCD_EN, PinHigh);
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	65 e0       	ldi	r22, 0x05	; 5
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_DATA_DB0, LCD_DB0, GET_BIT(CMD, 0));
    1d4c:	89 8d       	ldd	r24, Y+25	; 0x19
    1d4e:	98 2f       	mov	r25, r24
    1d50:	91 70       	andi	r25, 0x01	; 1
    1d52:	82 e0       	ldi	r24, 0x02	; 2
    1d54:	62 e0       	ldi	r22, 0x02	; 2
    1d56:	49 2f       	mov	r20, r25
    1d58:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_DATA_DB1, LCD_DB1, GET_BIT(CMD, 1));
    1d5c:	89 8d       	ldd	r24, Y+25	; 0x19
    1d5e:	86 95       	lsr	r24
    1d60:	98 2f       	mov	r25, r24
    1d62:	91 70       	andi	r25, 0x01	; 1
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	63 e0       	ldi	r22, 0x03	; 3
    1d68:	49 2f       	mov	r20, r25
    1d6a:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_DATA_DB2, LCD_DB2, GET_BIT(CMD, 2));
    1d6e:	89 8d       	ldd	r24, Y+25	; 0x19
    1d70:	86 95       	lsr	r24
    1d72:	86 95       	lsr	r24
    1d74:	98 2f       	mov	r25, r24
    1d76:	91 70       	andi	r25, 0x01	; 1
    1d78:	82 e0       	ldi	r24, 0x02	; 2
    1d7a:	64 e0       	ldi	r22, 0x04	; 4
    1d7c:	49 2f       	mov	r20, r25
    1d7e:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_DATA_DB3, LCD_DB3, GET_BIT(CMD, 3));
    1d82:	89 8d       	ldd	r24, Y+25	; 0x19
    1d84:	86 95       	lsr	r24
    1d86:	86 95       	lsr	r24
    1d88:	86 95       	lsr	r24
    1d8a:	98 2f       	mov	r25, r24
    1d8c:	91 70       	andi	r25, 0x01	; 1
    1d8e:	82 e0       	ldi	r24, 0x02	; 2
    1d90:	65 e0       	ldi	r22, 0x05	; 5
    1d92:	49 2f       	mov	r20, r25
    1d94:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_DATA_DB4, LCD_DB4, GET_BIT(CMD, 4));
    1d98:	89 8d       	ldd	r24, Y+25	; 0x19
    1d9a:	82 95       	swap	r24
    1d9c:	8f 70       	andi	r24, 0x0F	; 15
    1d9e:	98 2f       	mov	r25, r24
    1da0:	91 70       	andi	r25, 0x01	; 1
    1da2:	82 e0       	ldi	r24, 0x02	; 2
    1da4:	66 e0       	ldi	r22, 0x06	; 6
    1da6:	49 2f       	mov	r20, r25
    1da8:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_DATA_DB5, LCD_DB5, GET_BIT(CMD, 5));
    1dac:	89 8d       	ldd	r24, Y+25	; 0x19
    1dae:	82 95       	swap	r24
    1db0:	86 95       	lsr	r24
    1db2:	87 70       	andi	r24, 0x07	; 7
    1db4:	98 2f       	mov	r25, r24
    1db6:	91 70       	andi	r25, 0x01	; 1
    1db8:	82 e0       	ldi	r24, 0x02	; 2
    1dba:	67 e0       	ldi	r22, 0x07	; 7
    1dbc:	49 2f       	mov	r20, r25
    1dbe:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_DATA_DB6, LCD_DB6, GET_BIT(CMD, 6));
    1dc2:	89 8d       	ldd	r24, Y+25	; 0x19
    1dc4:	82 95       	swap	r24
    1dc6:	86 95       	lsr	r24
    1dc8:	86 95       	lsr	r24
    1dca:	83 70       	andi	r24, 0x03	; 3
    1dcc:	98 2f       	mov	r25, r24
    1dce:	91 70       	andi	r25, 0x01	; 1
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	63 e0       	ldi	r22, 0x03	; 3
    1dd4:	49 2f       	mov	r20, r25
    1dd6:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_DATA_DB7, LCD_DB7, GET_BIT(CMD, 7));
    1dda:	89 8d       	ldd	r24, Y+25	; 0x19
    1ddc:	98 2f       	mov	r25, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	99 27       	eor	r25, r25
    1de2:	99 1f       	adc	r25, r25
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	64 e0       	ldi	r22, 0x04	; 4
    1de8:	49 2f       	mov	r20, r25
    1dea:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	//setPortValue(LCD_DATA, CMD);
	setPinValue(LCD_CONT_EN, LCD_EN, PinLow);
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	65 e0       	ldi	r22, 0x05	; 5
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	a0 e2       	ldi	r26, 0x20	; 32
    1dfe:	b1 e4       	ldi	r27, 0x41	; 65
    1e00:	8d 8b       	std	Y+21, r24	; 0x15
    1e02:	9e 8b       	std	Y+22, r25	; 0x16
    1e04:	af 8b       	std	Y+23, r26	; 0x17
    1e06:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e08:	6d 89       	ldd	r22, Y+21	; 0x15
    1e0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e10:	2b ea       	ldi	r18, 0xAB	; 171
    1e12:	3a ea       	ldi	r19, 0xAA	; 170
    1e14:	4a ea       	ldi	r20, 0xAA	; 170
    1e16:	50 e4       	ldi	r21, 0x40	; 64
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	89 8b       	std	Y+17, r24	; 0x11
    1e22:	9a 8b       	std	Y+18, r25	; 0x12
    1e24:	ab 8b       	std	Y+19, r26	; 0x13
    1e26:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e28:	69 89       	ldd	r22, Y+17	; 0x11
    1e2a:	7a 89       	ldd	r23, Y+18	; 0x12
    1e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	5f e3       	ldi	r21, 0x3F	; 63
    1e38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e3c:	88 23       	and	r24, r24
    1e3e:	1c f4       	brge	.+6      	; 0x1e46 <GLCD_sendCommand+0x146>
		__ticks = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	88 8b       	std	Y+16, r24	; 0x10
    1e44:	91 c0       	rjmp	.+290    	; 0x1f68 <GLCD_sendCommand+0x268>
	else if (__tmp > 255)
    1e46:	69 89       	ldd	r22, Y+17	; 0x11
    1e48:	7a 89       	ldd	r23, Y+18	; 0x12
    1e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	4f e7       	ldi	r20, 0x7F	; 127
    1e54:	53 e4       	ldi	r21, 0x43	; 67
    1e56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e5a:	18 16       	cp	r1, r24
    1e5c:	0c f0       	brlt	.+2      	; 0x1e60 <GLCD_sendCommand+0x160>
    1e5e:	7b c0       	rjmp	.+246    	; 0x1f56 <GLCD_sendCommand+0x256>
	{
		_delay_ms(__us / 1000.0);
    1e60:	6d 89       	ldd	r22, Y+21	; 0x15
    1e62:	7e 89       	ldd	r23, Y+22	; 0x16
    1e64:	8f 89       	ldd	r24, Y+23	; 0x17
    1e66:	98 8d       	ldd	r25, Y+24	; 0x18
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a e7       	ldi	r20, 0x7A	; 122
    1e6e:	54 e4       	ldi	r21, 0x44	; 68
    1e70:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	8c 87       	std	Y+12, r24	; 0x0c
    1e7a:	9d 87       	std	Y+13, r25	; 0x0d
    1e7c:	ae 87       	std	Y+14, r26	; 0x0e
    1e7e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e80:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e82:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e84:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e86:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	4a e7       	ldi	r20, 0x7A	; 122
    1e8e:	55 e4       	ldi	r21, 0x45	; 69
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	88 87       	std	Y+8, r24	; 0x08
    1e9a:	99 87       	std	Y+9, r25	; 0x09
    1e9c:	aa 87       	std	Y+10, r26	; 0x0a
    1e9e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ea0:	68 85       	ldd	r22, Y+8	; 0x08
    1ea2:	79 85       	ldd	r23, Y+9	; 0x09
    1ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ea6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e8       	ldi	r20, 0x80	; 128
    1eae:	5f e3       	ldi	r21, 0x3F	; 63
    1eb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb4:	88 23       	and	r24, r24
    1eb6:	2c f4       	brge	.+10     	; 0x1ec2 <GLCD_sendCommand+0x1c2>
		__ticks = 1;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	9f 83       	std	Y+7, r25	; 0x07
    1ebe:	8e 83       	std	Y+6, r24	; 0x06
    1ec0:	3f c0       	rjmp	.+126    	; 0x1f40 <GLCD_sendCommand+0x240>
	else if (__tmp > 65535)
    1ec2:	68 85       	ldd	r22, Y+8	; 0x08
    1ec4:	79 85       	ldd	r23, Y+9	; 0x09
    1ec6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ec8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	3f ef       	ldi	r19, 0xFF	; 255
    1ece:	4f e7       	ldi	r20, 0x7F	; 127
    1ed0:	57 e4       	ldi	r21, 0x47	; 71
    1ed2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ed6:	18 16       	cp	r1, r24
    1ed8:	4c f5       	brge	.+82     	; 0x1f2c <GLCD_sendCommand+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eda:	6c 85       	ldd	r22, Y+12	; 0x0c
    1edc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ede:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ee0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e2       	ldi	r20, 0x20	; 32
    1ee8:	51 e4       	ldi	r21, 0x41	; 65
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	9f 83       	std	Y+7, r25	; 0x07
    1f00:	8e 83       	std	Y+6, r24	; 0x06
    1f02:	0f c0       	rjmp	.+30     	; 0x1f22 <GLCD_sendCommand+0x222>
    1f04:	80 e9       	ldi	r24, 0x90	; 144
    1f06:	91 e0       	ldi	r25, 0x01	; 1
    1f08:	9d 83       	std	Y+5, r25	; 0x05
    1f0a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <GLCD_sendCommand+0x210>
    1f14:	9d 83       	std	Y+5, r25	; 0x05
    1f16:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f18:	8e 81       	ldd	r24, Y+6	; 0x06
    1f1a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	9f 83       	std	Y+7, r25	; 0x07
    1f20:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f22:	8e 81       	ldd	r24, Y+6	; 0x06
    1f24:	9f 81       	ldd	r25, Y+7	; 0x07
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	69 f7       	brne	.-38     	; 0x1f04 <GLCD_sendCommand+0x204>
    1f2a:	24 c0       	rjmp	.+72     	; 0x1f74 <GLCD_sendCommand+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2c:	68 85       	ldd	r22, Y+8	; 0x08
    1f2e:	79 85       	ldd	r23, Y+9	; 0x09
    1f30:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f32:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	9f 83       	std	Y+7, r25	; 0x07
    1f3e:	8e 83       	std	Y+6, r24	; 0x06
    1f40:	8e 81       	ldd	r24, Y+6	; 0x06
    1f42:	9f 81       	ldd	r25, Y+7	; 0x07
    1f44:	9b 83       	std	Y+3, r25	; 0x03
    1f46:	8a 83       	std	Y+2, r24	; 0x02
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <GLCD_sendCommand+0x24c>
    1f50:	9b 83       	std	Y+3, r25	; 0x03
    1f52:	8a 83       	std	Y+2, r24	; 0x02
    1f54:	0f c0       	rjmp	.+30     	; 0x1f74 <GLCD_sendCommand+0x274>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f56:	69 89       	ldd	r22, Y+17	; 0x11
    1f58:	7a 89       	ldd	r23, Y+18	; 0x12
    1f5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	88 8b       	std	Y+16, r24	; 0x10
    1f68:	88 89       	ldd	r24, Y+16	; 0x10
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	8a 95       	dec	r24
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <GLCD_sendCommand+0x26e>
    1f72:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	if( cs == 1 ){
    1f74:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	29 f4       	brne	.+10     	; 0x1f84 <GLCD_sendCommand+0x284>
		setPinValue(LCD_CONT_CS1, LCD_CS1, PinLow);
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	67 e0       	ldi	r22, 0x07	; 7
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	}
	if( cs == 2 ){
    1f84:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f86:	82 30       	cpi	r24, 0x02	; 2
    1f88:	29 f4       	brne	.+10     	; 0x1f94 <GLCD_sendCommand+0x294>
		setPinValue(LCD_CONT_CS2, LCD_CS2, PinLow);
    1f8a:	83 e0       	ldi	r24, 0x03	; 3
    1f8c:	62 e0       	ldi	r22, 0x02	; 2
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	}
}
    1f94:	6a 96       	adiw	r28, 0x1a	; 26
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	08 95       	ret

00001fa6 <GLCD_sendData>:
 
void GLCD_sendData(uint8 Data, uint8 cs){
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	6a 97       	sbiw	r28, 0x1a	; 26
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	89 8f       	std	Y+25, r24	; 0x19
    1fbc:	6a 8f       	std	Y+26, r22	; 0x1a
	if( cs == 1 ){
    1fbe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fc0:	81 30       	cpi	r24, 0x01	; 1
    1fc2:	29 f4       	brne	.+10     	; 0x1fce <GLCD_sendData+0x28>
		setPinValue(LCD_CONT_CS1, LCD_CS1, PinHigh);
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	67 e0       	ldi	r22, 0x07	; 7
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	}
	if( cs == 2 ){
    1fce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fd0:	82 30       	cpi	r24, 0x02	; 2
    1fd2:	29 f4       	brne	.+10     	; 0x1fde <GLCD_sendData+0x38>
		setPinValue(LCD_CONT_CS2, LCD_CS2, PinHigh);
    1fd4:	83 e0       	ldi	r24, 0x03	; 3
    1fd6:	62 e0       	ldi	r22, 0x02	; 2
    1fd8:	41 e0       	ldi	r20, 0x01	; 1
    1fda:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	}
	setPinValue(LCD_CONT_DI, LCD_DI, PinHigh);
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	66 e0       	ldi	r22, 0x06	; 6
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_CONT_EN, LCD_EN, PinHigh);
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	65 e0       	ldi	r22, 0x05	; 5
    1fec:	41 e0       	ldi	r20, 0x01	; 1
    1fee:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	
	setPinValue(LCD_DATA_DB0, LCD_DB0, GET_BIT(Data, 0));
    1ff2:	89 8d       	ldd	r24, Y+25	; 0x19
    1ff4:	98 2f       	mov	r25, r24
    1ff6:	91 70       	andi	r25, 0x01	; 1
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	62 e0       	ldi	r22, 0x02	; 2
    1ffc:	49 2f       	mov	r20, r25
    1ffe:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_DATA_DB1, LCD_DB1, GET_BIT(Data, 1));
    2002:	89 8d       	ldd	r24, Y+25	; 0x19
    2004:	86 95       	lsr	r24
    2006:	98 2f       	mov	r25, r24
    2008:	91 70       	andi	r25, 0x01	; 1
    200a:	82 e0       	ldi	r24, 0x02	; 2
    200c:	63 e0       	ldi	r22, 0x03	; 3
    200e:	49 2f       	mov	r20, r25
    2010:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_DATA_DB2, LCD_DB2, GET_BIT(Data, 2));
    2014:	89 8d       	ldd	r24, Y+25	; 0x19
    2016:	86 95       	lsr	r24
    2018:	86 95       	lsr	r24
    201a:	98 2f       	mov	r25, r24
    201c:	91 70       	andi	r25, 0x01	; 1
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	64 e0       	ldi	r22, 0x04	; 4
    2022:	49 2f       	mov	r20, r25
    2024:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_DATA_DB3, LCD_DB3, GET_BIT(Data, 3));
    2028:	89 8d       	ldd	r24, Y+25	; 0x19
    202a:	86 95       	lsr	r24
    202c:	86 95       	lsr	r24
    202e:	86 95       	lsr	r24
    2030:	98 2f       	mov	r25, r24
    2032:	91 70       	andi	r25, 0x01	; 1
    2034:	82 e0       	ldi	r24, 0x02	; 2
    2036:	65 e0       	ldi	r22, 0x05	; 5
    2038:	49 2f       	mov	r20, r25
    203a:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_DATA_DB4, LCD_DB4, GET_BIT(Data, 4));
    203e:	89 8d       	ldd	r24, Y+25	; 0x19
    2040:	82 95       	swap	r24
    2042:	8f 70       	andi	r24, 0x0F	; 15
    2044:	98 2f       	mov	r25, r24
    2046:	91 70       	andi	r25, 0x01	; 1
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	66 e0       	ldi	r22, 0x06	; 6
    204c:	49 2f       	mov	r20, r25
    204e:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_DATA_DB5, LCD_DB5, GET_BIT(Data, 5));
    2052:	89 8d       	ldd	r24, Y+25	; 0x19
    2054:	82 95       	swap	r24
    2056:	86 95       	lsr	r24
    2058:	87 70       	andi	r24, 0x07	; 7
    205a:	98 2f       	mov	r25, r24
    205c:	91 70       	andi	r25, 0x01	; 1
    205e:	82 e0       	ldi	r24, 0x02	; 2
    2060:	67 e0       	ldi	r22, 0x07	; 7
    2062:	49 2f       	mov	r20, r25
    2064:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_DATA_DB6, LCD_DB6, GET_BIT(Data, 6));
    2068:	89 8d       	ldd	r24, Y+25	; 0x19
    206a:	82 95       	swap	r24
    206c:	86 95       	lsr	r24
    206e:	86 95       	lsr	r24
    2070:	83 70       	andi	r24, 0x03	; 3
    2072:	98 2f       	mov	r25, r24
    2074:	91 70       	andi	r25, 0x01	; 1
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	63 e0       	ldi	r22, 0x03	; 3
    207a:	49 2f       	mov	r20, r25
    207c:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(LCD_DATA_DB7, LCD_DB7, GET_BIT(Data, 7));
    2080:	89 8d       	ldd	r24, Y+25	; 0x19
    2082:	98 2f       	mov	r25, r24
    2084:	99 1f       	adc	r25, r25
    2086:	99 27       	eor	r25, r25
    2088:	99 1f       	adc	r25, r25
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	64 e0       	ldi	r22, 0x04	; 4
    208e:	49 2f       	mov	r20, r25
    2090:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>

	setPinValue(LCD_CONT_EN, LCD_EN, PinLow);
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	65 e0       	ldi	r22, 0x05	; 5
    2098:	40 e0       	ldi	r20, 0x00	; 0
    209a:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	a0 e2       	ldi	r26, 0x20	; 32
    20a4:	b1 e4       	ldi	r27, 0x41	; 65
    20a6:	8d 8b       	std	Y+21, r24	; 0x15
    20a8:	9e 8b       	std	Y+22, r25	; 0x16
    20aa:	af 8b       	std	Y+23, r26	; 0x17
    20ac:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20ae:	6d 89       	ldd	r22, Y+21	; 0x15
    20b0:	7e 89       	ldd	r23, Y+22	; 0x16
    20b2:	8f 89       	ldd	r24, Y+23	; 0x17
    20b4:	98 8d       	ldd	r25, Y+24	; 0x18
    20b6:	2b ea       	ldi	r18, 0xAB	; 171
    20b8:	3a ea       	ldi	r19, 0xAA	; 170
    20ba:	4a ea       	ldi	r20, 0xAA	; 170
    20bc:	50 e4       	ldi	r21, 0x40	; 64
    20be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	89 8b       	std	Y+17, r24	; 0x11
    20c8:	9a 8b       	std	Y+18, r25	; 0x12
    20ca:	ab 8b       	std	Y+19, r26	; 0x13
    20cc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20ce:	69 89       	ldd	r22, Y+17	; 0x11
    20d0:	7a 89       	ldd	r23, Y+18	; 0x12
    20d2:	8b 89       	ldd	r24, Y+19	; 0x13
    20d4:	9c 89       	ldd	r25, Y+20	; 0x14
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e8       	ldi	r20, 0x80	; 128
    20dc:	5f e3       	ldi	r21, 0x3F	; 63
    20de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e2:	88 23       	and	r24, r24
    20e4:	1c f4       	brge	.+6      	; 0x20ec <GLCD_sendData+0x146>
		__ticks = 1;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	88 8b       	std	Y+16, r24	; 0x10
    20ea:	91 c0       	rjmp	.+290    	; 0x220e <GLCD_sendData+0x268>
	else if (__tmp > 255)
    20ec:	69 89       	ldd	r22, Y+17	; 0x11
    20ee:	7a 89       	ldd	r23, Y+18	; 0x12
    20f0:	8b 89       	ldd	r24, Y+19	; 0x13
    20f2:	9c 89       	ldd	r25, Y+20	; 0x14
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4f e7       	ldi	r20, 0x7F	; 127
    20fa:	53 e4       	ldi	r21, 0x43	; 67
    20fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2100:	18 16       	cp	r1, r24
    2102:	0c f0       	brlt	.+2      	; 0x2106 <GLCD_sendData+0x160>
    2104:	7b c0       	rjmp	.+246    	; 0x21fc <GLCD_sendData+0x256>
	{
		_delay_ms(__us / 1000.0);
    2106:	6d 89       	ldd	r22, Y+21	; 0x15
    2108:	7e 89       	ldd	r23, Y+22	; 0x16
    210a:	8f 89       	ldd	r24, Y+23	; 0x17
    210c:	98 8d       	ldd	r25, Y+24	; 0x18
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	4a e7       	ldi	r20, 0x7A	; 122
    2114:	54 e4       	ldi	r21, 0x44	; 68
    2116:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	8c 87       	std	Y+12, r24	; 0x0c
    2120:	9d 87       	std	Y+13, r25	; 0x0d
    2122:	ae 87       	std	Y+14, r26	; 0x0e
    2124:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2126:	6c 85       	ldd	r22, Y+12	; 0x0c
    2128:	7d 85       	ldd	r23, Y+13	; 0x0d
    212a:	8e 85       	ldd	r24, Y+14	; 0x0e
    212c:	9f 85       	ldd	r25, Y+15	; 0x0f
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	4a e7       	ldi	r20, 0x7A	; 122
    2134:	55 e4       	ldi	r21, 0x45	; 69
    2136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	88 87       	std	Y+8, r24	; 0x08
    2140:	99 87       	std	Y+9, r25	; 0x09
    2142:	aa 87       	std	Y+10, r26	; 0x0a
    2144:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2146:	68 85       	ldd	r22, Y+8	; 0x08
    2148:	79 85       	ldd	r23, Y+9	; 0x09
    214a:	8a 85       	ldd	r24, Y+10	; 0x0a
    214c:	9b 85       	ldd	r25, Y+11	; 0x0b
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e8       	ldi	r20, 0x80	; 128
    2154:	5f e3       	ldi	r21, 0x3F	; 63
    2156:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    215a:	88 23       	and	r24, r24
    215c:	2c f4       	brge	.+10     	; 0x2168 <GLCD_sendData+0x1c2>
		__ticks = 1;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9f 83       	std	Y+7, r25	; 0x07
    2164:	8e 83       	std	Y+6, r24	; 0x06
    2166:	3f c0       	rjmp	.+126    	; 0x21e6 <GLCD_sendData+0x240>
	else if (__tmp > 65535)
    2168:	68 85       	ldd	r22, Y+8	; 0x08
    216a:	79 85       	ldd	r23, Y+9	; 0x09
    216c:	8a 85       	ldd	r24, Y+10	; 0x0a
    216e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	3f ef       	ldi	r19, 0xFF	; 255
    2174:	4f e7       	ldi	r20, 0x7F	; 127
    2176:	57 e4       	ldi	r21, 0x47	; 71
    2178:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    217c:	18 16       	cp	r1, r24
    217e:	4c f5       	brge	.+82     	; 0x21d2 <GLCD_sendData+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2180:	6c 85       	ldd	r22, Y+12	; 0x0c
    2182:	7d 85       	ldd	r23, Y+13	; 0x0d
    2184:	8e 85       	ldd	r24, Y+14	; 0x0e
    2186:	9f 85       	ldd	r25, Y+15	; 0x0f
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e2       	ldi	r20, 0x20	; 32
    218e:	51 e4       	ldi	r21, 0x41	; 65
    2190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9f 83       	std	Y+7, r25	; 0x07
    21a6:	8e 83       	std	Y+6, r24	; 0x06
    21a8:	0f c0       	rjmp	.+30     	; 0x21c8 <GLCD_sendData+0x222>
    21aa:	80 e9       	ldi	r24, 0x90	; 144
    21ac:	91 e0       	ldi	r25, 0x01	; 1
    21ae:	9d 83       	std	Y+5, r25	; 0x05
    21b0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21b2:	8c 81       	ldd	r24, Y+4	; 0x04
    21b4:	9d 81       	ldd	r25, Y+5	; 0x05
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <GLCD_sendData+0x210>
    21ba:	9d 83       	std	Y+5, r25	; 0x05
    21bc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21be:	8e 81       	ldd	r24, Y+6	; 0x06
    21c0:	9f 81       	ldd	r25, Y+7	; 0x07
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	9f 83       	std	Y+7, r25	; 0x07
    21c6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ca:	9f 81       	ldd	r25, Y+7	; 0x07
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	69 f7       	brne	.-38     	; 0x21aa <GLCD_sendData+0x204>
    21d0:	24 c0       	rjmp	.+72     	; 0x221a <GLCD_sendData+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d2:	68 85       	ldd	r22, Y+8	; 0x08
    21d4:	79 85       	ldd	r23, Y+9	; 0x09
    21d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    21d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    21da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9f 83       	std	Y+7, r25	; 0x07
    21e4:	8e 83       	std	Y+6, r24	; 0x06
    21e6:	8e 81       	ldd	r24, Y+6	; 0x06
    21e8:	9f 81       	ldd	r25, Y+7	; 0x07
    21ea:	9b 83       	std	Y+3, r25	; 0x03
    21ec:	8a 83       	std	Y+2, r24	; 0x02
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	9b 81       	ldd	r25, Y+3	; 0x03
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <GLCD_sendData+0x24c>
    21f6:	9b 83       	std	Y+3, r25	; 0x03
    21f8:	8a 83       	std	Y+2, r24	; 0x02
    21fa:	0f c0       	rjmp	.+30     	; 0x221a <GLCD_sendData+0x274>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21fc:	69 89       	ldd	r22, Y+17	; 0x11
    21fe:	7a 89       	ldd	r23, Y+18	; 0x12
    2200:	8b 89       	ldd	r24, Y+19	; 0x13
    2202:	9c 89       	ldd	r25, Y+20	; 0x14
    2204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	88 8b       	std	Y+16, r24	; 0x10
    220e:	88 89       	ldd	r24, Y+16	; 0x10
    2210:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	8a 95       	dec	r24
    2216:	f1 f7       	brne	.-4      	; 0x2214 <GLCD_sendData+0x26e>
    2218:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	if( cs == 1 ){
    221a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    221c:	81 30       	cpi	r24, 0x01	; 1
    221e:	29 f4       	brne	.+10     	; 0x222a <GLCD_sendData+0x284>
		setPinValue(LCD_CONT_CS1, LCD_CS1, PinLow);
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	67 e0       	ldi	r22, 0x07	; 7
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	}
	if( cs == 2 ){
    222a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    222c:	82 30       	cpi	r24, 0x02	; 2
    222e:	29 f4       	brne	.+10     	; 0x223a <GLCD_sendData+0x294>
		setPinValue(LCD_CONT_CS2, LCD_CS2, PinLow);
    2230:	83 e0       	ldi	r24, 0x03	; 3
    2232:	62 e0       	ldi	r22, 0x02	; 2
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	}
}
    223a:	6a 96       	adiw	r28, 0x1a	; 26
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	cd bf       	out	0x3d, r28	; 61
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <GLCD_moveCursor>:

 
 
void GLCD_moveCursor(uint8 row, uint8 col){
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	00 d0       	rcall	.+0      	; 0x2252 <GLCD_moveCursor+0x6>
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	6a 83       	std	Y+2, r22	; 0x02
	if(col < 64){
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	80 34       	cpi	r24, 0x40	; 64
    225e:	50 f4       	brcc	.+20     	; 0x2274 <GLCD_moveCursor+0x28>
		GLCD_sendCommand(0x40 + col, 1);
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	80 5c       	subi	r24, 0xC0	; 192
    2264:	61 e0       	ldi	r22, 0x01	; 1
    2266:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GLCD_sendCommand>
		GLCD_sendCommand(0x40 + 0, 2);
    226a:	80 e4       	ldi	r24, 0x40	; 64
    226c:	62 e0       	ldi	r22, 0x02	; 2
    226e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GLCD_sendCommand>
    2272:	09 c0       	rjmp	.+18     	; 0x2286 <GLCD_moveCursor+0x3a>
	}
	else{
		GLCD_sendCommand(0x40 + 0, 1);
    2274:	80 e4       	ldi	r24, 0x40	; 64
    2276:	61 e0       	ldi	r22, 0x01	; 1
    2278:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GLCD_sendCommand>
		GLCD_sendCommand(0x40 + col - 63 ,2);
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	8f 5f       	subi	r24, 0xFF	; 255
    2280:	62 e0       	ldi	r22, 0x02	; 2
    2282:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GLCD_sendCommand>
	}
 
	GLCD_sendCommand(0xB8 + row,1);
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	88 54       	subi	r24, 0x48	; 72
    228a:	61 e0       	ldi	r22, 0x01	; 1
    228c:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GLCD_sendCommand>
	GLCD_sendCommand(0xB8 + row,2);
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	88 54       	subi	r24, 0x48	; 72
    2294:	62 e0       	ldi	r22, 0x02	; 2
    2296:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GLCD_sendCommand>
	count = col;
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	80 93 d7 05 	sts	0x05D7, r24
}
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <GLCD_sendChar>:
 
void GLCD_sendChar(uint8 Char){
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <GLCD_sendChar+0x6>
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <GLCD_sendChar+0x8>
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	8b 83       	std	Y+3, r24	; 0x03
	for (int i=0;i<5;i++)
    22b8:	1a 82       	std	Y+2, r1	; 0x02
    22ba:	19 82       	std	Y+1, r1	; 0x01
    22bc:	3f c0       	rjmp	.+126    	; 0x233c <GLCD_sendChar+0x92>
	{
		if(count < 64) GLCD_sendData(Font5x8[((Char - 32) * 5) + i], 1);
    22be:	80 91 d7 05 	lds	r24, 0x05D7
    22c2:	80 34       	cpi	r24, 0x40	; 64
    22c4:	c8 f4       	brcc	.+50     	; 0x22f8 <GLCD_sendChar+0x4e>
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	c9 01       	movw	r24, r18
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	82 0f       	add	r24, r18
    22d8:	93 1f       	adc	r25, r19
    22da:	9c 01       	movw	r18, r24
    22dc:	20 5a       	subi	r18, 0xA0	; 160
    22de:	30 40       	sbci	r19, 0x00	; 0
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	9a 81       	ldd	r25, Y+2	; 0x02
    22e4:	82 0f       	add	r24, r18
    22e6:	93 1f       	adc	r25, r19
    22e8:	fc 01       	movw	r30, r24
    22ea:	e7 51       	subi	r30, 0x17	; 23
    22ec:	fc 4f       	sbci	r31, 0xFC	; 252
    22ee:	80 81       	ld	r24, Z
    22f0:	61 e0       	ldi	r22, 0x01	; 1
    22f2:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <GLCD_sendData>
    22f6:	18 c0       	rjmp	.+48     	; 0x2328 <GLCD_sendChar+0x7e>
		else GLCD_sendData(Font5x8[((Char - 32) * 5) + i], 2);
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	c9 01       	movw	r24, r18
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	82 0f       	add	r24, r18
    230a:	93 1f       	adc	r25, r19
    230c:	9c 01       	movw	r18, r24
    230e:	20 5a       	subi	r18, 0xA0	; 160
    2310:	30 40       	sbci	r19, 0x00	; 0
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	82 0f       	add	r24, r18
    2318:	93 1f       	adc	r25, r19
    231a:	fc 01       	movw	r30, r24
    231c:	e7 51       	subi	r30, 0x17	; 23
    231e:	fc 4f       	sbci	r31, 0xFC	; 252
    2320:	80 81       	ld	r24, Z
    2322:	62 e0       	ldi	r22, 0x02	; 2
    2324:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <GLCD_sendData>
		count++;
    2328:	80 91 d7 05 	lds	r24, 0x05D7
    232c:	8f 5f       	subi	r24, 0xFF	; 255
    232e:	80 93 d7 05 	sts	0x05D7, r24
	GLCD_sendCommand(0xB8 + row,2);
	count = col;
}
 
void GLCD_sendChar(uint8 Char){
	for (int i=0;i<5;i++)
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	9a 81       	ldd	r25, Y+2	; 0x02
    2336:	01 96       	adiw	r24, 0x01	; 1
    2338:	9a 83       	std	Y+2, r25	; 0x02
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	9a 81       	ldd	r25, Y+2	; 0x02
    2340:	85 30       	cpi	r24, 0x05	; 5
    2342:	91 05       	cpc	r25, r1
    2344:	0c f4       	brge	.+2      	; 0x2348 <GLCD_sendChar+0x9e>
    2346:	bb cf       	rjmp	.-138    	; 0x22be <GLCD_sendChar+0x14>
	{
		if(count < 64) GLCD_sendData(Font5x8[((Char - 32) * 5) + i], 1);
		else GLCD_sendData(Font5x8[((Char - 32) * 5) + i], 2);
		count++;
	}
	GLCD_sendData(0, (count < 64) ? 1 : 2);
    2348:	80 91 d7 05 	lds	r24, 0x05D7
    234c:	80 34       	cpi	r24, 0x40	; 64
    234e:	18 f4       	brcc	.+6      	; 0x2356 <GLCD_sendChar+0xac>
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	8c 83       	std	Y+4, r24	; 0x04
    2354:	02 c0       	rjmp	.+4      	; 0x235a <GLCD_sendChar+0xb0>
    2356:	82 e0       	ldi	r24, 0x02	; 2
    2358:	8c 83       	std	Y+4, r24	; 0x04
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	6c 81       	ldd	r22, Y+4	; 0x04
    235e:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <GLCD_sendData>
	count++;
    2362:	80 91 d7 05 	lds	r24, 0x05D7
    2366:	8f 5f       	subi	r24, 0xFF	; 255
    2368:	80 93 d7 05 	sts	0x05D7, r24
	if (count > 127)
    236c:	80 91 d7 05 	lds	r24, 0x05D7
    2370:	88 23       	and	r24, r24
    2372:	14 f4       	brge	.+4      	; 0x2378 <GLCD_sendChar+0xce>
	{
		count = 0;
    2374:	10 92 d7 05 	sts	0x05D7, r1
	}
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <GLCD_sendString>:
 
 
void GLCD_sendString(char *str){
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	00 d0       	rcall	.+0      	; 0x238c <GLCD_sendString+0x6>
    238c:	0f 92       	push	r0
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	9b 83       	std	Y+3, r25	; 0x03
    2394:	8a 83       	std	Y+2, r24	; 0x02
    for (uint8 i = 0; str[i] != '\0'; i++){
    2396:	19 82       	std	Y+1, r1	; 0x01
    2398:	0e c0       	rjmp	.+28     	; 0x23b6 <GLCD_sendString+0x30>
        GLCD_sendChar(str[i]);
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	9b 81       	ldd	r25, Y+3	; 0x03
    23a4:	fc 01       	movw	r30, r24
    23a6:	e2 0f       	add	r30, r18
    23a8:	f3 1f       	adc	r31, r19
    23aa:	80 81       	ld	r24, Z
    23ac:	0e 94 55 11 	call	0x22aa	; 0x22aa <GLCD_sendChar>
	}
}
 
 
void GLCD_sendString(char *str){
    for (uint8 i = 0; str[i] != '\0'; i++){
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	8f 5f       	subi	r24, 0xFF	; 255
    23b4:	89 83       	std	Y+1, r24	; 0x01
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	28 2f       	mov	r18, r24
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	9b 81       	ldd	r25, Y+3	; 0x03
    23c0:	fc 01       	movw	r30, r24
    23c2:	e2 0f       	add	r30, r18
    23c4:	f3 1f       	adc	r31, r19
    23c6:	80 81       	ld	r24, Z
    23c8:	88 23       	and	r24, r24
    23ca:	39 f7       	brne	.-50     	; 0x239a <GLCD_sendString+0x14>
        GLCD_sendChar(str[i]);
    }
}
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <GLCD_init>:
 
 
void GLCD_init(){
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
	setPinDirection(LCD_DATA_DB0, LCD_DB0, Output);
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	62 e0       	ldi	r22, 0x02	; 2
    23e4:	41 e0       	ldi	r20, 0x01	; 1
    23e6:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(LCD_DATA_DB1, LCD_DB1, Output);
    23ea:	82 e0       	ldi	r24, 0x02	; 2
    23ec:	63 e0       	ldi	r22, 0x03	; 3
    23ee:	41 e0       	ldi	r20, 0x01	; 1
    23f0:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(LCD_DATA_DB2, LCD_DB2, Output);
    23f4:	82 e0       	ldi	r24, 0x02	; 2
    23f6:	64 e0       	ldi	r22, 0x04	; 4
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(LCD_DATA_DB3, LCD_DB3, Output);
    23fe:	82 e0       	ldi	r24, 0x02	; 2
    2400:	65 e0       	ldi	r22, 0x05	; 5
    2402:	41 e0       	ldi	r20, 0x01	; 1
    2404:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(LCD_DATA_DB4, LCD_DB4, Output);
    2408:	82 e0       	ldi	r24, 0x02	; 2
    240a:	66 e0       	ldi	r22, 0x06	; 6
    240c:	41 e0       	ldi	r20, 0x01	; 1
    240e:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(LCD_DATA_DB5, LCD_DB5, Output);
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	67 e0       	ldi	r22, 0x07	; 7
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(LCD_DATA_DB6, LCD_DB6, Output); 
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	63 e0       	ldi	r22, 0x03	; 3
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(LCD_DATA_DB7, LCD_DB7, Output); 
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	64 e0       	ldi	r22, 0x04	; 4
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>

	setPinDirection(LCD_CONT_EN, LCD_EN, Output);
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	65 e0       	ldi	r22, 0x05	; 5
    2434:	41 e0       	ldi	r20, 0x01	; 1
    2436:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(LCD_CONT_DI, LCD_DI, Output);
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	66 e0       	ldi	r22, 0x06	; 6
    243e:	41 e0       	ldi	r20, 0x01	; 1
    2440:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(LCD_CONT_CS1, LCD_CS1, Output);
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	67 e0       	ldi	r22, 0x07	; 7
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(LCD_CONT_CS2, LCD_CS2, Output);
    244e:	83 e0       	ldi	r24, 0x03	; 3
    2450:	62 e0       	ldi	r22, 0x02	; 2
    2452:	41 e0       	ldi	r20, 0x01	; 1
    2454:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	
	GLCD_sendCommand(0x3F,1);
    2458:	8f e3       	ldi	r24, 0x3F	; 63
    245a:	61 e0       	ldi	r22, 0x01	; 1
    245c:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GLCD_sendCommand>
	GLCD_sendCommand(0x3F,2);
    2460:	8f e3       	ldi	r24, 0x3F	; 63
    2462:	62 e0       	ldi	r22, 0x02	; 2
    2464:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <GLCD_sendCommand>
	count = 0;
    2468:	10 92 d7 05 	sts	0x05D7, r1
}
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <GLCD_sendLogo>:
 

void GLCD_sendLogo(){
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	00 d0       	rcall	.+0      	; 0x2478 <GLCD_sendLogo+0x6>
    2478:	00 d0       	rcall	.+0      	; 0x247a <GLCD_sendLogo+0x8>
    247a:	00 d0       	rcall	.+0      	; 0x247c <GLCD_sendLogo+0xa>
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
	uint16 tcount = 0;
    2480:	1e 82       	std	Y+6, r1	; 0x06
    2482:	1d 82       	std	Y+5, r1	; 0x05
	for (int i = 0; i < 8; i++)
    2484:	1c 82       	std	Y+4, r1	; 0x04
    2486:	1b 82       	std	Y+3, r1	; 0x03
    2488:	40 c0       	rjmp	.+128    	; 0x250a <GLCD_sendLogo+0x98>
	{
		count=0;
    248a:	10 92 d7 05 	sts	0x05D7, r1
		GLCD_moveCursor(i, 0);
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	60 e0       	ldi	r22, 0x00	; 0
    2492:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
		for (int j = tcount; j < tcount + 128; j++)
    2496:	8d 81       	ldd	r24, Y+5	; 0x05
    2498:	9e 81       	ldd	r25, Y+6	; 0x06
    249a:	9a 83       	std	Y+2, r25	; 0x02
    249c:	89 83       	std	Y+1, r24	; 0x01
    249e:	21 c0       	rjmp	.+66     	; 0x24e2 <GLCD_sendLogo+0x70>
		{
			if(count<64) GLCD_sendData(IPL_Logo[j],1);
    24a0:	80 91 d7 05 	lds	r24, 0x05D7
    24a4:	80 34       	cpi	r24, 0x40	; 64
    24a6:	50 f4       	brcc	.+20     	; 0x24bc <GLCD_sendLogo+0x4a>
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	9a 81       	ldd	r25, Y+2	; 0x02
    24ac:	fc 01       	movw	r30, r24
    24ae:	e9 52       	subi	r30, 0x29	; 41
    24b0:	fa 4f       	sbci	r31, 0xFA	; 250
    24b2:	80 81       	ld	r24, Z
    24b4:	61 e0       	ldi	r22, 0x01	; 1
    24b6:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <GLCD_sendData>
    24ba:	09 c0       	rjmp	.+18     	; 0x24ce <GLCD_sendLogo+0x5c>
			else GLCD_sendData(IPL_Logo[j],2);
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	9a 81       	ldd	r25, Y+2	; 0x02
    24c0:	fc 01       	movw	r30, r24
    24c2:	e9 52       	subi	r30, 0x29	; 41
    24c4:	fa 4f       	sbci	r31, 0xFA	; 250
    24c6:	80 81       	ld	r24, Z
    24c8:	62 e0       	ldi	r22, 0x02	; 2
    24ca:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <GLCD_sendData>
			count++;
    24ce:	80 91 d7 05 	lds	r24, 0x05D7
    24d2:	8f 5f       	subi	r24, 0xFF	; 255
    24d4:	80 93 d7 05 	sts	0x05D7, r24
	uint16 tcount = 0;
	for (int i = 0; i < 8; i++)
	{
		count=0;
		GLCD_moveCursor(i, 0);
		for (int j = tcount; j < tcount + 128; j++)
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	9a 81       	ldd	r25, Y+2	; 0x02
    24dc:	01 96       	adiw	r24, 0x01	; 1
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	9a 81       	ldd	r25, Y+2	; 0x02
    24e6:	2d 81       	ldd	r18, Y+5	; 0x05
    24e8:	3e 81       	ldd	r19, Y+6	; 0x06
    24ea:	20 58       	subi	r18, 0x80	; 128
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	82 17       	cp	r24, r18
    24f0:	93 07       	cpc	r25, r19
    24f2:	b0 f2       	brcs	.-84     	; 0x24a0 <GLCD_sendLogo+0x2e>
		{
			if(count<64) GLCD_sendData(IPL_Logo[j],1);
			else GLCD_sendData(IPL_Logo[j],2);
			count++;
		}
		tcount += 128;
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	80 58       	subi	r24, 0x80	; 128
    24fa:	9f 4f       	sbci	r25, 0xFF	; 255
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
}
 

void GLCD_sendLogo(){
	uint16 tcount = 0;
	for (int i = 0; i < 8; i++)
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	9c 81       	ldd	r25, Y+4	; 0x04
    2504:	01 96       	adiw	r24, 0x01	; 1
    2506:	9c 83       	std	Y+4, r25	; 0x04
    2508:	8b 83       	std	Y+3, r24	; 0x03
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	9c 81       	ldd	r25, Y+4	; 0x04
    250e:	88 30       	cpi	r24, 0x08	; 8
    2510:	91 05       	cpc	r25, r1
    2512:	0c f4       	brge	.+2      	; 0x2516 <GLCD_sendLogo+0xa4>
    2514:	ba cf       	rjmp	.-140    	; 0x248a <GLCD_sendLogo+0x18>
			else GLCD_sendData(IPL_Logo[j],2);
			count++;
		}
		tcount += 128;
	}
}
    2516:	26 96       	adiw	r28, 0x06	; 6
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <GLCD_clearLCD>:

void GLCD_clearLCD(){
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	00 d0       	rcall	.+0      	; 0x252e <GLCD_clearLCD+0x6>
    252e:	00 d0       	rcall	.+0      	; 0x2530 <GLCD_clearLCD+0x8>
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
 
	for (int i = 0; i < 8; i++)
    2534:	1c 82       	std	Y+4, r1	; 0x04
    2536:	1b 82       	std	Y+3, r1	; 0x03
    2538:	1e c0       	rjmp	.+60     	; 0x2576 <GLCD_clearLCD+0x4e>
	{
		GLCD_moveCursor(i, 0);
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	60 e0       	ldi	r22, 0x00	; 0
    253e:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
		for(int j=0;j<128;j++){
    2542:	1a 82       	std	Y+2, r1	; 0x02
    2544:	19 82       	std	Y+1, r1	; 0x01
    2546:	0d c0       	rjmp	.+26     	; 0x2562 <GLCD_clearLCD+0x3a>
			GLCD_sendData(0,1);
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	61 e0       	ldi	r22, 0x01	; 1
    254c:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <GLCD_sendData>
			GLCD_sendData(0,2);
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	62 e0       	ldi	r22, 0x02	; 2
    2554:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <GLCD_sendData>
void GLCD_clearLCD(){
 
	for (int i = 0; i < 8; i++)
	{
		GLCD_moveCursor(i, 0);
		for(int j=0;j<128;j++){
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	9a 81       	ldd	r25, Y+2	; 0x02
    255c:	01 96       	adiw	r24, 0x01	; 1
    255e:	9a 83       	std	Y+2, r25	; 0x02
    2560:	89 83       	std	Y+1, r24	; 0x01
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	9a 81       	ldd	r25, Y+2	; 0x02
    2566:	80 38       	cpi	r24, 0x80	; 128
    2568:	91 05       	cpc	r25, r1
    256a:	74 f3       	brlt	.-36     	; 0x2548 <GLCD_clearLCD+0x20>
	}
}

void GLCD_clearLCD(){
 
	for (int i = 0; i < 8; i++)
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	9c 81       	ldd	r25, Y+4	; 0x04
    2570:	01 96       	adiw	r24, 0x01	; 1
    2572:	9c 83       	std	Y+4, r25	; 0x04
    2574:	8b 83       	std	Y+3, r24	; 0x03
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	9c 81       	ldd	r25, Y+4	; 0x04
    257a:	88 30       	cpi	r24, 0x08	; 8
    257c:	91 05       	cpc	r25, r1
    257e:	ec f2       	brlt	.-70     	; 0x253a <GLCD_clearLCD+0x12>
		for(int j=0;j<128;j++){
			GLCD_sendData(0,1);
			GLCD_sendData(0,2);
		}
	}	
	count=0;
    2580:	10 92 d7 05 	sts	0x05D7, r1
	GLCD_moveCursor(0,0);
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
}
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <GIE>:
#include "../DIO/DIO_INTERFACE.h"
#include "GIE_CONFIG.h"
#include "GIE_PRIVATE.h"
#include "GIE_INTERFACE.h"

void GIE(){
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG, SREGF);
    25a2:	af e5       	ldi	r26, 0x5F	; 95
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	ef e5       	ldi	r30, 0x5F	; 95
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	80 68       	ori	r24, 0x80	; 128
    25ae:	8c 93       	st	X, r24
}
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <GID>:

void GID(){
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(SREG, SREGF);
    25be:	af e5       	ldi	r26, 0x5F	; 95
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	ef e5       	ldi	r30, 0x5F	; 95
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	8f 77       	andi	r24, 0x7F	; 127
    25ca:	8c 93       	st	X, r24
}
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <FLAME_handleADCResult>:
#include "../STD/STD_MATH.h"
#include "../ADC/ADC_INTERFACE.h"
#include "../SPI/SPI_INTERFACE.h"
#include "FLAME_interface.h"

void FLAME_handleADCResult(uint16 result) {
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	28 97       	sbiw	r28, 0x08	; 8
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	98 87       	std	Y+8, r25	; 0x08
    25e8:	8f 83       	std	Y+7, r24	; 0x07
	uint16 value = result;
    25ea:	8f 81       	ldd	r24, Y+7	; 0x07
    25ec:	98 85       	ldd	r25, Y+8	; 0x08
    25ee:	9e 83       	std	Y+6, r25	; 0x06
    25f0:	8d 83       	std	Y+5, r24	; 0x05
	float volt = ((float)value * 0.00488);
    25f2:	8d 81       	ldd	r24, Y+5	; 0x05
    25f4:	9e 81       	ldd	r25, Y+6	; 0x06
    25f6:	cc 01       	movw	r24, r24
    25f8:	a0 e0       	ldi	r26, 0x00	; 0
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	bc 01       	movw	r22, r24
    260a:	cd 01       	movw	r24, r26
    260c:	28 e6       	ldi	r18, 0x68	; 104
    260e:	38 ee       	ldi	r19, 0xE8	; 232
    2610:	4f e9       	ldi	r20, 0x9F	; 159
    2612:	5b e3       	ldi	r21, 0x3B	; 59
    2614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	89 83       	std	Y+1, r24	; 0x01
    261e:	9a 83       	std	Y+2, r25	; 0x02
    2620:	ab 83       	std	Y+3, r26	; 0x03
    2622:	bc 83       	std	Y+4, r27	; 0x04
    if(volt <= 2.5){
    2624:	69 81       	ldd	r22, Y+1	; 0x01
    2626:	7a 81       	ldd	r23, Y+2	; 0x02
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	9c 81       	ldd	r25, Y+4	; 0x04
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e2       	ldi	r20, 0x20	; 32
    2632:	50 e4       	ldi	r21, 0x40	; 64
    2634:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    2638:	18 16       	cp	r1, r24
    263a:	24 f0       	brlt	.+8      	; 0x2644 <FLAME_handleADCResult+0x72>
        SPI_transceive('f');
    263c:	86 e6       	ldi	r24, 0x66	; 102
    263e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <SPI_transceive>
    2642:	03 c0       	rjmp	.+6      	; 0x264a <FLAME_handleADCResult+0x78>
    }
    else{
        SPI_transceive('F');
    2644:	86 e4       	ldi	r24, 0x46	; 70
    2646:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <SPI_transceive>
    }
}
    264a:	28 96       	adiw	r28, 0x08	; 8
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	08 95       	ret

0000265c <FLAME_init>:

void FLAME_init(){
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    ADC_setCallback(FLAME_handleADCResult);
    2664:	89 ee       	ldi	r24, 0xE9	; 233
    2666:	92 e1       	ldi	r25, 0x12	; 18
    2668:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <ADC_setCallback>
}
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	08 95       	ret

00002672 <FLAME_calculate>:

void FLAME_calculate(uint8 CH){
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	0f 92       	push	r0
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	89 83       	std	Y+1, r24	; 0x01
    ADC_startConversion(CH);
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <ADC_startConversion>
}
    2684:	0f 90       	pop	r0
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <setPinDirection>:
#include "../STD/STD_TYPES.h"
#include "../STD/STD_MATH.h"
#include "DIO_PRIVATE.h"
#include "DIO_INTERFACE.h"

void setPinDirection(uint8 Port, uint8 Pin, uint8 Direction){
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	27 97       	sbiw	r28, 0x07	; 7
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	8b 83       	std	Y+3, r24	; 0x03
    26a2:	6c 83       	std	Y+4, r22	; 0x04
    26a4:	4d 83       	std	Y+5, r20	; 0x05
    volatile uint8 *ddr_reg;

    switch (Port) {
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	3f 83       	std	Y+7, r19	; 0x07
    26ae:	2e 83       	std	Y+6, r18	; 0x06
    26b0:	8e 81       	ldd	r24, Y+6	; 0x06
    26b2:	9f 81       	ldd	r25, Y+7	; 0x07
    26b4:	81 30       	cpi	r24, 0x01	; 1
    26b6:	91 05       	cpc	r25, r1
    26b8:	d1 f0       	breq	.+52     	; 0x26ee <setPinDirection+0x62>
    26ba:	2e 81       	ldd	r18, Y+6	; 0x06
    26bc:	3f 81       	ldd	r19, Y+7	; 0x07
    26be:	22 30       	cpi	r18, 0x02	; 2
    26c0:	31 05       	cpc	r19, r1
    26c2:	2c f4       	brge	.+10     	; 0x26ce <setPinDirection+0x42>
    26c4:	8e 81       	ldd	r24, Y+6	; 0x06
    26c6:	9f 81       	ldd	r25, Y+7	; 0x07
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	61 f0       	breq	.+24     	; 0x26e4 <setPinDirection+0x58>
    26cc:	49 c0       	rjmp	.+146    	; 0x2760 <setPinDirection+0xd4>
    26ce:	2e 81       	ldd	r18, Y+6	; 0x06
    26d0:	3f 81       	ldd	r19, Y+7	; 0x07
    26d2:	22 30       	cpi	r18, 0x02	; 2
    26d4:	31 05       	cpc	r19, r1
    26d6:	81 f0       	breq	.+32     	; 0x26f8 <setPinDirection+0x6c>
    26d8:	8e 81       	ldd	r24, Y+6	; 0x06
    26da:	9f 81       	ldd	r25, Y+7	; 0x07
    26dc:	83 30       	cpi	r24, 0x03	; 3
    26de:	91 05       	cpc	r25, r1
    26e0:	81 f0       	breq	.+32     	; 0x2702 <setPinDirection+0x76>
    26e2:	3e c0       	rjmp	.+124    	; 0x2760 <setPinDirection+0xd4>
        case Port_A:
            ddr_reg = &DDRA;
    26e4:	8a e3       	ldi	r24, 0x3A	; 58
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	9a 83       	std	Y+2, r25	; 0x02
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	0e c0       	rjmp	.+28     	; 0x270a <setPinDirection+0x7e>
            break;
        case Port_B:
            ddr_reg = &DDRB;
    26ee:	87 e3       	ldi	r24, 0x37	; 55
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	9a 83       	std	Y+2, r25	; 0x02
    26f4:	89 83       	std	Y+1, r24	; 0x01
    26f6:	09 c0       	rjmp	.+18     	; 0x270a <setPinDirection+0x7e>
            break;
        case Port_C:
            ddr_reg = &DDRC;
    26f8:	84 e3       	ldi	r24, 0x34	; 52
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	9a 83       	std	Y+2, r25	; 0x02
    26fe:	89 83       	std	Y+1, r24	; 0x01
    2700:	04 c0       	rjmp	.+8      	; 0x270a <setPinDirection+0x7e>
            break;
        case Port_D:
            ddr_reg = &DDRD;
    2702:	81 e3       	ldi	r24, 0x31	; 49
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	9a 83       	std	Y+2, r25	; 0x02
    2708:	89 83       	std	Y+1, r24	; 0x01
            break;
        default:
            return;
    }

    if (Direction == Input) {
    270a:	8d 81       	ldd	r24, Y+5	; 0x05
    270c:	88 23       	and	r24, r24
    270e:	a9 f4       	brne	.+42     	; 0x273a <setPinDirection+0xae>
        CLEAR_BIT(*ddr_reg, Pin);
    2710:	e9 81       	ldd	r30, Y+1	; 0x01
    2712:	fa 81       	ldd	r31, Y+2	; 0x02
    2714:	80 81       	ld	r24, Z
    2716:	48 2f       	mov	r20, r24
    2718:	8c 81       	ldd	r24, Y+4	; 0x04
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	02 2e       	mov	r0, r18
    2724:	02 c0       	rjmp	.+4      	; 0x272a <setPinDirection+0x9e>
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	0a 94       	dec	r0
    272c:	e2 f7       	brpl	.-8      	; 0x2726 <setPinDirection+0x9a>
    272e:	80 95       	com	r24
    2730:	84 23       	and	r24, r20
    2732:	e9 81       	ldd	r30, Y+1	; 0x01
    2734:	fa 81       	ldd	r31, Y+2	; 0x02
    2736:	80 83       	st	Z, r24
    2738:	13 c0       	rjmp	.+38     	; 0x2760 <setPinDirection+0xd4>
    } else {
        SET_BIT(*ddr_reg, Pin);
    273a:	e9 81       	ldd	r30, Y+1	; 0x01
    273c:	fa 81       	ldd	r31, Y+2	; 0x02
    273e:	80 81       	ld	r24, Z
    2740:	48 2f       	mov	r20, r24
    2742:	8c 81       	ldd	r24, Y+4	; 0x04
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	02 2e       	mov	r0, r18
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <setPinDirection+0xc8>
    2750:	88 0f       	add	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	0a 94       	dec	r0
    2756:	e2 f7       	brpl	.-8      	; 0x2750 <setPinDirection+0xc4>
    2758:	84 2b       	or	r24, r20
    275a:	e9 81       	ldd	r30, Y+1	; 0x01
    275c:	fa 81       	ldd	r31, Y+2	; 0x02
    275e:	80 83       	st	Z, r24
    }
}
    2760:	27 96       	adiw	r28, 0x07	; 7
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	f8 94       	cli
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	cd bf       	out	0x3d, r28	; 61
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	08 95       	ret

00002772 <setPinValue>:

void setPinValue(uint8 Port, uint8 Pin, uint8 Value){
    2772:	df 93       	push	r29
    2774:	cf 93       	push	r28
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	27 97       	sbiw	r28, 0x07	; 7
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
    2786:	8b 83       	std	Y+3, r24	; 0x03
    2788:	6c 83       	std	Y+4, r22	; 0x04
    278a:	4d 83       	std	Y+5, r20	; 0x05
    volatile uint8 *port_reg;

    switch (Port) {
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	3f 83       	std	Y+7, r19	; 0x07
    2794:	2e 83       	std	Y+6, r18	; 0x06
    2796:	8e 81       	ldd	r24, Y+6	; 0x06
    2798:	9f 81       	ldd	r25, Y+7	; 0x07
    279a:	81 30       	cpi	r24, 0x01	; 1
    279c:	91 05       	cpc	r25, r1
    279e:	d1 f0       	breq	.+52     	; 0x27d4 <setPinValue+0x62>
    27a0:	2e 81       	ldd	r18, Y+6	; 0x06
    27a2:	3f 81       	ldd	r19, Y+7	; 0x07
    27a4:	22 30       	cpi	r18, 0x02	; 2
    27a6:	31 05       	cpc	r19, r1
    27a8:	2c f4       	brge	.+10     	; 0x27b4 <setPinValue+0x42>
    27aa:	8e 81       	ldd	r24, Y+6	; 0x06
    27ac:	9f 81       	ldd	r25, Y+7	; 0x07
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	61 f0       	breq	.+24     	; 0x27ca <setPinValue+0x58>
    27b2:	49 c0       	rjmp	.+146    	; 0x2846 <setPinValue+0xd4>
    27b4:	2e 81       	ldd	r18, Y+6	; 0x06
    27b6:	3f 81       	ldd	r19, Y+7	; 0x07
    27b8:	22 30       	cpi	r18, 0x02	; 2
    27ba:	31 05       	cpc	r19, r1
    27bc:	81 f0       	breq	.+32     	; 0x27de <setPinValue+0x6c>
    27be:	8e 81       	ldd	r24, Y+6	; 0x06
    27c0:	9f 81       	ldd	r25, Y+7	; 0x07
    27c2:	83 30       	cpi	r24, 0x03	; 3
    27c4:	91 05       	cpc	r25, r1
    27c6:	81 f0       	breq	.+32     	; 0x27e8 <setPinValue+0x76>
    27c8:	3e c0       	rjmp	.+124    	; 0x2846 <setPinValue+0xd4>
        case Port_A:
            port_reg = &PORTA;
    27ca:	8b e3       	ldi	r24, 0x3B	; 59
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
    27d2:	0e c0       	rjmp	.+28     	; 0x27f0 <setPinValue+0x7e>
            break;
        case Port_B:
            port_reg = &PORTB;
    27d4:	88 e3       	ldi	r24, 0x38	; 56
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	9a 83       	std	Y+2, r25	; 0x02
    27da:	89 83       	std	Y+1, r24	; 0x01
    27dc:	09 c0       	rjmp	.+18     	; 0x27f0 <setPinValue+0x7e>
            break;
        case Port_C:
            port_reg = &PORTC;
    27de:	85 e3       	ldi	r24, 0x35	; 53
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9a 83       	std	Y+2, r25	; 0x02
    27e4:	89 83       	std	Y+1, r24	; 0x01
    27e6:	04 c0       	rjmp	.+8      	; 0x27f0 <setPinValue+0x7e>
            break;
        case Port_D:
            port_reg = &PORTD;
    27e8:	82 e3       	ldi	r24, 0x32	; 50
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	89 83       	std	Y+1, r24	; 0x01
            break;
        default:
            return;
    }

    if (Value == PinHigh) {
    27f0:	8d 81       	ldd	r24, Y+5	; 0x05
    27f2:	81 30       	cpi	r24, 0x01	; 1
    27f4:	a1 f4       	brne	.+40     	; 0x281e <setPinValue+0xac>
        SET_BIT(*port_reg, Pin);
    27f6:	e9 81       	ldd	r30, Y+1	; 0x01
    27f8:	fa 81       	ldd	r31, Y+2	; 0x02
    27fa:	80 81       	ld	r24, Z
    27fc:	48 2f       	mov	r20, r24
    27fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	02 2e       	mov	r0, r18
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <setPinValue+0x9e>
    280c:	88 0f       	add	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	0a 94       	dec	r0
    2812:	e2 f7       	brpl	.-8      	; 0x280c <setPinValue+0x9a>
    2814:	84 2b       	or	r24, r20
    2816:	e9 81       	ldd	r30, Y+1	; 0x01
    2818:	fa 81       	ldd	r31, Y+2	; 0x02
    281a:	80 83       	st	Z, r24
    281c:	14 c0       	rjmp	.+40     	; 0x2846 <setPinValue+0xd4>
    } else {
        CLEAR_BIT(*port_reg, Pin);
    281e:	e9 81       	ldd	r30, Y+1	; 0x01
    2820:	fa 81       	ldd	r31, Y+2	; 0x02
    2822:	80 81       	ld	r24, Z
    2824:	48 2f       	mov	r20, r24
    2826:	8c 81       	ldd	r24, Y+4	; 0x04
    2828:	28 2f       	mov	r18, r24
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	02 2e       	mov	r0, r18
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <setPinValue+0xc6>
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	0a 94       	dec	r0
    283a:	e2 f7       	brpl	.-8      	; 0x2834 <setPinValue+0xc2>
    283c:	80 95       	com	r24
    283e:	84 23       	and	r24, r20
    2840:	e9 81       	ldd	r30, Y+1	; 0x01
    2842:	fa 81       	ldd	r31, Y+2	; 0x02
    2844:	80 83       	st	Z, r24
    }
}
    2846:	27 96       	adiw	r28, 0x07	; 7
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	08 95       	ret

00002858 <getPinValue>:

void getPinValue(uint8 Port, uint8 Pin, uint8 *Value){
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	28 97       	sbiw	r28, 0x08	; 8
    2862:	0f b6       	in	r0, 0x3f	; 63
    2864:	f8 94       	cli
    2866:	de bf       	out	0x3e, r29	; 62
    2868:	0f be       	out	0x3f, r0	; 63
    286a:	cd bf       	out	0x3d, r28	; 61
    286c:	8b 83       	std	Y+3, r24	; 0x03
    286e:	6c 83       	std	Y+4, r22	; 0x04
    2870:	5e 83       	std	Y+6, r21	; 0x06
    2872:	4d 83       	std	Y+5, r20	; 0x05
    volatile uint8 *pin_reg;

    switch (Port) {
    2874:	8b 81       	ldd	r24, Y+3	; 0x03
    2876:	28 2f       	mov	r18, r24
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	38 87       	std	Y+8, r19	; 0x08
    287c:	2f 83       	std	Y+7, r18	; 0x07
    287e:	4f 81       	ldd	r20, Y+7	; 0x07
    2880:	58 85       	ldd	r21, Y+8	; 0x08
    2882:	41 30       	cpi	r20, 0x01	; 1
    2884:	51 05       	cpc	r21, r1
    2886:	d9 f0       	breq	.+54     	; 0x28be <getPinValue+0x66>
    2888:	8f 81       	ldd	r24, Y+7	; 0x07
    288a:	98 85       	ldd	r25, Y+8	; 0x08
    288c:	82 30       	cpi	r24, 0x02	; 2
    288e:	91 05       	cpc	r25, r1
    2890:	34 f4       	brge	.+12     	; 0x289e <getPinValue+0x46>
    2892:	2f 81       	ldd	r18, Y+7	; 0x07
    2894:	38 85       	ldd	r19, Y+8	; 0x08
    2896:	21 15       	cp	r18, r1
    2898:	31 05       	cpc	r19, r1
    289a:	61 f0       	breq	.+24     	; 0x28b4 <getPinValue+0x5c>
    289c:	31 c0       	rjmp	.+98     	; 0x2900 <getPinValue+0xa8>
    289e:	4f 81       	ldd	r20, Y+7	; 0x07
    28a0:	58 85       	ldd	r21, Y+8	; 0x08
    28a2:	42 30       	cpi	r20, 0x02	; 2
    28a4:	51 05       	cpc	r21, r1
    28a6:	81 f0       	breq	.+32     	; 0x28c8 <getPinValue+0x70>
    28a8:	8f 81       	ldd	r24, Y+7	; 0x07
    28aa:	98 85       	ldd	r25, Y+8	; 0x08
    28ac:	83 30       	cpi	r24, 0x03	; 3
    28ae:	91 05       	cpc	r25, r1
    28b0:	81 f0       	breq	.+32     	; 0x28d2 <getPinValue+0x7a>
    28b2:	26 c0       	rjmp	.+76     	; 0x2900 <getPinValue+0xa8>
        case Port_A:
            pin_reg = &PINA;
    28b4:	89 e3       	ldi	r24, 0x39	; 57
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	89 83       	std	Y+1, r24	; 0x01
    28bc:	0e c0       	rjmp	.+28     	; 0x28da <getPinValue+0x82>
            break;
        case Port_B:
            pin_reg = &PINB;
    28be:	86 e3       	ldi	r24, 0x36	; 54
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	9a 83       	std	Y+2, r25	; 0x02
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	09 c0       	rjmp	.+18     	; 0x28da <getPinValue+0x82>
            break;
        case Port_C:
            pin_reg = &PINC;
    28c8:	83 e3       	ldi	r24, 0x33	; 51
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9a 83       	std	Y+2, r25	; 0x02
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	04 c0       	rjmp	.+8      	; 0x28da <getPinValue+0x82>
            break;
        case Port_D:
            pin_reg = &PIND;
    28d2:	80 e3       	ldi	r24, 0x30	; 48
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	9a 83       	std	Y+2, r25	; 0x02
    28d8:	89 83       	std	Y+1, r24	; 0x01
            break;
        default:
            return;
    }

    *Value = GET_BIT(*pin_reg, Pin);
    28da:	e9 81       	ldd	r30, Y+1	; 0x01
    28dc:	fa 81       	ldd	r31, Y+2	; 0x02
    28de:	80 81       	ld	r24, Z
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	8c 81       	ldd	r24, Y+4	; 0x04
    28e6:	88 2f       	mov	r24, r24
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	a9 01       	movw	r20, r18
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <getPinValue+0x9a>
    28ee:	55 95       	asr	r21
    28f0:	47 95       	ror	r20
    28f2:	8a 95       	dec	r24
    28f4:	e2 f7       	brpl	.-8      	; 0x28ee <getPinValue+0x96>
    28f6:	ca 01       	movw	r24, r20
    28f8:	81 70       	andi	r24, 0x01	; 1
    28fa:	ed 81       	ldd	r30, Y+5	; 0x05
    28fc:	fe 81       	ldd	r31, Y+6	; 0x06
    28fe:	80 83       	st	Z, r24
}
    2900:	28 96       	adiw	r28, 0x08	; 8
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	de bf       	out	0x3e, r29	; 62
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	cd bf       	out	0x3d, r28	; 61
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <setPortDirection>:


void setPortDirection(uint8 Port, uint8 Direction){
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	00 d0       	rcall	.+0      	; 0x2918 <setPortDirection+0x6>
    2918:	00 d0       	rcall	.+0      	; 0x291a <setPortDirection+0x8>
    291a:	00 d0       	rcall	.+0      	; 0x291c <setPortDirection+0xa>
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	8b 83       	std	Y+3, r24	; 0x03
    2922:	6c 83       	std	Y+4, r22	; 0x04
    volatile uint8 *ddr_reg;

    switch (Port) {
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	28 2f       	mov	r18, r24
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	3e 83       	std	Y+6, r19	; 0x06
    292c:	2d 83       	std	Y+5, r18	; 0x05
    292e:	8d 81       	ldd	r24, Y+5	; 0x05
    2930:	9e 81       	ldd	r25, Y+6	; 0x06
    2932:	81 30       	cpi	r24, 0x01	; 1
    2934:	91 05       	cpc	r25, r1
    2936:	d1 f0       	breq	.+52     	; 0x296c <setPortDirection+0x5a>
    2938:	2d 81       	ldd	r18, Y+5	; 0x05
    293a:	3e 81       	ldd	r19, Y+6	; 0x06
    293c:	22 30       	cpi	r18, 0x02	; 2
    293e:	31 05       	cpc	r19, r1
    2940:	2c f4       	brge	.+10     	; 0x294c <setPortDirection+0x3a>
    2942:	8d 81       	ldd	r24, Y+5	; 0x05
    2944:	9e 81       	ldd	r25, Y+6	; 0x06
    2946:	00 97       	sbiw	r24, 0x00	; 0
    2948:	61 f0       	breq	.+24     	; 0x2962 <setPortDirection+0x50>
    294a:	29 c0       	rjmp	.+82     	; 0x299e <setPortDirection+0x8c>
    294c:	2d 81       	ldd	r18, Y+5	; 0x05
    294e:	3e 81       	ldd	r19, Y+6	; 0x06
    2950:	22 30       	cpi	r18, 0x02	; 2
    2952:	31 05       	cpc	r19, r1
    2954:	81 f0       	breq	.+32     	; 0x2976 <setPortDirection+0x64>
    2956:	8d 81       	ldd	r24, Y+5	; 0x05
    2958:	9e 81       	ldd	r25, Y+6	; 0x06
    295a:	83 30       	cpi	r24, 0x03	; 3
    295c:	91 05       	cpc	r25, r1
    295e:	81 f0       	breq	.+32     	; 0x2980 <setPortDirection+0x6e>
    2960:	1e c0       	rjmp	.+60     	; 0x299e <setPortDirection+0x8c>
        case Port_A:
            ddr_reg = &DDRA;
    2962:	8a e3       	ldi	r24, 0x3A	; 58
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	9a 83       	std	Y+2, r25	; 0x02
    2968:	89 83       	std	Y+1, r24	; 0x01
    296a:	0e c0       	rjmp	.+28     	; 0x2988 <setPortDirection+0x76>
            break;
        case Port_B:
            ddr_reg = &DDRB;
    296c:	87 e3       	ldi	r24, 0x37	; 55
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9a 83       	std	Y+2, r25	; 0x02
    2972:	89 83       	std	Y+1, r24	; 0x01
    2974:	09 c0       	rjmp	.+18     	; 0x2988 <setPortDirection+0x76>
            break;
        case Port_C:
            ddr_reg = &DDRC;
    2976:	84 e3       	ldi	r24, 0x34	; 52
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	9a 83       	std	Y+2, r25	; 0x02
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	04 c0       	rjmp	.+8      	; 0x2988 <setPortDirection+0x76>
            break;
        case Port_D:
            ddr_reg = &DDRD;
    2980:	81 e3       	ldi	r24, 0x31	; 49
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	9a 83       	std	Y+2, r25	; 0x02
    2986:	89 83       	std	Y+1, r24	; 0x01
            break;
        default:
            return;
    }

    if (Direction == Input) {
    2988:	8c 81       	ldd	r24, Y+4	; 0x04
    298a:	88 23       	and	r24, r24
    298c:	21 f4       	brne	.+8      	; 0x2996 <setPortDirection+0x84>
        *ddr_reg = 0x00;
    298e:	e9 81       	ldd	r30, Y+1	; 0x01
    2990:	fa 81       	ldd	r31, Y+2	; 0x02
    2992:	10 82       	st	Z, r1
    2994:	04 c0       	rjmp	.+8      	; 0x299e <setPortDirection+0x8c>
    } else {
        *ddr_reg = 0xff;
    2996:	e9 81       	ldd	r30, Y+1	; 0x01
    2998:	fa 81       	ldd	r31, Y+2	; 0x02
    299a:	8f ef       	ldi	r24, 0xFF	; 255
    299c:	80 83       	st	Z, r24
    }
}
    299e:	26 96       	adiw	r28, 0x06	; 6
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <setPortValue>:


void setPortValue(uint8 Port, uint8 Value){
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <setPortValue+0x6>
    29b6:	00 d0       	rcall	.+0      	; 0x29b8 <setPortValue+0x8>
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	89 83       	std	Y+1, r24	; 0x01
    29be:	6a 83       	std	Y+2, r22	; 0x02

    switch (Port) {
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	28 2f       	mov	r18, r24
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	3c 83       	std	Y+4, r19	; 0x04
    29c8:	2b 83       	std	Y+3, r18	; 0x03
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	9c 81       	ldd	r25, Y+4	; 0x04
    29ce:	81 30       	cpi	r24, 0x01	; 1
    29d0:	91 05       	cpc	r25, r1
    29d2:	d1 f0       	breq	.+52     	; 0x2a08 <setPortValue+0x58>
    29d4:	2b 81       	ldd	r18, Y+3	; 0x03
    29d6:	3c 81       	ldd	r19, Y+4	; 0x04
    29d8:	22 30       	cpi	r18, 0x02	; 2
    29da:	31 05       	cpc	r19, r1
    29dc:	2c f4       	brge	.+10     	; 0x29e8 <setPortValue+0x38>
    29de:	8b 81       	ldd	r24, Y+3	; 0x03
    29e0:	9c 81       	ldd	r25, Y+4	; 0x04
    29e2:	00 97       	sbiw	r24, 0x00	; 0
    29e4:	61 f0       	breq	.+24     	; 0x29fe <setPortValue+0x4e>
    29e6:	1e c0       	rjmp	.+60     	; 0x2a24 <setPortValue+0x74>
    29e8:	2b 81       	ldd	r18, Y+3	; 0x03
    29ea:	3c 81       	ldd	r19, Y+4	; 0x04
    29ec:	22 30       	cpi	r18, 0x02	; 2
    29ee:	31 05       	cpc	r19, r1
    29f0:	81 f0       	breq	.+32     	; 0x2a12 <setPortValue+0x62>
    29f2:	8b 81       	ldd	r24, Y+3	; 0x03
    29f4:	9c 81       	ldd	r25, Y+4	; 0x04
    29f6:	83 30       	cpi	r24, 0x03	; 3
    29f8:	91 05       	cpc	r25, r1
    29fa:	81 f0       	breq	.+32     	; 0x2a1c <setPortValue+0x6c>
    29fc:	13 c0       	rjmp	.+38     	; 0x2a24 <setPortValue+0x74>
        case Port_A:
            PORTA = Value;
    29fe:	eb e3       	ldi	r30, 0x3B	; 59
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	8a 81       	ldd	r24, Y+2	; 0x02
    2a04:	80 83       	st	Z, r24
    2a06:	0e c0       	rjmp	.+28     	; 0x2a24 <setPortValue+0x74>
            break;
        case Port_B:
            PORTB = Value;
    2a08:	e8 e3       	ldi	r30, 0x38	; 56
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	80 83       	st	Z, r24
    2a10:	09 c0       	rjmp	.+18     	; 0x2a24 <setPortValue+0x74>
            break;
        case Port_C:
            PORTC = Value;
    2a12:	e5 e3       	ldi	r30, 0x35	; 53
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	8a 81       	ldd	r24, Y+2	; 0x02
    2a18:	80 83       	st	Z, r24
    2a1a:	04 c0       	rjmp	.+8      	; 0x2a24 <setPortValue+0x74>
            break;
        case Port_D:
            PORTD = Value;
    2a1c:	e2 e3       	ldi	r30, 0x32	; 50
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	80 83       	st	Z, r24
            break;
        default:
            return;
    }

}
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	08 95       	ret

00002a32 <getPortValue>:



void getPortValue(uint8 Port, uint8 *Value){
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
    2a3a:	27 97       	sbiw	r28, 0x07	; 7
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	f8 94       	cli
    2a40:	de bf       	out	0x3e, r29	; 62
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	cd bf       	out	0x3d, r28	; 61
    2a46:	8b 83       	std	Y+3, r24	; 0x03
    2a48:	7d 83       	std	Y+5, r23	; 0x05
    2a4a:	6c 83       	std	Y+4, r22	; 0x04
    volatile uint8 *pin_reg;

    switch (Port) {
    2a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4e:	28 2f       	mov	r18, r24
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	3f 83       	std	Y+7, r19	; 0x07
    2a54:	2e 83       	std	Y+6, r18	; 0x06
    2a56:	8e 81       	ldd	r24, Y+6	; 0x06
    2a58:	9f 81       	ldd	r25, Y+7	; 0x07
    2a5a:	81 30       	cpi	r24, 0x01	; 1
    2a5c:	91 05       	cpc	r25, r1
    2a5e:	d1 f0       	breq	.+52     	; 0x2a94 <getPortValue+0x62>
    2a60:	2e 81       	ldd	r18, Y+6	; 0x06
    2a62:	3f 81       	ldd	r19, Y+7	; 0x07
    2a64:	22 30       	cpi	r18, 0x02	; 2
    2a66:	31 05       	cpc	r19, r1
    2a68:	2c f4       	brge	.+10     	; 0x2a74 <getPortValue+0x42>
    2a6a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a6c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	61 f0       	breq	.+24     	; 0x2a8a <getPortValue+0x58>
    2a72:	24 c0       	rjmp	.+72     	; 0x2abc <getPortValue+0x8a>
    2a74:	2e 81       	ldd	r18, Y+6	; 0x06
    2a76:	3f 81       	ldd	r19, Y+7	; 0x07
    2a78:	22 30       	cpi	r18, 0x02	; 2
    2a7a:	31 05       	cpc	r19, r1
    2a7c:	81 f0       	breq	.+32     	; 0x2a9e <getPortValue+0x6c>
    2a7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a80:	9f 81       	ldd	r25, Y+7	; 0x07
    2a82:	83 30       	cpi	r24, 0x03	; 3
    2a84:	91 05       	cpc	r25, r1
    2a86:	81 f0       	breq	.+32     	; 0x2aa8 <getPortValue+0x76>
    2a88:	19 c0       	rjmp	.+50     	; 0x2abc <getPortValue+0x8a>
        case Port_A:
            pin_reg = &PINA;
    2a8a:	89 e3       	ldi	r24, 0x39	; 57
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	9a 83       	std	Y+2, r25	; 0x02
    2a90:	89 83       	std	Y+1, r24	; 0x01
    2a92:	0e c0       	rjmp	.+28     	; 0x2ab0 <getPortValue+0x7e>
            break;
        case Port_B:
            pin_reg = &PINB;
    2a94:	86 e3       	ldi	r24, 0x36	; 54
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	9a 83       	std	Y+2, r25	; 0x02
    2a9a:	89 83       	std	Y+1, r24	; 0x01
    2a9c:	09 c0       	rjmp	.+18     	; 0x2ab0 <getPortValue+0x7e>
            break;
        case Port_C:
            pin_reg = &PINC;
    2a9e:	83 e3       	ldi	r24, 0x33	; 51
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	9a 83       	std	Y+2, r25	; 0x02
    2aa4:	89 83       	std	Y+1, r24	; 0x01
    2aa6:	04 c0       	rjmp	.+8      	; 0x2ab0 <getPortValue+0x7e>
            break;
        case Port_D:
            pin_reg = &PIND;
    2aa8:	80 e3       	ldi	r24, 0x30	; 48
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	9a 83       	std	Y+2, r25	; 0x02
    2aae:	89 83       	std	Y+1, r24	; 0x01
            break;
        default:
            return;
    }

    *Value = *pin_reg;
    2ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab4:	80 81       	ld	r24, Z
    2ab6:	ec 81       	ldd	r30, Y+4	; 0x04
    2ab8:	fd 81       	ldd	r31, Y+5	; 0x05
    2aba:	80 83       	st	Z, r24
}
    2abc:	27 96       	adiw	r28, 0x07	; 7
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <DCMOTOR_init>:
#include "../DIO/DIO_INTERFACE.h"
#include "../TIMERS/TIMER0/TIMER0_INTERFACE.h"
#include "DCMOTOR_INTERFACE.h"

void DCMOTOR_init()
{
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
	TIMER0_init(TIMER0_FASTPWM_MODE, CLK_8_PRESCALER);
    2ad6:	83 e0       	ldi	r24, 0x03	; 3
    2ad8:	62 e0       	ldi	r22, 0x02	; 2
    2ada:	0e 94 69 09 	call	0x12d2	; 0x12d2 <TIMER0_init>
	TIMER0_setPWMMode(non_inverted);
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <TIMER0_setPWMMode>
	setPinDirection(Port_B, Pin3, Output);
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	63 e0       	ldi	r22, 0x03	; 3
    2ae8:	41 e0       	ldi	r20, 0x01	; 1
    2aea:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>

	setPinDirection(MOTOR1_PORT, MOTOR1_INPUT1_PIN, Output);
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	41 e0       	ldi	r20, 0x01	; 1
    2af4:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(MOTOR1_PORT, MOTOR1_INPUT2_PIN, Output);
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	61 e0       	ldi	r22, 0x01	; 1
    2afc:	41 e0       	ldi	r20, 0x01	; 1
    2afe:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(MOTOR2_PORT, MOTOR2_INPUT1_PIN, Output);
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	62 e0       	ldi	r22, 0x02	; 2
    2b06:	41 e0       	ldi	r20, 0x01	; 1
    2b08:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>
	setPinDirection(MOTOR2_PORT, MOTOR2_INPUT2_PIN, Output);
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	63 e0       	ldi	r22, 0x03	; 3
    2b10:	41 e0       	ldi	r20, 0x01	; 1
    2b12:	0e 94 46 13 	call	0x268c	; 0x268c <setPinDirection>

	setPinValue(MOTOR1_PORT, MOTOR1_INPUT1_PIN, PinLow);
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	60 e0       	ldi	r22, 0x00	; 0
    2b1a:	40 e0       	ldi	r20, 0x00	; 0
    2b1c:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(MOTOR1_PORT, MOTOR1_INPUT2_PIN, PinLow);
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	61 e0       	ldi	r22, 0x01	; 1
    2b24:	40 e0       	ldi	r20, 0x00	; 0
    2b26:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(MOTOR2_PORT, MOTOR2_INPUT1_PIN, PinLow);
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	62 e0       	ldi	r22, 0x02	; 2
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
	setPinValue(MOTOR2_PORT, MOTOR2_INPUT2_PIN, PinLow);
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	63 e0       	ldi	r22, 0x03	; 3
    2b38:	40 e0       	ldi	r20, 0x00	; 0
    2b3a:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>

	DCMOTOR_setSpeed(motorSpeed1);
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <DCMOTOR_setSpeed>
}
    2b44:	cf 91       	pop	r28
    2b46:	df 91       	pop	r29
    2b48:	08 95       	ret

00002b4a <DCMOTOR_setState>:

void DCMOTOR_setState(et_Motor_State motorState)
{
    2b4a:	df 93       	push	r29
    2b4c:	cf 93       	push	r28
    2b4e:	00 d0       	rcall	.+0      	; 0x2b50 <DCMOTOR_setState+0x6>
    2b50:	0f 92       	push	r0
    2b52:	cd b7       	in	r28, 0x3d	; 61
    2b54:	de b7       	in	r29, 0x3e	; 62
    2b56:	89 83       	std	Y+1, r24	; 0x01
	switch(motorState)
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	28 2f       	mov	r18, r24
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	3b 83       	std	Y+3, r19	; 0x03
    2b60:	2a 83       	std	Y+2, r18	; 0x02
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	9b 81       	ldd	r25, Y+3	; 0x03
    2b66:	00 97       	sbiw	r24, 0x00	; 0
    2b68:	31 f0       	breq	.+12     	; 0x2b76 <DCMOTOR_setState+0x2c>
    2b6a:	2a 81       	ldd	r18, Y+2	; 0x02
    2b6c:	3b 81       	ldd	r19, Y+3	; 0x03
    2b6e:	21 30       	cpi	r18, 0x01	; 1
    2b70:	31 05       	cpc	r19, r1
    2b72:	b1 f0       	breq	.+44     	; 0x2ba0 <DCMOTOR_setState+0x56>
    2b74:	29 c0       	rjmp	.+82     	; 0x2bc8 <DCMOTOR_setState+0x7e>
	{
	case motorStart:
		setPinValue(MOTOR1_PORT, MOTOR1_INPUT1_PIN, PinHigh);
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	41 e0       	ldi	r20, 0x01	; 1
    2b7c:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
		setPinValue(MOTOR1_PORT, MOTOR1_INPUT2_PIN, PinLow);
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	61 e0       	ldi	r22, 0x01	; 1
    2b84:	40 e0       	ldi	r20, 0x00	; 0
    2b86:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
		setPinValue(MOTOR2_PORT, MOTOR2_INPUT1_PIN, PinHigh);
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	62 e0       	ldi	r22, 0x02	; 2
    2b8e:	41 e0       	ldi	r20, 0x01	; 1
    2b90:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
		setPinValue(MOTOR2_PORT, MOTOR2_INPUT2_PIN, PinLow);
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	63 e0       	ldi	r22, 0x03	; 3
    2b98:	40 e0       	ldi	r20, 0x00	; 0
    2b9a:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
    2b9e:	14 c0       	rjmp	.+40     	; 0x2bc8 <DCMOTOR_setState+0x7e>
		break;
	case motorStop:
		setPinValue(MOTOR1_PORT, MOTOR1_INPUT1_PIN, PinLow);
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	40 e0       	ldi	r20, 0x00	; 0
    2ba6:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
		setPinValue(MOTOR1_PORT, MOTOR1_INPUT2_PIN, PinLow);
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	61 e0       	ldi	r22, 0x01	; 1
    2bae:	40 e0       	ldi	r20, 0x00	; 0
    2bb0:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
		setPinValue(MOTOR2_PORT, MOTOR2_INPUT1_PIN, PinLow);
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	62 e0       	ldi	r22, 0x02	; 2
    2bb8:	40 e0       	ldi	r20, 0x00	; 0
    2bba:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
		setPinValue(MOTOR2_PORT, MOTOR2_INPUT2_PIN, PinLow);
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	63 e0       	ldi	r22, 0x03	; 3
    2bc2:	40 e0       	ldi	r20, 0x00	; 0
    2bc4:	0e 94 b9 13 	call	0x2772	; 0x2772 <setPinValue>
		break;
	}
}
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <DCMOTOR_setSpeed>:


void DCMOTOR_setSpeed(et_Motor_Speed MotorSpeed)
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <DCMOTOR_setSpeed+0x6>
    2bda:	0f 92       	push	r0
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    2be0:	89 83       	std	Y+1, r24	; 0x01
	switch(MotorSpeed)
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	28 2f       	mov	r18, r24
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	3b 83       	std	Y+3, r19	; 0x03
    2bea:	2a 83       	std	Y+2, r18	; 0x02
    2bec:	8a 81       	ldd	r24, Y+2	; 0x02
    2bee:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf0:	81 30       	cpi	r24, 0x01	; 1
    2bf2:	91 05       	cpc	r25, r1
    2bf4:	69 f0       	breq	.+26     	; 0x2c10 <DCMOTOR_setSpeed+0x3c>
    2bf6:	2a 81       	ldd	r18, Y+2	; 0x02
    2bf8:	3b 81       	ldd	r19, Y+3	; 0x03
    2bfa:	22 30       	cpi	r18, 0x02	; 2
    2bfc:	31 05       	cpc	r19, r1
    2bfe:	61 f0       	breq	.+24     	; 0x2c18 <DCMOTOR_setSpeed+0x44>
    2c00:	8a 81       	ldd	r24, Y+2	; 0x02
    2c02:	9b 81       	ldd	r25, Y+3	; 0x03
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	59 f4       	brne	.+22     	; 0x2c1e <DCMOTOR_setSpeed+0x4a>
	{
	case motorSpeed1:
		TIMER0_VidDUTYCYCLE(33);
    2c08:	81 e2       	ldi	r24, 0x21	; 33
    2c0a:	0e 94 84 0a 	call	0x1508	; 0x1508 <TIMER0_VidDUTYCYCLE>
    2c0e:	07 c0       	rjmp	.+14     	; 0x2c1e <DCMOTOR_setSpeed+0x4a>
		break;
	case motorSpeed2:
		TIMER0_VidDUTYCYCLE(66);
    2c10:	82 e4       	ldi	r24, 0x42	; 66
    2c12:	0e 94 84 0a 	call	0x1508	; 0x1508 <TIMER0_VidDUTYCYCLE>
    2c16:	03 c0       	rjmp	.+6      	; 0x2c1e <DCMOTOR_setSpeed+0x4a>
		break;
	case motorSpeed3:
		TIMER0_VidDUTYCYCLE(100);
    2c18:	84 e6       	ldi	r24, 0x64	; 100
    2c1a:	0e 94 84 0a 	call	0x1508	; 0x1508 <TIMER0_VidDUTYCYCLE>
		break;
	}
}
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	08 95       	ret

00002c2a <ADC_init>:

/* Static variable to hold the callback function */
static ADC_callback adcCallback = NULL;

/** ADC Initialization */
void ADC_init() {
    2c2a:	df 93       	push	r29
    2c2c:	cf 93       	push	r28
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    /* Set the voltage reference to internal 5V reference */
    SET_BIT(ADMUX, ADMUX_REFS0);
    2c32:	a7 e2       	ldi	r26, 0x27	; 39
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	e7 e2       	ldi	r30, 0x27	; 39
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	80 64       	ori	r24, 0x40	; 64
    2c3e:	8c 93       	st	X, r24
    CLEAR_BIT(ADMUX, ADMUX_REFS0);
    2c40:	a7 e2       	ldi	r26, 0x27	; 39
    2c42:	b0 e0       	ldi	r27, 0x00	; 0
    2c44:	e7 e2       	ldi	r30, 0x27	; 39
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	8f 7b       	andi	r24, 0xBF	; 191
    2c4c:	8c 93       	st	X, r24

    /* Left-justify ADC result */
    CLEAR_BIT(ADMUX, ADMUX_ADLAR);
    2c4e:	a7 e2       	ldi	r26, 0x27	; 39
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	e7 e2       	ldi	r30, 0x27	; 39
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	80 81       	ld	r24, Z
    2c58:	8f 7d       	andi	r24, 0xDF	; 223
    2c5a:	8c 93       	st	X, r24

    /* Set ADC prescaler to 128 */
    SET_BIT(ADCSRA, ADCSRA_ADPS0);
    2c5c:	a6 e2       	ldi	r26, 0x26	; 38
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	e6 e2       	ldi	r30, 0x26	; 38
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	81 60       	ori	r24, 0x01	; 1
    2c68:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS1);
    2c6a:	a6 e2       	ldi	r26, 0x26	; 38
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	e6 e2       	ldi	r30, 0x26	; 38
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	82 60       	ori	r24, 0x02	; 2
    2c76:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS2);
    2c78:	a6 e2       	ldi	r26, 0x26	; 38
    2c7a:	b0 e0       	ldi	r27, 0x00	; 0
    2c7c:	e6 e2       	ldi	r30, 0x26	; 38
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	80 81       	ld	r24, Z
    2c82:	84 60       	ori	r24, 0x04	; 4
    2c84:	8c 93       	st	X, r24

    /* Enable ADC */
    SET_BIT(ADCSRA, ADCSRA_ADEN);
    2c86:	a6 e2       	ldi	r26, 0x26	; 38
    2c88:	b0 e0       	ldi	r27, 0x00	; 0
    2c8a:	e6 e2       	ldi	r30, 0x26	; 38
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	80 81       	ld	r24, Z
    2c90:	80 68       	ori	r24, 0x80	; 128
    2c92:	8c 93       	st	X, r24

    /* Enable ADC interrupt */
    SET_BIT(ADCSRA, ADCSRA_ADIE);
    2c94:	a6 e2       	ldi	r26, 0x26	; 38
    2c96:	b0 e0       	ldi	r27, 0x00	; 0
    2c98:	e6 e2       	ldi	r30, 0x26	; 38
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	80 81       	ld	r24, Z
    2c9e:	88 60       	ori	r24, 0x08	; 8
    2ca0:	8c 93       	st	X, r24
}
    2ca2:	cf 91       	pop	r28
    2ca4:	df 91       	pop	r29
    2ca6:	08 95       	ret

00002ca8 <ADC_startConversion>:

/** Start ADC Conversion on the specified channel */
void ADC_startConversion(uint8 CH) {
    2ca8:	df 93       	push	r29
    2caa:	cf 93       	push	r28
    2cac:	0f 92       	push	r0
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    2cb2:	89 83       	std	Y+1, r24	; 0x01
    ADMUX &= 0b11100000; // Clear the channel bits
    2cb4:	a7 e2       	ldi	r26, 0x27	; 39
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e7 e2       	ldi	r30, 0x27	; 39
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	80 7e       	andi	r24, 0xE0	; 224
    2cc0:	8c 93       	st	X, r24
    ADMUX |= CH;         // Set the channel
    2cc2:	a7 e2       	ldi	r26, 0x27	; 39
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	e7 e2       	ldi	r30, 0x27	; 39
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	90 81       	ld	r25, Z
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	89 2b       	or	r24, r25
    2cd0:	8c 93       	st	X, r24

    /* Start ADC conversion */
    SET_BIT(ADCSRA, ADCSRA_ADSC);
    2cd2:	a6 e2       	ldi	r26, 0x26	; 38
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	e6 e2       	ldi	r30, 0x26	; 38
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	80 64       	ori	r24, 0x40	; 64
    2cde:	8c 93       	st	X, r24
}
    2ce0:	0f 90       	pop	r0
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	08 95       	ret

00002ce8 <ADC_setCallback>:

/** Set the callback function for ADC */
void ADC_setCallback(ADC_callback callback) {
    2ce8:	df 93       	push	r29
    2cea:	cf 93       	push	r28
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <ADC_setCallback+0x6>
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	9a 83       	std	Y+2, r25	; 0x02
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    adcCallback = callback; // Set the callback function
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfa:	90 93 d9 05 	sts	0x05D9, r25
    2cfe:	80 93 d8 05 	sts	0x05D8, r24
}
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	cf 91       	pop	r28
    2d08:	df 91       	pop	r29
    2d0a:	08 95       	ret

00002d0c <__vector_16>:

/** ADC Conversion Complete Interrupt Service Routine */
void __vector_16(void) __attribute__((signal,  used)); // ADC conversion complete vector
void __vector_16(void) {
    2d0c:	1f 92       	push	r1
    2d0e:	0f 92       	push	r0
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	0f 92       	push	r0
    2d14:	11 24       	eor	r1, r1
    2d16:	2f 93       	push	r18
    2d18:	3f 93       	push	r19
    2d1a:	4f 93       	push	r20
    2d1c:	5f 93       	push	r21
    2d1e:	6f 93       	push	r22
    2d20:	7f 93       	push	r23
    2d22:	8f 93       	push	r24
    2d24:	9f 93       	push	r25
    2d26:	af 93       	push	r26
    2d28:	bf 93       	push	r27
    2d2a:	ef 93       	push	r30
    2d2c:	ff 93       	push	r31
    2d2e:	df 93       	push	r29
    2d30:	cf 93       	push	r28
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
    if (adcCallback != NULL) {
    2d36:	80 91 d8 05 	lds	r24, 0x05D8
    2d3a:	90 91 d9 05 	lds	r25, 0x05D9
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	49 f0       	breq	.+18     	; 0x2d54 <__vector_16+0x48>
        adcCallback(ADC); // Call the callback function with the ADC result
    2d42:	e0 91 d8 05 	lds	r30, 0x05D8
    2d46:	f0 91 d9 05 	lds	r31, 0x05D9
    2d4a:	a4 e2       	ldi	r26, 0x24	; 36
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	8d 91       	ld	r24, X+
    2d50:	9c 91       	ld	r25, X
    2d52:	09 95       	icall
    }
}
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	ff 91       	pop	r31
    2d5a:	ef 91       	pop	r30
    2d5c:	bf 91       	pop	r27
    2d5e:	af 91       	pop	r26
    2d60:	9f 91       	pop	r25
    2d62:	8f 91       	pop	r24
    2d64:	7f 91       	pop	r23
    2d66:	6f 91       	pop	r22
    2d68:	5f 91       	pop	r21
    2d6a:	4f 91       	pop	r20
    2d6c:	3f 91       	pop	r19
    2d6e:	2f 91       	pop	r18
    2d70:	0f 90       	pop	r0
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	0f 90       	pop	r0
    2d76:	1f 90       	pop	r1
    2d78:	18 95       	reti

00002d7a <main>:
void fanSpeedMenuDisplay(); // Display the fan speed menu
void lightStateMenuDisplay(); // Display the light state menu
void handleUART(uint8 command); // Handle UART commands

int main(void)
{
    2d7a:	df 93       	push	r29
    2d7c:	cf 93       	push	r28
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
    2d82:	aa 97       	sbiw	r28, 0x2a	; 42
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	de bf       	out	0x3e, r29	; 62
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	cd bf       	out	0x3d, r28	; 61
    // Initialize hardware modules
    SPI_masterInit();
    2d8e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <SPI_masterInit>
    UART_init(103);
    2d92:	87 e6       	ldi	r24, 0x67	; 103
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 a5 07 	call	0xf4a	; 0xf4a <UART_init>
    ADC_init();
    2d9a:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <ADC_init>
    GLCD_init();
    2d9e:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <GLCD_init>
    mainMenuDisplay();
    2da2:	0e 94 45 18 	call	0x308a	; 0x308a <mainMenuDisplay>

    // Set UART callback function for command handling
    UART_setCallBack(handleUART);
    2da6:	80 ee       	ldi	r24, 0xE0	; 224
    2da8:	9a e1       	ldi	r25, 0x1A	; 26
    2daa:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <UART_setCallBack>

    // Enable global interrupts
    GIE();
    2dae:	0e 94 cd 12 	call	0x259a	; 0x259a <GIE>

    for (;;)
    {
        // Update sensor data
        LDR_init();
    2db2:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <LDR_init>
        LDR_calculate(2, mode);
    2db6:	90 91 db 05 	lds	r25, 0x05DB
    2dba:	82 e0       	ldi	r24, 0x02	; 2
    2dbc:	69 2f       	mov	r22, r25
    2dbe:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LDR_calculate>
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	a0 e2       	ldi	r26, 0x20	; 32
    2dc8:	b1 e4       	ldi	r27, 0x41	; 65
    2dca:	8f a3       	std	Y+39, r24	; 0x27
    2dcc:	98 a7       	std	Y+40, r25	; 0x28
    2dce:	a9 a7       	std	Y+41, r26	; 0x29
    2dd0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd2:	6f a1       	ldd	r22, Y+39	; 0x27
    2dd4:	78 a5       	ldd	r23, Y+40	; 0x28
    2dd6:	89 a5       	ldd	r24, Y+41	; 0x29
    2dd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	4a e7       	ldi	r20, 0x7A	; 122
    2de0:	55 e4       	ldi	r21, 0x45	; 69
    2de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	8b a3       	std	Y+35, r24	; 0x23
    2dec:	9c a3       	std	Y+36, r25	; 0x24
    2dee:	ad a3       	std	Y+37, r26	; 0x25
    2df0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2df2:	6b a1       	ldd	r22, Y+35	; 0x23
    2df4:	7c a1       	ldd	r23, Y+36	; 0x24
    2df6:	8d a1       	ldd	r24, Y+37	; 0x25
    2df8:	9e a1       	ldd	r25, Y+38	; 0x26
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e8       	ldi	r20, 0x80	; 128
    2e00:	5f e3       	ldi	r21, 0x3F	; 63
    2e02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e06:	88 23       	and	r24, r24
    2e08:	2c f4       	brge	.+10     	; 0x2e14 <main+0x9a>
		__ticks = 1;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	9a a3       	std	Y+34, r25	; 0x22
    2e10:	89 a3       	std	Y+33, r24	; 0x21
    2e12:	3f c0       	rjmp	.+126    	; 0x2e92 <main+0x118>
	else if (__tmp > 65535)
    2e14:	6b a1       	ldd	r22, Y+35	; 0x23
    2e16:	7c a1       	ldd	r23, Y+36	; 0x24
    2e18:	8d a1       	ldd	r24, Y+37	; 0x25
    2e1a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	3f ef       	ldi	r19, 0xFF	; 255
    2e20:	4f e7       	ldi	r20, 0x7F	; 127
    2e22:	57 e4       	ldi	r21, 0x47	; 71
    2e24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e28:	18 16       	cp	r1, r24
    2e2a:	4c f5       	brge	.+82     	; 0x2e7e <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e2e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e30:	89 a5       	ldd	r24, Y+41	; 0x29
    2e32:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	40 e2       	ldi	r20, 0x20	; 32
    2e3a:	51 e4       	ldi	r21, 0x41	; 65
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	bc 01       	movw	r22, r24
    2e46:	cd 01       	movw	r24, r26
    2e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	9a a3       	std	Y+34, r25	; 0x22
    2e52:	89 a3       	std	Y+33, r24	; 0x21
    2e54:	0f c0       	rjmp	.+30     	; 0x2e74 <main+0xfa>
    2e56:	80 e9       	ldi	r24, 0x90	; 144
    2e58:	91 e0       	ldi	r25, 0x01	; 1
    2e5a:	98 a3       	std	Y+32, r25	; 0x20
    2e5c:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e60:	98 a1       	ldd	r25, Y+32	; 0x20
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <main+0xe8>
    2e66:	98 a3       	std	Y+32, r25	; 0x20
    2e68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	9a a3       	std	Y+34, r25	; 0x22
    2e72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e74:	89 a1       	ldd	r24, Y+33	; 0x21
    2e76:	9a a1       	ldd	r25, Y+34	; 0x22
    2e78:	00 97       	sbiw	r24, 0x00	; 0
    2e7a:	69 f7       	brne	.-38     	; 0x2e56 <main+0xdc>
    2e7c:	14 c0       	rjmp	.+40     	; 0x2ea6 <main+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e80:	7c a1       	ldd	r23, Y+36	; 0x24
    2e82:	8d a1       	ldd	r24, Y+37	; 0x25
    2e84:	9e a1       	ldd	r25, Y+38	; 0x26
    2e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	9a a3       	std	Y+34, r25	; 0x22
    2e90:	89 a3       	std	Y+33, r24	; 0x21
    2e92:	89 a1       	ldd	r24, Y+33	; 0x21
    2e94:	9a a1       	ldd	r25, Y+34	; 0x22
    2e96:	9e 8f       	std	Y+30, r25	; 0x1e
    2e98:	8d 8f       	std	Y+29, r24	; 0x1d
    2e9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <main+0x124>
    2ea2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ea4:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(10);
        LM35_init();
    2ea6:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <LM35_init>
        LM35_calculate(0, mode);
    2eaa:	90 91 db 05 	lds	r25, 0x05DB
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	69 2f       	mov	r22, r25
    2eb2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LM35_calculate>
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	a0 e2       	ldi	r26, 0x20	; 32
    2ebc:	b1 e4       	ldi	r27, 0x41	; 65
    2ebe:	89 8f       	std	Y+25, r24	; 0x19
    2ec0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ec2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ec4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ecc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	4a e7       	ldi	r20, 0x7A	; 122
    2ed4:	55 e4       	ldi	r21, 0x45	; 69
    2ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	8d 8b       	std	Y+21, r24	; 0x15
    2ee0:	9e 8b       	std	Y+22, r25	; 0x16
    2ee2:	af 8b       	std	Y+23, r26	; 0x17
    2ee4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ee6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ee8:	7e 89       	ldd	r23, Y+22	; 0x16
    2eea:	8f 89       	ldd	r24, Y+23	; 0x17
    2eec:	98 8d       	ldd	r25, Y+24	; 0x18
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e8       	ldi	r20, 0x80	; 128
    2ef4:	5f e3       	ldi	r21, 0x3F	; 63
    2ef6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2efa:	88 23       	and	r24, r24
    2efc:	2c f4       	brge	.+10     	; 0x2f08 <main+0x18e>
		__ticks = 1;
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	9c 8b       	std	Y+20, r25	; 0x14
    2f04:	8b 8b       	std	Y+19, r24	; 0x13
    2f06:	3f c0       	rjmp	.+126    	; 0x2f86 <main+0x20c>
	else if (__tmp > 65535)
    2f08:	6d 89       	ldd	r22, Y+21	; 0x15
    2f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	3f ef       	ldi	r19, 0xFF	; 255
    2f14:	4f e7       	ldi	r20, 0x7F	; 127
    2f16:	57 e4       	ldi	r21, 0x47	; 71
    2f18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f1c:	18 16       	cp	r1, r24
    2f1e:	4c f5       	brge	.+82     	; 0x2f72 <main+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f20:	69 8d       	ldd	r22, Y+25	; 0x19
    2f22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e2       	ldi	r20, 0x20	; 32
    2f2e:	51 e4       	ldi	r21, 0x41	; 65
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	bc 01       	movw	r22, r24
    2f3a:	cd 01       	movw	r24, r26
    2f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	9c 8b       	std	Y+20, r25	; 0x14
    2f46:	8b 8b       	std	Y+19, r24	; 0x13
    2f48:	0f c0       	rjmp	.+30     	; 0x2f68 <main+0x1ee>
    2f4a:	80 e9       	ldi	r24, 0x90	; 144
    2f4c:	91 e0       	ldi	r25, 0x01	; 1
    2f4e:	9a 8b       	std	Y+18, r25	; 0x12
    2f50:	89 8b       	std	Y+17, r24	; 0x11
    2f52:	89 89       	ldd	r24, Y+17	; 0x11
    2f54:	9a 89       	ldd	r25, Y+18	; 0x12
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <main+0x1dc>
    2f5a:	9a 8b       	std	Y+18, r25	; 0x12
    2f5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f60:	9c 89       	ldd	r25, Y+20	; 0x14
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	9c 8b       	std	Y+20, r25	; 0x14
    2f66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f68:	8b 89       	ldd	r24, Y+19	; 0x13
    2f6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	69 f7       	brne	.-38     	; 0x2f4a <main+0x1d0>
    2f70:	14 c0       	rjmp	.+40     	; 0x2f9a <main+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f72:	6d 89       	ldd	r22, Y+21	; 0x15
    2f74:	7e 89       	ldd	r23, Y+22	; 0x16
    2f76:	8f 89       	ldd	r24, Y+23	; 0x17
    2f78:	98 8d       	ldd	r25, Y+24	; 0x18
    2f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	9c 8b       	std	Y+20, r25	; 0x14
    2f84:	8b 8b       	std	Y+19, r24	; 0x13
    2f86:	8b 89       	ldd	r24, Y+19	; 0x13
    2f88:	9c 89       	ldd	r25, Y+20	; 0x14
    2f8a:	98 8b       	std	Y+16, r25	; 0x10
    2f8c:	8f 87       	std	Y+15, r24	; 0x0f
    2f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f90:	98 89       	ldd	r25, Y+16	; 0x10
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <main+0x218>
    2f96:	98 8b       	std	Y+16, r25	; 0x10
    2f98:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(10);
        FLAME_init();
    2f9a:	0e 94 2e 13 	call	0x265c	; 0x265c <FLAME_init>
        FLAME_calculate(1);
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	0e 94 39 13 	call	0x2672	; 0x2672 <FLAME_calculate>
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	a0 e2       	ldi	r26, 0x20	; 32
    2faa:	b1 e4       	ldi	r27, 0x41	; 65
    2fac:	8b 87       	std	Y+11, r24	; 0x0b
    2fae:	9c 87       	std	Y+12, r25	; 0x0c
    2fb0:	ad 87       	std	Y+13, r26	; 0x0d
    2fb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	4a e7       	ldi	r20, 0x7A	; 122
    2fc2:	55 e4       	ldi	r21, 0x45	; 69
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	8f 83       	std	Y+7, r24	; 0x07
    2fce:	98 87       	std	Y+8, r25	; 0x08
    2fd0:	a9 87       	std	Y+9, r26	; 0x09
    2fd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd6:	78 85       	ldd	r23, Y+8	; 0x08
    2fd8:	89 85       	ldd	r24, Y+9	; 0x09
    2fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	40 e8       	ldi	r20, 0x80	; 128
    2fe2:	5f e3       	ldi	r21, 0x3F	; 63
    2fe4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fe8:	88 23       	and	r24, r24
    2fea:	2c f4       	brge	.+10     	; 0x2ff6 <main+0x27c>
		__ticks = 1;
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	9e 83       	std	Y+6, r25	; 0x06
    2ff2:	8d 83       	std	Y+5, r24	; 0x05
    2ff4:	3f c0       	rjmp	.+126    	; 0x3074 <main+0x2fa>
	else if (__tmp > 65535)
    2ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff8:	78 85       	ldd	r23, Y+8	; 0x08
    2ffa:	89 85       	ldd	r24, Y+9	; 0x09
    2ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	3f ef       	ldi	r19, 0xFF	; 255
    3002:	4f e7       	ldi	r20, 0x7F	; 127
    3004:	57 e4       	ldi	r21, 0x47	; 71
    3006:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    300a:	18 16       	cp	r1, r24
    300c:	4c f5       	brge	.+82     	; 0x3060 <main+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    300e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3010:	7c 85       	ldd	r23, Y+12	; 0x0c
    3012:	8d 85       	ldd	r24, Y+13	; 0x0d
    3014:	9e 85       	ldd	r25, Y+14	; 0x0e
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	40 e2       	ldi	r20, 0x20	; 32
    301c:	51 e4       	ldi	r21, 0x41	; 65
    301e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	bc 01       	movw	r22, r24
    3028:	cd 01       	movw	r24, r26
    302a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	9e 83       	std	Y+6, r25	; 0x06
    3034:	8d 83       	std	Y+5, r24	; 0x05
    3036:	0f c0       	rjmp	.+30     	; 0x3056 <main+0x2dc>
    3038:	80 e9       	ldi	r24, 0x90	; 144
    303a:	91 e0       	ldi	r25, 0x01	; 1
    303c:	9c 83       	std	Y+4, r25	; 0x04
    303e:	8b 83       	std	Y+3, r24	; 0x03
    3040:	8b 81       	ldd	r24, Y+3	; 0x03
    3042:	9c 81       	ldd	r25, Y+4	; 0x04
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	f1 f7       	brne	.-4      	; 0x3044 <main+0x2ca>
    3048:	9c 83       	std	Y+4, r25	; 0x04
    304a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304c:	8d 81       	ldd	r24, Y+5	; 0x05
    304e:	9e 81       	ldd	r25, Y+6	; 0x06
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	9e 83       	std	Y+6, r25	; 0x06
    3054:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3056:	8d 81       	ldd	r24, Y+5	; 0x05
    3058:	9e 81       	ldd	r25, Y+6	; 0x06
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	69 f7       	brne	.-38     	; 0x3038 <main+0x2be>
    305e:	a9 ce       	rjmp	.-686    	; 0x2db2 <main+0x38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3060:	6f 81       	ldd	r22, Y+7	; 0x07
    3062:	78 85       	ldd	r23, Y+8	; 0x08
    3064:	89 85       	ldd	r24, Y+9	; 0x09
    3066:	9a 85       	ldd	r25, Y+10	; 0x0a
    3068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	9e 83       	std	Y+6, r25	; 0x06
    3072:	8d 83       	std	Y+5, r24	; 0x05
    3074:	8d 81       	ldd	r24, Y+5	; 0x05
    3076:	9e 81       	ldd	r25, Y+6	; 0x06
    3078:	9a 83       	std	Y+2, r25	; 0x02
    307a:	89 83       	std	Y+1, r24	; 0x01
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	9a 81       	ldd	r25, Y+2	; 0x02
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	f1 f7       	brne	.-4      	; 0x3080 <main+0x306>
    3084:	9a 83       	std	Y+2, r25	; 0x02
    3086:	89 83       	std	Y+1, r24	; 0x01
    3088:	94 ce       	rjmp	.-728    	; 0x2db2 <main+0x38>

0000308a <mainMenuDisplay>:
    return 0;
}

// Function to display the main menu
void mainMenuDisplay()
{
    308a:	df 93       	push	r29
    308c:	cf 93       	push	r28
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
    current = 0;
    3092:	10 92 da 05 	sts	0x05DA, r1
    GLCD_clearLCD();
    3096:	0e 94 94 12 	call	0x2528	; 0x2528 <GLCD_clearLCD>
    GLCD_moveCursor(0, 35);
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	63 e2       	ldi	r22, 0x23	; 35
    309e:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("Main Menu");
    30a2:	80 e6       	ldi	r24, 0x60	; 96
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    GLCD_moveCursor(3, 0);
    30aa:	83 e0       	ldi	r24, 0x03	; 3
    30ac:	60 e0       	ldi	r22, 0x00	; 0
    30ae:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("1- Show System Status");
    30b2:	8a e6       	ldi	r24, 0x6A	; 106
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    GLCD_moveCursor(5, 0);
    30ba:	85 e0       	ldi	r24, 0x05	; 5
    30bc:	60 e0       	ldi	r22, 0x00	; 0
    30be:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("2- Modify System");
    30c2:	80 e8       	ldi	r24, 0x80	; 128
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
}
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	08 95       	ret

000030d0 <statsMenuDisplay>:

// Function to display the system status menu
void statsMenuDisplay()
{
    30d0:	df 93       	push	r29
    30d2:	cf 93       	push	r28
    30d4:	cd b7       	in	r28, 0x3d	; 61
    30d6:	de b7       	in	r29, 0x3e	; 62
    30d8:	e8 97       	sbiw	r28, 0x38	; 56
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	f8 94       	cli
    30de:	de bf       	out	0x3e, r29	; 62
    30e0:	0f be       	out	0x3f, r0	; 63
    30e2:	cd bf       	out	0x3d, r28	; 61
    char LM35Str[25];
    char LDRStr[30];
    uint8 temperature = LM35_getTemperature();
    30e4:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <LM35_getTemperature>
    30e8:	89 83       	std	Y+1, r24	; 0x01
    current = 1;
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	80 93 da 05 	sts	0x05DA, r24
    GLCD_clearLCD();
    30f0:	0e 94 94 12 	call	0x2528	; 0x2528 <GLCD_clearLCD>
    GLCD_moveCursor(0, 10);
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	6a e0       	ldi	r22, 0x0A	; 10
    30f8:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("System Status Menu");
    30fc:	81 e9       	ldi	r24, 0x91	; 145
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    GLCD_moveCursor(2, 0);
    3104:	82 e0       	ldi	r24, 0x02	; 2
    3106:	60 e0       	ldi	r22, 0x00	; 0
    3108:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    sprintf(LM35Str, "Temperature : %d C", LM35_getTemperature());
    310c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <LM35_getTemperature>
    3110:	9c 01       	movw	r18, r24
    3112:	00 d0       	rcall	.+0      	; 0x3114 <statsMenuDisplay+0x44>
    3114:	00 d0       	rcall	.+0      	; 0x3116 <statsMenuDisplay+0x46>
    3116:	00 d0       	rcall	.+0      	; 0x3118 <statsMenuDisplay+0x48>
    3118:	ed b7       	in	r30, 0x3d	; 61
    311a:	fe b7       	in	r31, 0x3e	; 62
    311c:	31 96       	adiw	r30, 0x01	; 1
    311e:	ce 01       	movw	r24, r28
    3120:	02 96       	adiw	r24, 0x02	; 2
    3122:	91 83       	std	Z+1, r25	; 0x01
    3124:	80 83       	st	Z, r24
    3126:	84 ea       	ldi	r24, 0xA4	; 164
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	93 83       	std	Z+3, r25	; 0x03
    312c:	82 83       	std	Z+2, r24	; 0x02
    312e:	35 83       	std	Z+5, r19	; 0x05
    3130:	24 83       	std	Z+4, r18	; 0x04
    3132:	0e 94 3e 1c 	call	0x387c	; 0x387c <sprintf>
    3136:	8d b7       	in	r24, 0x3d	; 61
    3138:	9e b7       	in	r25, 0x3e	; 62
    313a:	06 96       	adiw	r24, 0x06	; 6
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	9e bf       	out	0x3e, r25	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	8d bf       	out	0x3d, r24	; 61
    GLCD_sendString(LM35Str);
    3146:	ce 01       	movw	r24, r28
    3148:	02 96       	adiw	r24, 0x02	; 2
    314a:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    GLCD_moveCursor(3, 0);
    314e:	83 e0       	ldi	r24, 0x03	; 3
    3150:	60 e0       	ldi	r22, 0x00	; 0
    3152:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    sprintf(LDRStr, "Light intensity : %d", LDR_getPercentage());
    3156:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LDR_getPercentage>
    315a:	28 2f       	mov	r18, r24
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	00 d0       	rcall	.+0      	; 0x3160 <statsMenuDisplay+0x90>
    3160:	00 d0       	rcall	.+0      	; 0x3162 <statsMenuDisplay+0x92>
    3162:	00 d0       	rcall	.+0      	; 0x3164 <statsMenuDisplay+0x94>
    3164:	ed b7       	in	r30, 0x3d	; 61
    3166:	fe b7       	in	r31, 0x3e	; 62
    3168:	31 96       	adiw	r30, 0x01	; 1
    316a:	ce 01       	movw	r24, r28
    316c:	4b 96       	adiw	r24, 0x1b	; 27
    316e:	91 83       	std	Z+1, r25	; 0x01
    3170:	80 83       	st	Z, r24
    3172:	87 eb       	ldi	r24, 0xB7	; 183
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	93 83       	std	Z+3, r25	; 0x03
    3178:	82 83       	std	Z+2, r24	; 0x02
    317a:	35 83       	std	Z+5, r19	; 0x05
    317c:	24 83       	std	Z+4, r18	; 0x04
    317e:	0e 94 3e 1c 	call	0x387c	; 0x387c <sprintf>
    3182:	8d b7       	in	r24, 0x3d	; 61
    3184:	9e b7       	in	r25, 0x3e	; 62
    3186:	06 96       	adiw	r24, 0x06	; 6
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	9e bf       	out	0x3e, r25	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	8d bf       	out	0x3d, r24	; 61
    GLCD_sendString(LDRStr);
    3192:	ce 01       	movw	r24, r28
    3194:	4b 96       	adiw	r24, 0x1b	; 27
    3196:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    GLCD_moveCursor(4, 0);
    319a:	84 e0       	ldi	r24, 0x04	; 4
    319c:	60 e0       	ldi	r22, 0x00	; 0
    319e:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    if (temperature <= 25)
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	8a 31       	cpi	r24, 0x1A	; 26
    31a6:	28 f4       	brcc	.+10     	; 0x31b2 <statsMenuDisplay+0xe2>
    {
        GLCD_sendString("Fans are OFF");
    31a8:	8c ec       	ldi	r24, 0xCC	; 204
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    31b0:	1d c0       	rjmp	.+58     	; 0x31ec <statsMenuDisplay+0x11c>
    }
    else if (temperature > 25 && temperature <= 30)
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	8a 31       	cpi	r24, 0x1A	; 26
    31b6:	40 f0       	brcs	.+16     	; 0x31c8 <statsMenuDisplay+0xf8>
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	8f 31       	cpi	r24, 0x1F	; 31
    31bc:	28 f4       	brcc	.+10     	; 0x31c8 <statsMenuDisplay+0xf8>
    {
        GLCD_sendString("Fans are ON, Speed = 1");
    31be:	89 ed       	ldi	r24, 0xD9	; 217
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    31c6:	12 c0       	rjmp	.+36     	; 0x31ec <statsMenuDisplay+0x11c>
    }
    else if (temperature > 30 && temperature <= 35)
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	8f 31       	cpi	r24, 0x1F	; 31
    31cc:	40 f0       	brcs	.+16     	; 0x31de <statsMenuDisplay+0x10e>
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	84 32       	cpi	r24, 0x24	; 36
    31d2:	28 f4       	brcc	.+10     	; 0x31de <statsMenuDisplay+0x10e>
    {
        GLCD_sendString("Fans are ON, Speed = 2");
    31d4:	80 ef       	ldi	r24, 0xF0	; 240
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    31dc:	07 c0       	rjmp	.+14     	; 0x31ec <statsMenuDisplay+0x11c>
    }
    else if (temperature > 35)
    31de:	89 81       	ldd	r24, Y+1	; 0x01
    31e0:	84 32       	cpi	r24, 0x24	; 36
    31e2:	20 f0       	brcs	.+8      	; 0x31ec <statsMenuDisplay+0x11c>
    {
        GLCD_sendString("Fans are ON, Speed = 3");
    31e4:	87 e0       	ldi	r24, 0x07	; 7
    31e6:	91 e0       	ldi	r25, 0x01	; 1
    31e8:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    }
    GLCD_moveCursor(6, 0);
    31ec:	86 e0       	ldi	r24, 0x06	; 6
    31ee:	60 e0       	ldi	r22, 0x00	; 0
    31f0:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("Press r to Refresh");
    31f4:	8e e1       	ldi	r24, 0x1E	; 30
    31f6:	91 e0       	ldi	r25, 0x01	; 1
    31f8:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    GLCD_moveCursor(7, 0);
    31fc:	87 e0       	ldi	r24, 0x07	; 7
    31fe:	60 e0       	ldi	r22, 0x00	; 0
    3200:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("Press m to go back");
    3204:	81 e3       	ldi	r24, 0x31	; 49
    3206:	91 e0       	ldi	r25, 0x01	; 1
    3208:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
}
    320c:	e8 96       	adiw	r28, 0x38	; 56
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	cf 91       	pop	r28
    321a:	df 91       	pop	r29
    321c:	08 95       	ret

0000321e <modifyMenuDisplay>:

// Function to display the modify system menu
void modifyMenuDisplay()
{
    321e:	df 93       	push	r29
    3220:	cf 93       	push	r28
    3222:	0f 92       	push	r0
    3224:	cd b7       	in	r28, 0x3d	; 61
    3226:	de b7       	in	r29, 0x3e	; 62
    // Logic to set initial fanMode, lightState, and fanSpeed
    if (mode == 0 && LM35_getTemperature() > 25)
    3228:	80 91 db 05 	lds	r24, 0x05DB
    322c:	88 23       	and	r24, r24
    322e:	41 f4       	brne	.+16     	; 0x3240 <modifyMenuDisplay+0x22>
    3230:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <LM35_getTemperature>
    3234:	8a 31       	cpi	r24, 0x1A	; 26
    3236:	91 05       	cpc	r25, r1
    3238:	18 f0       	brcs	.+6      	; 0x3240 <modifyMenuDisplay+0x22>
    {
        fanMode = 1;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	80 93 dc 05 	sts	0x05DC, r24
    }
    if (mode == 0 && LDR_getPercentage() <= 50)
    3240:	80 91 db 05 	lds	r24, 0x05DB
    3244:	88 23       	and	r24, r24
    3246:	39 f4       	brne	.+14     	; 0x3256 <modifyMenuDisplay+0x38>
    3248:	0e 94 77 0e 	call	0x1cee	; 0x1cee <LDR_getPercentage>
    324c:	83 33       	cpi	r24, 0x33	; 51
    324e:	18 f4       	brcc	.+6      	; 0x3256 <modifyMenuDisplay+0x38>
    {
        lightState = 1;
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	80 93 dd 05 	sts	0x05DD, r24
    }
    uint8 temperature = LM35_getTemperature();
    3256:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <LM35_getTemperature>
    325a:	89 83       	std	Y+1, r24	; 0x01
    if (temperature > 25 && temperature <= 30 && mode == 0)
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	8a 31       	cpi	r24, 0x1A	; 26
    3260:	58 f0       	brcs	.+22     	; 0x3278 <modifyMenuDisplay+0x5a>
    3262:	89 81       	ldd	r24, Y+1	; 0x01
    3264:	8f 31       	cpi	r24, 0x1F	; 31
    3266:	40 f4       	brcc	.+16     	; 0x3278 <modifyMenuDisplay+0x5a>
    3268:	80 91 db 05 	lds	r24, 0x05DB
    326c:	88 23       	and	r24, r24
    326e:	21 f4       	brne	.+8      	; 0x3278 <modifyMenuDisplay+0x5a>
    {
        fanSpeed = 1;
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	80 93 e8 03 	sts	0x03E8, r24
    3276:	18 c0       	rjmp	.+48     	; 0x32a8 <modifyMenuDisplay+0x8a>
    }
    else if (temperature > 30 && temperature <= 35 && mode == 0)
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	8f 31       	cpi	r24, 0x1F	; 31
    327c:	58 f0       	brcs	.+22     	; 0x3294 <modifyMenuDisplay+0x76>
    327e:	89 81       	ldd	r24, Y+1	; 0x01
    3280:	84 32       	cpi	r24, 0x24	; 36
    3282:	40 f4       	brcc	.+16     	; 0x3294 <modifyMenuDisplay+0x76>
    3284:	80 91 db 05 	lds	r24, 0x05DB
    3288:	88 23       	and	r24, r24
    328a:	21 f4       	brne	.+8      	; 0x3294 <modifyMenuDisplay+0x76>
    {
        fanSpeed = 2;
    328c:	82 e0       	ldi	r24, 0x02	; 2
    328e:	80 93 e8 03 	sts	0x03E8, r24
    3292:	0a c0       	rjmp	.+20     	; 0x32a8 <modifyMenuDisplay+0x8a>
    }
    else if (temperature > 35 && mode == 0)
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	84 32       	cpi	r24, 0x24	; 36
    3298:	38 f0       	brcs	.+14     	; 0x32a8 <modifyMenuDisplay+0x8a>
    329a:	80 91 db 05 	lds	r24, 0x05DB
    329e:	88 23       	and	r24, r24
    32a0:	19 f4       	brne	.+6      	; 0x32a8 <modifyMenuDisplay+0x8a>
    {
        fanSpeed = 3;
    32a2:	83 e0       	ldi	r24, 0x03	; 3
    32a4:	80 93 e8 03 	sts	0x03E8, r24
    }

    current = 2;
    32a8:	82 e0       	ldi	r24, 0x02	; 2
    32aa:	80 93 da 05 	sts	0x05DA, r24
    GLCD_clearLCD();
    32ae:	0e 94 94 12 	call	0x2528	; 0x2528 <GLCD_clearLCD>
    GLCD_moveCursor(0, 9);
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	69 e0       	ldi	r22, 0x09	; 9
    32b6:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("Modify System Menu");
    32ba:	84 e4       	ldi	r24, 0x44	; 68
    32bc:	91 e0       	ldi	r25, 0x01	; 1
    32be:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    GLCD_moveCursor(3, 0);
    32c2:	83 e0       	ldi	r24, 0x03	; 3
    32c4:	60 e0       	ldi	r22, 0x00	; 0
    32c6:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("1- Change System Mode");
    32ca:	87 e5       	ldi	r24, 0x57	; 87
    32cc:	91 e0       	ldi	r25, 0x01	; 1
    32ce:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    GLCD_moveCursor(5, 0);
    32d2:	85 e0       	ldi	r24, 0x05	; 5
    32d4:	60 e0       	ldi	r22, 0x00	; 0
    32d6:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("2- Change Settings");
    32da:	8d e6       	ldi	r24, 0x6D	; 109
    32dc:	91 e0       	ldi	r25, 0x01	; 1
    32de:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    GLCD_moveCursor(7, 0);
    32e2:	87 e0       	ldi	r24, 0x07	; 7
    32e4:	60 e0       	ldi	r22, 0x00	; 0
    32e6:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("Press m to go back");
    32ea:	81 e3       	ldi	r24, 0x31	; 49
    32ec:	91 e0       	ldi	r25, 0x01	; 1
    32ee:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
}
    32f2:	0f 90       	pop	r0
    32f4:	cf 91       	pop	r28
    32f6:	df 91       	pop	r29
    32f8:	08 95       	ret

000032fa <modeMenuDisplay>:

// Function to display the system mode menu
void modeMenuDisplay()
{
    32fa:	df 93       	push	r29
    32fc:	cf 93       	push	r28
    32fe:	cd b7       	in	r28, 0x3d	; 61
    3300:	de b7       	in	r29, 0x3e	; 62
    current = 3;
    3302:	83 e0       	ldi	r24, 0x03	; 3
    3304:	80 93 da 05 	sts	0x05DA, r24
    GLCD_clearLCD();
    3308:	0e 94 94 12 	call	0x2528	; 0x2528 <GLCD_clearLCD>
    GLCD_moveCursor(0, 13);
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	6d e0       	ldi	r22, 0x0D	; 13
    3310:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("System Mode Menu");
    3314:	80 e8       	ldi	r24, 0x80	; 128
    3316:	91 e0       	ldi	r25, 0x01	; 1
    3318:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    GLCD_moveCursor(3, 2);
    331c:	83 e0       	ldi	r24, 0x03	; 3
    331e:	62 e0       	ldi	r22, 0x02	; 2
    3320:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    if (mode == 0)
    3324:	80 91 db 05 	lds	r24, 0x05DB
    3328:	88 23       	and	r24, r24
    332a:	69 f4       	brne	.+26     	; 0x3346 <modeMenuDisplay+0x4c>
    {
        GLCD_sendString("Automatic Mode is ON");
    332c:	81 e9       	ldi	r24, 0x91	; 145
    332e:	91 e0       	ldi	r25, 0x01	; 1
    3330:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
        GLCD_moveCursor(6, 0);
    3334:	86 e0       	ldi	r24, 0x06	; 6
    3336:	60 e0       	ldi	r22, 0x00	; 0
    3338:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        GLCD_sendString("Press o to turn OFF");
    333c:	86 ea       	ldi	r24, 0xA6	; 166
    333e:	91 e0       	ldi	r25, 0x01	; 1
    3340:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    3344:	0c c0       	rjmp	.+24     	; 0x335e <modeMenuDisplay+0x64>
    }
    else
    {
        GLCD_sendString("Automatic Mode is OFF");
    3346:	8a eb       	ldi	r24, 0xBA	; 186
    3348:	91 e0       	ldi	r25, 0x01	; 1
    334a:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
        GLCD_moveCursor(6, 0);
    334e:	86 e0       	ldi	r24, 0x06	; 6
    3350:	60 e0       	ldi	r22, 0x00	; 0
    3352:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        GLCD_sendString("Press o to turn ON");
    3356:	80 ed       	ldi	r24, 0xD0	; 208
    3358:	91 e0       	ldi	r25, 0x01	; 1
    335a:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    }
    GLCD_moveCursor(7, 0);
    335e:	87 e0       	ldi	r24, 0x07	; 7
    3360:	60 e0       	ldi	r22, 0x00	; 0
    3362:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("Press m to go back");
    3366:	81 e3       	ldi	r24, 0x31	; 49
    3368:	91 e0       	ldi	r25, 0x01	; 1
    336a:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
}
    336e:	cf 91       	pop	r28
    3370:	df 91       	pop	r29
    3372:	08 95       	ret

00003374 <settingsMenuDisplay>:

// Function to display the settings menu
void settingsMenuDisplay()
{
    3374:	df 93       	push	r29
    3376:	cf 93       	push	r28
    3378:	cd b7       	in	r28, 0x3d	; 61
    337a:	de b7       	in	r29, 0x3e	; 62
    current = 4;
    337c:	84 e0       	ldi	r24, 0x04	; 4
    337e:	80 93 da 05 	sts	0x05DA, r24
    GLCD_clearLCD();
    3382:	0e 94 94 12 	call	0x2528	; 0x2528 <GLCD_clearLCD>
    if (mode == 1)
    3386:	80 91 db 05 	lds	r24, 0x05DB
    338a:	81 30       	cpi	r24, 0x01	; 1
    338c:	09 f5       	brne	.+66     	; 0x33d0 <settingsMenuDisplay+0x5c>
    {
        GLCD_moveCursor(0, 24);
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	68 e1       	ldi	r22, 0x18	; 24
    3392:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        GLCD_sendString("Settings Menu");
    3396:	83 ee       	ldi	r24, 0xE3	; 227
    3398:	91 e0       	ldi	r25, 0x01	; 1
    339a:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
        GLCD_moveCursor(2, 0);
    339e:	82 e0       	ldi	r24, 0x02	; 2
    33a0:	60 e0       	ldi	r22, 0x00	; 0
    33a2:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        GLCD_sendString("1- Change Fan State");
    33a6:	81 ef       	ldi	r24, 0xF1	; 241
    33a8:	91 e0       	ldi	r25, 0x01	; 1
    33aa:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
        GLCD_moveCursor(3, 0);
    33ae:	83 e0       	ldi	r24, 0x03	; 3
    33b0:	60 e0       	ldi	r22, 0x00	; 0
    33b2:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        GLCD_sendString("2- Change Fan Speed");
    33b6:	85 e0       	ldi	r24, 0x05	; 5
    33b8:	92 e0       	ldi	r25, 0x02	; 2
    33ba:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
        GLCD_moveCursor(4, 0);
    33be:	84 e0       	ldi	r24, 0x04	; 4
    33c0:	60 e0       	ldi	r22, 0x00	; 0
    33c2:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        GLCD_sendString("3- Change Light State");
    33c6:	89 e1       	ldi	r24, 0x19	; 25
    33c8:	92 e0       	ldi	r25, 0x02	; 2
    33ca:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    33ce:	08 c0       	rjmp	.+16     	; 0x33e0 <settingsMenuDisplay+0x6c>
    }
    else
    {
        GLCD_moveCursor(3, 3);
    33d0:	83 e0       	ldi	r24, 0x03	; 3
    33d2:	63 e0       	ldi	r22, 0x03	; 3
    33d4:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        GLCD_sendString("Automatic Mode is ON");
    33d8:	81 e9       	ldi	r24, 0x91	; 145
    33da:	91 e0       	ldi	r25, 0x01	; 1
    33dc:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    }
    GLCD_moveCursor(7, 0);
    33e0:	87 e0       	ldi	r24, 0x07	; 7
    33e2:	60 e0       	ldi	r22, 0x00	; 0
    33e4:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("Press m to go back");
    33e8:	81 e3       	ldi	r24, 0x31	; 49
    33ea:	91 e0       	ldi	r25, 0x01	; 1
    33ec:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
}
    33f0:	cf 91       	pop	r28
    33f2:	df 91       	pop	r29
    33f4:	08 95       	ret

000033f6 <fanStateMenuDisplay>:

// Function to display the fan state menu
void fanStateMenuDisplay()
{
    33f6:	df 93       	push	r29
    33f8:	cf 93       	push	r28
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    current = 5;
    33fe:	85 e0       	ldi	r24, 0x05	; 5
    3400:	80 93 da 05 	sts	0x05DA, r24
    GLCD_clearLCD();
    3404:	0e 94 94 12 	call	0x2528	; 0x2528 <GLCD_clearLCD>
    GLCD_moveCursor(0, 20);
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	64 e1       	ldi	r22, 0x14	; 20
    340c:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("Fan State Menu");
    3410:	8f e2       	ldi	r24, 0x2F	; 47
    3412:	92 e0       	ldi	r25, 0x02	; 2
    3414:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    GLCD_moveCursor(2, 0);
    3418:	82 e0       	ldi	r24, 0x02	; 2
    341a:	60 e0       	ldi	r22, 0x00	; 0
    341c:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    if (fanMode == 0)
    3420:	80 91 dc 05 	lds	r24, 0x05DC
    3424:	88 23       	and	r24, r24
    3426:	69 f4       	brne	.+26     	; 0x3442 <fanStateMenuDisplay+0x4c>
    {
        GLCD_sendString("Fans are OFF");
    3428:	8c ec       	ldi	r24, 0xCC	; 204
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
        GLCD_moveCursor(6, 0);
    3430:	86 e0       	ldi	r24, 0x06	; 6
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        GLCD_sendString("Press f to turn ON");
    3438:	8e e3       	ldi	r24, 0x3E	; 62
    343a:	92 e0       	ldi	r25, 0x02	; 2
    343c:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    3440:	0c c0       	rjmp	.+24     	; 0x345a <fanStateMenuDisplay+0x64>
    }
    else
    {
        GLCD_sendString("Fans are ON");
    3442:	81 e5       	ldi	r24, 0x51	; 81
    3444:	92 e0       	ldi	r25, 0x02	; 2
    3446:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
        GLCD_moveCursor(6, 0);
    344a:	86 e0       	ldi	r24, 0x06	; 6
    344c:	60 e0       	ldi	r22, 0x00	; 0
    344e:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        GLCD_sendString("Press f to turn OFF");
    3452:	8d e5       	ldi	r24, 0x5D	; 93
    3454:	92 e0       	ldi	r25, 0x02	; 2
    3456:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    }
    GLCD_moveCursor(7, 0);
    345a:	87 e0       	ldi	r24, 0x07	; 7
    345c:	60 e0       	ldi	r22, 0x00	; 0
    345e:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("Press m to go back");
    3462:	81 e3       	ldi	r24, 0x31	; 49
    3464:	91 e0       	ldi	r25, 0x01	; 1
    3466:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
}
    346a:	cf 91       	pop	r28
    346c:	df 91       	pop	r29
    346e:	08 95       	ret

00003470 <fanSpeedMenuDisplay>:

// Function to display the fan speed menu
void fanSpeedMenuDisplay()
{
    3470:	df 93       	push	r29
    3472:	cf 93       	push	r28
    3474:	cd b7       	in	r28, 0x3d	; 61
    3476:	de b7       	in	r29, 0x3e	; 62
    3478:	6e 97       	sbiw	r28, 0x1e	; 30
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	f8 94       	cli
    347e:	de bf       	out	0x3e, r29	; 62
    3480:	0f be       	out	0x3f, r0	; 63
    3482:	cd bf       	out	0x3d, r28	; 61
    current = 6;
    3484:	86 e0       	ldi	r24, 0x06	; 6
    3486:	80 93 da 05 	sts	0x05DA, r24
    char speed[30];
    GLCD_clearLCD();
    348a:	0e 94 94 12 	call	0x2528	; 0x2528 <GLCD_clearLCD>

    if (fanMode != 0)
    348e:	80 91 dc 05 	lds	r24, 0x05DC
    3492:	88 23       	and	r24, r24
    3494:	b9 f1       	breq	.+110    	; 0x3504 <fanSpeedMenuDisplay+0x94>
    {
        GLCD_moveCursor(0, 20);
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	64 e1       	ldi	r22, 0x14	; 20
    349a:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        GLCD_sendString("Fan Speed Menu");
    349e:	81 e7       	ldi	r24, 0x71	; 113
    34a0:	92 e0       	ldi	r25, 0x02	; 2
    34a2:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
        GLCD_moveCursor(2, 0);
    34a6:	82 e0       	ldi	r24, 0x02	; 2
    34a8:	60 e0       	ldi	r22, 0x00	; 0
    34aa:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        sprintf(speed, "Fan is at Speed : %d", fanSpeed);
    34ae:	80 91 e8 03 	lds	r24, 0x03E8
    34b2:	28 2f       	mov	r18, r24
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	00 d0       	rcall	.+0      	; 0x34b8 <fanSpeedMenuDisplay+0x48>
    34b8:	00 d0       	rcall	.+0      	; 0x34ba <fanSpeedMenuDisplay+0x4a>
    34ba:	00 d0       	rcall	.+0      	; 0x34bc <fanSpeedMenuDisplay+0x4c>
    34bc:	ed b7       	in	r30, 0x3d	; 61
    34be:	fe b7       	in	r31, 0x3e	; 62
    34c0:	31 96       	adiw	r30, 0x01	; 1
    34c2:	ce 01       	movw	r24, r28
    34c4:	01 96       	adiw	r24, 0x01	; 1
    34c6:	91 83       	std	Z+1, r25	; 0x01
    34c8:	80 83       	st	Z, r24
    34ca:	80 e8       	ldi	r24, 0x80	; 128
    34cc:	92 e0       	ldi	r25, 0x02	; 2
    34ce:	93 83       	std	Z+3, r25	; 0x03
    34d0:	82 83       	std	Z+2, r24	; 0x02
    34d2:	35 83       	std	Z+5, r19	; 0x05
    34d4:	24 83       	std	Z+4, r18	; 0x04
    34d6:	0e 94 3e 1c 	call	0x387c	; 0x387c <sprintf>
    34da:	8d b7       	in	r24, 0x3d	; 61
    34dc:	9e b7       	in	r25, 0x3e	; 62
    34de:	06 96       	adiw	r24, 0x06	; 6
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	f8 94       	cli
    34e4:	9e bf       	out	0x3e, r25	; 62
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	8d bf       	out	0x3d, r24	; 61
        GLCD_sendString(speed);
    34ea:	ce 01       	movw	r24, r28
    34ec:	01 96       	adiw	r24, 0x01	; 1
    34ee:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
        GLCD_moveCursor(6, 0);
    34f2:	86 e0       	ldi	r24, 0x06	; 6
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        GLCD_sendString("Enter speed to Change");
    34fa:	85 e9       	ldi	r24, 0x95	; 149
    34fc:	92 e0       	ldi	r25, 0x02	; 2
    34fe:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    3502:	10 c0       	rjmp	.+32     	; 0x3524 <fanSpeedMenuDisplay+0xb4>
    }
    else
    {
        GLCD_moveCursor(0, 20);
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	64 e1       	ldi	r22, 0x14	; 20
    3508:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        GLCD_sendString("Fan Speed Menu");
    350c:	81 e7       	ldi	r24, 0x71	; 113
    350e:	92 e0       	ldi	r25, 0x02	; 2
    3510:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
        GLCD_moveCursor(3, 0);
    3514:	83 e0       	ldi	r24, 0x03	; 3
    3516:	60 e0       	ldi	r22, 0x00	; 0
    3518:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        GLCD_sendString("Fan is OFF");
    351c:	8b ea       	ldi	r24, 0xAB	; 171
    351e:	92 e0       	ldi	r25, 0x02	; 2
    3520:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    }

    GLCD_moveCursor(7, 0);
    3524:	87 e0       	ldi	r24, 0x07	; 7
    3526:	60 e0       	ldi	r22, 0x00	; 0
    3528:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("Press m to go back");
    352c:	81 e3       	ldi	r24, 0x31	; 49
    352e:	91 e0       	ldi	r25, 0x01	; 1
    3530:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
}
    3534:	6e 96       	adiw	r28, 0x1e	; 30
    3536:	0f b6       	in	r0, 0x3f	; 63
    3538:	f8 94       	cli
    353a:	de bf       	out	0x3e, r29	; 62
    353c:	0f be       	out	0x3f, r0	; 63
    353e:	cd bf       	out	0x3d, r28	; 61
    3540:	cf 91       	pop	r28
    3542:	df 91       	pop	r29
    3544:	08 95       	ret

00003546 <lightStateMenuDisplay>:

// Function to display the light state menu
void lightStateMenuDisplay()
{
    3546:	df 93       	push	r29
    3548:	cf 93       	push	r28
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
    current = 7;
    354e:	87 e0       	ldi	r24, 0x07	; 7
    3550:	80 93 da 05 	sts	0x05DA, r24
    GLCD_clearLCD();
    3554:	0e 94 94 12 	call	0x2528	; 0x2528 <GLCD_clearLCD>
    GLCD_moveCursor(0, 18);
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	62 e1       	ldi	r22, 0x12	; 18
    355c:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("Light State Menu");
    3560:	86 eb       	ldi	r24, 0xB6	; 182
    3562:	92 e0       	ldi	r25, 0x02	; 2
    3564:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    GLCD_moveCursor(3, 2);
    3568:	83 e0       	ldi	r24, 0x03	; 3
    356a:	62 e0       	ldi	r22, 0x02	; 2
    356c:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    if (lightState == 0)
    3570:	80 91 dd 05 	lds	r24, 0x05DD
    3574:	88 23       	and	r24, r24
    3576:	69 f4       	brne	.+26     	; 0x3592 <lightStateMenuDisplay+0x4c>
    {
        GLCD_sendString("Light is OFF");
    3578:	87 ec       	ldi	r24, 0xC7	; 199
    357a:	92 e0       	ldi	r25, 0x02	; 2
    357c:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
        GLCD_moveCursor(6, 0);
    3580:	86 e0       	ldi	r24, 0x06	; 6
    3582:	60 e0       	ldi	r22, 0x00	; 0
    3584:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        GLCD_sendString("Press o to turn ON");
    3588:	80 ed       	ldi	r24, 0xD0	; 208
    358a:	91 e0       	ldi	r25, 0x01	; 1
    358c:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    3590:	0c c0       	rjmp	.+24     	; 0x35aa <lightStateMenuDisplay+0x64>
    }
    else
    {
        GLCD_sendString("Light is ON");
    3592:	84 ed       	ldi	r24, 0xD4	; 212
    3594:	92 e0       	ldi	r25, 0x02	; 2
    3596:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
        GLCD_moveCursor(6, 0);
    359a:	86 e0       	ldi	r24, 0x06	; 6
    359c:	60 e0       	ldi	r22, 0x00	; 0
    359e:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
        GLCD_sendString("Press o to turn OFF");
    35a2:	86 ea       	ldi	r24, 0xA6	; 166
    35a4:	91 e0       	ldi	r25, 0x01	; 1
    35a6:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
    }
    GLCD_moveCursor(7, 0);
    35aa:	87 e0       	ldi	r24, 0x07	; 7
    35ac:	60 e0       	ldi	r22, 0x00	; 0
    35ae:	0e 94 26 11 	call	0x224c	; 0x224c <GLCD_moveCursor>
    GLCD_sendString("Press m to go back");
    35b2:	81 e3       	ldi	r24, 0x31	; 49
    35b4:	91 e0       	ldi	r25, 0x01	; 1
    35b6:	0e 94 c3 11 	call	0x2386	; 0x2386 <GLCD_sendString>
}
    35ba:	cf 91       	pop	r28
    35bc:	df 91       	pop	r29
    35be:	08 95       	ret

000035c0 <handleUART>:

// Function to handle UART commands
void handleUART(uint8 command)
{
    35c0:	df 93       	push	r29
    35c2:	cf 93       	push	r28
    35c4:	00 d0       	rcall	.+0      	; 0x35c6 <handleUART+0x6>
    35c6:	00 d0       	rcall	.+0      	; 0x35c8 <handleUART+0x8>
    35c8:	00 d0       	rcall	.+0      	; 0x35ca <handleUART+0xa>
    35ca:	cd b7       	in	r28, 0x3d	; 61
    35cc:	de b7       	in	r29, 0x3e	; 62
    35ce:	89 83       	std	Y+1, r24	; 0x01
    switch (command)
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	28 2f       	mov	r18, r24
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	3e 83       	std	Y+6, r19	; 0x06
    35d8:	2d 83       	std	Y+5, r18	; 0x05
    35da:	8d 81       	ldd	r24, Y+5	; 0x05
    35dc:	9e 81       	ldd	r25, Y+6	; 0x06
    35de:	86 36       	cpi	r24, 0x66	; 102
    35e0:	91 05       	cpc	r25, r1
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <handleUART+0x26>
    35e4:	bd c0       	rjmp	.+378    	; 0x3760 <handleUART+0x1a0>
    35e6:	2d 81       	ldd	r18, Y+5	; 0x05
    35e8:	3e 81       	ldd	r19, Y+6	; 0x06
    35ea:	27 36       	cpi	r18, 0x67	; 103
    35ec:	31 05       	cpc	r19, r1
    35ee:	94 f4       	brge	.+36     	; 0x3614 <handleUART+0x54>
    35f0:	8d 81       	ldd	r24, Y+5	; 0x05
    35f2:	9e 81       	ldd	r25, Y+6	; 0x06
    35f4:	82 33       	cpi	r24, 0x32	; 50
    35f6:	91 05       	cpc	r25, r1
    35f8:	09 f4       	brne	.+2      	; 0x35fc <handleUART+0x3c>
    35fa:	42 c0       	rjmp	.+132    	; 0x3680 <handleUART+0xc0>
    35fc:	2d 81       	ldd	r18, Y+5	; 0x05
    35fe:	3e 81       	ldd	r19, Y+6	; 0x06
    3600:	23 33       	cpi	r18, 0x33	; 51
    3602:	31 05       	cpc	r19, r1
    3604:	09 f4       	brne	.+2      	; 0x3608 <handleUART+0x48>
    3606:	5f c0       	rjmp	.+190    	; 0x36c6 <handleUART+0x106>
    3608:	8d 81       	ldd	r24, Y+5	; 0x05
    360a:	9e 81       	ldd	r25, Y+6	; 0x06
    360c:	81 33       	cpi	r24, 0x31	; 49
    360e:	91 05       	cpc	r25, r1
    3610:	a1 f0       	breq	.+40     	; 0x363a <handleUART+0x7a>
    3612:	c1 c0       	rjmp	.+386    	; 0x3796 <handleUART+0x1d6>
    3614:	2d 81       	ldd	r18, Y+5	; 0x05
    3616:	3e 81       	ldd	r19, Y+6	; 0x06
    3618:	2f 36       	cpi	r18, 0x6F	; 111
    361a:	31 05       	cpc	r19, r1
    361c:	09 f4       	brne	.+2      	; 0x3620 <handleUART+0x60>
    361e:	73 c0       	rjmp	.+230    	; 0x3706 <handleUART+0x146>
    3620:	8d 81       	ldd	r24, Y+5	; 0x05
    3622:	9e 81       	ldd	r25, Y+6	; 0x06
    3624:	82 37       	cpi	r24, 0x72	; 114
    3626:	91 05       	cpc	r25, r1
    3628:	09 f4       	brne	.+2      	; 0x362c <handleUART+0x6c>
    362a:	65 c0       	rjmp	.+202    	; 0x36f6 <handleUART+0x136>
    362c:	2d 81       	ldd	r18, Y+5	; 0x05
    362e:	3e 81       	ldd	r19, Y+6	; 0x06
    3630:	2d 36       	cpi	r18, 0x6D	; 109
    3632:	31 05       	cpc	r19, r1
    3634:	09 f4       	brne	.+2      	; 0x3638 <handleUART+0x78>
    3636:	5c c0       	rjmp	.+184    	; 0x36f0 <handleUART+0x130>
    3638:	ae c0       	rjmp	.+348    	; 0x3796 <handleUART+0x1d6>
    {
    case '1':
        if (current == 0)
    363a:	80 91 da 05 	lds	r24, 0x05DA
    363e:	88 23       	and	r24, r24
    3640:	19 f4       	brne	.+6      	; 0x3648 <handleUART+0x88>
        {
            statsMenuDisplay();
    3642:	0e 94 68 18 	call	0x30d0	; 0x30d0 <statsMenuDisplay>
    3646:	a7 c0       	rjmp	.+334    	; 0x3796 <handleUART+0x1d6>
        }
        else if (current == 2)
    3648:	80 91 da 05 	lds	r24, 0x05DA
    364c:	82 30       	cpi	r24, 0x02	; 2
    364e:	19 f4       	brne	.+6      	; 0x3656 <handleUART+0x96>
        {
            modeMenuDisplay();
    3650:	0e 94 7d 19 	call	0x32fa	; 0x32fa <modeMenuDisplay>
    3654:	a0 c0       	rjmp	.+320    	; 0x3796 <handleUART+0x1d6>
        }
        else if (current == 4)
    3656:	80 91 da 05 	lds	r24, 0x05DA
    365a:	84 30       	cpi	r24, 0x04	; 4
    365c:	19 f4       	brne	.+6      	; 0x3664 <handleUART+0xa4>
        {
            fanStateMenuDisplay();
    365e:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <fanStateMenuDisplay>
    3662:	99 c0       	rjmp	.+306    	; 0x3796 <handleUART+0x1d6>
        }
        else if (current == 6)
    3664:	80 91 da 05 	lds	r24, 0x05DA
    3668:	86 30       	cpi	r24, 0x06	; 6
    366a:	09 f0       	breq	.+2      	; 0x366e <handleUART+0xae>
    366c:	94 c0       	rjmp	.+296    	; 0x3796 <handleUART+0x1d6>
        {
            SPI_transceive('1');
    366e:	81 e3       	ldi	r24, 0x31	; 49
    3670:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <SPI_transceive>
            fanSpeed = 1;
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	80 93 e8 03 	sts	0x03E8, r24
            fanSpeedMenuDisplay();
    367a:	0e 94 38 1a 	call	0x3470	; 0x3470 <fanSpeedMenuDisplay>
    367e:	8b c0       	rjmp	.+278    	; 0x3796 <handleUART+0x1d6>
        }
        break;
    case '2':
        if (current == 0)
    3680:	80 91 da 05 	lds	r24, 0x05DA
    3684:	88 23       	and	r24, r24
    3686:	19 f4       	brne	.+6      	; 0x368e <handleUART+0xce>
        {
            modifyMenuDisplay();
    3688:	0e 94 0f 19 	call	0x321e	; 0x321e <modifyMenuDisplay>
    368c:	84 c0       	rjmp	.+264    	; 0x3796 <handleUART+0x1d6>
        }
        else if (current == 2)
    368e:	80 91 da 05 	lds	r24, 0x05DA
    3692:	82 30       	cpi	r24, 0x02	; 2
    3694:	19 f4       	brne	.+6      	; 0x369c <handleUART+0xdc>
        {
            settingsMenuDisplay();
    3696:	0e 94 ba 19 	call	0x3374	; 0x3374 <settingsMenuDisplay>
    369a:	7d c0       	rjmp	.+250    	; 0x3796 <handleUART+0x1d6>
        }
        else if (current == 4)
    369c:	80 91 da 05 	lds	r24, 0x05DA
    36a0:	84 30       	cpi	r24, 0x04	; 4
    36a2:	19 f4       	brne	.+6      	; 0x36aa <handleUART+0xea>
        {
            fanSpeedMenuDisplay();
    36a4:	0e 94 38 1a 	call	0x3470	; 0x3470 <fanSpeedMenuDisplay>
    36a8:	76 c0       	rjmp	.+236    	; 0x3796 <handleUART+0x1d6>
        }
        else if (current == 6)
    36aa:	80 91 da 05 	lds	r24, 0x05DA
    36ae:	86 30       	cpi	r24, 0x06	; 6
    36b0:	09 f0       	breq	.+2      	; 0x36b4 <handleUART+0xf4>
    36b2:	71 c0       	rjmp	.+226    	; 0x3796 <handleUART+0x1d6>
        {
            SPI_transceive('2');
    36b4:	82 e3       	ldi	r24, 0x32	; 50
    36b6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <SPI_transceive>
            fanSpeed = 2;
    36ba:	82 e0       	ldi	r24, 0x02	; 2
    36bc:	80 93 e8 03 	sts	0x03E8, r24
            fanSpeedMenuDisplay();
    36c0:	0e 94 38 1a 	call	0x3470	; 0x3470 <fanSpeedMenuDisplay>
    36c4:	68 c0       	rjmp	.+208    	; 0x3796 <handleUART+0x1d6>
        }
        break;
    case '3':
        if (current == 6)
    36c6:	80 91 da 05 	lds	r24, 0x05DA
    36ca:	86 30       	cpi	r24, 0x06	; 6
    36cc:	49 f4       	brne	.+18     	; 0x36e0 <handleUART+0x120>
        {
            SPI_transceive('3');
    36ce:	83 e3       	ldi	r24, 0x33	; 51
    36d0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <SPI_transceive>
            fanSpeed = 3;
    36d4:	83 e0       	ldi	r24, 0x03	; 3
    36d6:	80 93 e8 03 	sts	0x03E8, r24
            fanSpeedMenuDisplay();
    36da:	0e 94 38 1a 	call	0x3470	; 0x3470 <fanSpeedMenuDisplay>
    36de:	5b c0       	rjmp	.+182    	; 0x3796 <handleUART+0x1d6>
        }
        else if (current == 4)
    36e0:	80 91 da 05 	lds	r24, 0x05DA
    36e4:	84 30       	cpi	r24, 0x04	; 4
    36e6:	09 f0       	breq	.+2      	; 0x36ea <handleUART+0x12a>
    36e8:	56 c0       	rjmp	.+172    	; 0x3796 <handleUART+0x1d6>
        {
            lightStateMenuDisplay();
    36ea:	0e 94 a3 1a 	call	0x3546	; 0x3546 <lightStateMenuDisplay>
    36ee:	53 c0       	rjmp	.+166    	; 0x3796 <handleUART+0x1d6>
        }
        break;
    case 'm':
        mainMenuDisplay();
    36f0:	0e 94 45 18 	call	0x308a	; 0x308a <mainMenuDisplay>
    36f4:	50 c0       	rjmp	.+160    	; 0x3796 <handleUART+0x1d6>
        break;
    case 'r':
        if (current == 1)
    36f6:	80 91 da 05 	lds	r24, 0x05DA
    36fa:	81 30       	cpi	r24, 0x01	; 1
    36fc:	09 f0       	breq	.+2      	; 0x3700 <handleUART+0x140>
    36fe:	4b c0       	rjmp	.+150    	; 0x3796 <handleUART+0x1d6>
        {
            statsMenuDisplay();
    3700:	0e 94 68 18 	call	0x30d0	; 0x30d0 <statsMenuDisplay>
    3704:	48 c0       	rjmp	.+144    	; 0x3796 <handleUART+0x1d6>
        }
        break;
    case 'o':
        if (current == 3)
    3706:	80 91 da 05 	lds	r24, 0x05DA
    370a:	83 30       	cpi	r24, 0x03	; 3
    370c:	69 f4       	brne	.+26     	; 0x3728 <handleUART+0x168>
        {
            mode = !mode;
    370e:	80 91 db 05 	lds	r24, 0x05DB
    3712:	1c 82       	std	Y+4, r1	; 0x04
    3714:	88 23       	and	r24, r24
    3716:	11 f4       	brne	.+4      	; 0x371c <handleUART+0x15c>
    3718:	31 e0       	ldi	r19, 0x01	; 1
    371a:	3c 83       	std	Y+4, r19	; 0x04
    371c:	8c 81       	ldd	r24, Y+4	; 0x04
    371e:	80 93 db 05 	sts	0x05DB, r24
            modeMenuDisplay();
    3722:	0e 94 7d 19 	call	0x32fa	; 0x32fa <modeMenuDisplay>
    3726:	37 c0       	rjmp	.+110    	; 0x3796 <handleUART+0x1d6>
        }
        else if (current == 7)
    3728:	80 91 da 05 	lds	r24, 0x05DA
    372c:	87 30       	cpi	r24, 0x07	; 7
    372e:	99 f5       	brne	.+102    	; 0x3796 <handleUART+0x1d6>
        {
            lightState = !lightState;
    3730:	80 91 dd 05 	lds	r24, 0x05DD
    3734:	1b 82       	std	Y+3, r1	; 0x03
    3736:	88 23       	and	r24, r24
    3738:	11 f4       	brne	.+4      	; 0x373e <handleUART+0x17e>
    373a:	91 e0       	ldi	r25, 0x01	; 1
    373c:	9b 83       	std	Y+3, r25	; 0x03
    373e:	2b 81       	ldd	r18, Y+3	; 0x03
    3740:	20 93 dd 05 	sts	0x05DD, r18
            if (lightState == 0)
    3744:	80 91 dd 05 	lds	r24, 0x05DD
    3748:	88 23       	and	r24, r24
    374a:	21 f4       	brne	.+8      	; 0x3754 <handleUART+0x194>
            {
                SPI_transceive('r');
    374c:	82 e7       	ldi	r24, 0x72	; 114
    374e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <SPI_transceive>
    3752:	03 c0       	rjmp	.+6      	; 0x375a <handleUART+0x19a>
            }
            else
            {
                SPI_transceive('R');
    3754:	82 e5       	ldi	r24, 0x52	; 82
    3756:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <SPI_transceive>
            }
            lightStateMenuDisplay();
    375a:	0e 94 a3 1a 	call	0x3546	; 0x3546 <lightStateMenuDisplay>
    375e:	1b c0       	rjmp	.+54     	; 0x3796 <handleUART+0x1d6>
        }
        break;
    case 'f':
        if (current == 5)
    3760:	80 91 da 05 	lds	r24, 0x05DA
    3764:	85 30       	cpi	r24, 0x05	; 5
    3766:	b9 f4       	brne	.+46     	; 0x3796 <handleUART+0x1d6>
        {
            fanMode = !fanMode;
    3768:	80 91 dc 05 	lds	r24, 0x05DC
    376c:	1a 82       	std	Y+2, r1	; 0x02
    376e:	88 23       	and	r24, r24
    3770:	11 f4       	brne	.+4      	; 0x3776 <handleUART+0x1b6>
    3772:	31 e0       	ldi	r19, 0x01	; 1
    3774:	3a 83       	std	Y+2, r19	; 0x02
    3776:	8a 81       	ldd	r24, Y+2	; 0x02
    3778:	80 93 dc 05 	sts	0x05DC, r24
            if (fanMode == 0)
    377c:	80 91 dc 05 	lds	r24, 0x05DC
    3780:	88 23       	and	r24, r24
    3782:	21 f4       	brne	.+8      	; 0x378c <handleUART+0x1cc>
            {
                SPI_transceive('d');
    3784:	84 e6       	ldi	r24, 0x64	; 100
    3786:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <SPI_transceive>
    378a:	03 c0       	rjmp	.+6      	; 0x3792 <handleUART+0x1d2>
            }
            else
            {
                SPI_transceive('D');
    378c:	84 e4       	ldi	r24, 0x44	; 68
    378e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <SPI_transceive>
            }
            fanStateMenuDisplay();
    3792:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <fanStateMenuDisplay>
        }
        break;
    default:
        break;
    }
}
    3796:	26 96       	adiw	r28, 0x06	; 6
    3798:	0f b6       	in	r0, 0x3f	; 63
    379a:	f8 94       	cli
    379c:	de bf       	out	0x3e, r29	; 62
    379e:	0f be       	out	0x3f, r0	; 63
    37a0:	cd bf       	out	0x3d, r28	; 61
    37a2:	cf 91       	pop	r28
    37a4:	df 91       	pop	r29
    37a6:	08 95       	ret

000037a8 <__mulsi3>:
    37a8:	62 9f       	mul	r22, r18
    37aa:	d0 01       	movw	r26, r0
    37ac:	73 9f       	mul	r23, r19
    37ae:	f0 01       	movw	r30, r0
    37b0:	82 9f       	mul	r24, r18
    37b2:	e0 0d       	add	r30, r0
    37b4:	f1 1d       	adc	r31, r1
    37b6:	64 9f       	mul	r22, r20
    37b8:	e0 0d       	add	r30, r0
    37ba:	f1 1d       	adc	r31, r1
    37bc:	92 9f       	mul	r25, r18
    37be:	f0 0d       	add	r31, r0
    37c0:	83 9f       	mul	r24, r19
    37c2:	f0 0d       	add	r31, r0
    37c4:	74 9f       	mul	r23, r20
    37c6:	f0 0d       	add	r31, r0
    37c8:	65 9f       	mul	r22, r21
    37ca:	f0 0d       	add	r31, r0
    37cc:	99 27       	eor	r25, r25
    37ce:	72 9f       	mul	r23, r18
    37d0:	b0 0d       	add	r27, r0
    37d2:	e1 1d       	adc	r30, r1
    37d4:	f9 1f       	adc	r31, r25
    37d6:	63 9f       	mul	r22, r19
    37d8:	b0 0d       	add	r27, r0
    37da:	e1 1d       	adc	r30, r1
    37dc:	f9 1f       	adc	r31, r25
    37de:	bd 01       	movw	r22, r26
    37e0:	cf 01       	movw	r24, r30
    37e2:	11 24       	eor	r1, r1
    37e4:	08 95       	ret

000037e6 <__udivmodhi4>:
    37e6:	aa 1b       	sub	r26, r26
    37e8:	bb 1b       	sub	r27, r27
    37ea:	51 e1       	ldi	r21, 0x11	; 17
    37ec:	07 c0       	rjmp	.+14     	; 0x37fc <__udivmodhi4_ep>

000037ee <__udivmodhi4_loop>:
    37ee:	aa 1f       	adc	r26, r26
    37f0:	bb 1f       	adc	r27, r27
    37f2:	a6 17       	cp	r26, r22
    37f4:	b7 07       	cpc	r27, r23
    37f6:	10 f0       	brcs	.+4      	; 0x37fc <__udivmodhi4_ep>
    37f8:	a6 1b       	sub	r26, r22
    37fa:	b7 0b       	sbc	r27, r23

000037fc <__udivmodhi4_ep>:
    37fc:	88 1f       	adc	r24, r24
    37fe:	99 1f       	adc	r25, r25
    3800:	5a 95       	dec	r21
    3802:	a9 f7       	brne	.-22     	; 0x37ee <__udivmodhi4_loop>
    3804:	80 95       	com	r24
    3806:	90 95       	com	r25
    3808:	bc 01       	movw	r22, r24
    380a:	cd 01       	movw	r24, r26
    380c:	08 95       	ret

0000380e <__prologue_saves__>:
    380e:	2f 92       	push	r2
    3810:	3f 92       	push	r3
    3812:	4f 92       	push	r4
    3814:	5f 92       	push	r5
    3816:	6f 92       	push	r6
    3818:	7f 92       	push	r7
    381a:	8f 92       	push	r8
    381c:	9f 92       	push	r9
    381e:	af 92       	push	r10
    3820:	bf 92       	push	r11
    3822:	cf 92       	push	r12
    3824:	df 92       	push	r13
    3826:	ef 92       	push	r14
    3828:	ff 92       	push	r15
    382a:	0f 93       	push	r16
    382c:	1f 93       	push	r17
    382e:	cf 93       	push	r28
    3830:	df 93       	push	r29
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	ca 1b       	sub	r28, r26
    3838:	db 0b       	sbc	r29, r27
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	de bf       	out	0x3e, r29	; 62
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	cd bf       	out	0x3d, r28	; 61
    3844:	09 94       	ijmp

00003846 <__epilogue_restores__>:
    3846:	2a 88       	ldd	r2, Y+18	; 0x12
    3848:	39 88       	ldd	r3, Y+17	; 0x11
    384a:	48 88       	ldd	r4, Y+16	; 0x10
    384c:	5f 84       	ldd	r5, Y+15	; 0x0f
    384e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3850:	7d 84       	ldd	r7, Y+13	; 0x0d
    3852:	8c 84       	ldd	r8, Y+12	; 0x0c
    3854:	9b 84       	ldd	r9, Y+11	; 0x0b
    3856:	aa 84       	ldd	r10, Y+10	; 0x0a
    3858:	b9 84       	ldd	r11, Y+9	; 0x09
    385a:	c8 84       	ldd	r12, Y+8	; 0x08
    385c:	df 80       	ldd	r13, Y+7	; 0x07
    385e:	ee 80       	ldd	r14, Y+6	; 0x06
    3860:	fd 80       	ldd	r15, Y+5	; 0x05
    3862:	0c 81       	ldd	r16, Y+4	; 0x04
    3864:	1b 81       	ldd	r17, Y+3	; 0x03
    3866:	aa 81       	ldd	r26, Y+2	; 0x02
    3868:	b9 81       	ldd	r27, Y+1	; 0x01
    386a:	ce 0f       	add	r28, r30
    386c:	d1 1d       	adc	r29, r1
    386e:	0f b6       	in	r0, 0x3f	; 63
    3870:	f8 94       	cli
    3872:	de bf       	out	0x3e, r29	; 62
    3874:	0f be       	out	0x3f, r0	; 63
    3876:	cd bf       	out	0x3d, r28	; 61
    3878:	ed 01       	movw	r28, r26
    387a:	08 95       	ret

0000387c <sprintf>:
    387c:	ae e0       	ldi	r26, 0x0E	; 14
    387e:	b0 e0       	ldi	r27, 0x00	; 0
    3880:	e4 e4       	ldi	r30, 0x44	; 68
    3882:	fc e1       	ldi	r31, 0x1C	; 28
    3884:	0c 94 15 1c 	jmp	0x382a	; 0x382a <__prologue_saves__+0x1c>
    3888:	0d 89       	ldd	r16, Y+21	; 0x15
    388a:	1e 89       	ldd	r17, Y+22	; 0x16
    388c:	86 e0       	ldi	r24, 0x06	; 6
    388e:	8c 83       	std	Y+4, r24	; 0x04
    3890:	1a 83       	std	Y+2, r17	; 0x02
    3892:	09 83       	std	Y+1, r16	; 0x01
    3894:	8f ef       	ldi	r24, 0xFF	; 255
    3896:	9f e7       	ldi	r25, 0x7F	; 127
    3898:	9e 83       	std	Y+6, r25	; 0x06
    389a:	8d 83       	std	Y+5, r24	; 0x05
    389c:	9e 01       	movw	r18, r28
    389e:	27 5e       	subi	r18, 0xE7	; 231
    38a0:	3f 4f       	sbci	r19, 0xFF	; 255
    38a2:	ce 01       	movw	r24, r28
    38a4:	01 96       	adiw	r24, 0x01	; 1
    38a6:	6f 89       	ldd	r22, Y+23	; 0x17
    38a8:	78 8d       	ldd	r23, Y+24	; 0x18
    38aa:	a9 01       	movw	r20, r18
    38ac:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <vfprintf>
    38b0:	2f 81       	ldd	r18, Y+7	; 0x07
    38b2:	38 85       	ldd	r19, Y+8	; 0x08
    38b4:	02 0f       	add	r16, r18
    38b6:	13 1f       	adc	r17, r19
    38b8:	f8 01       	movw	r30, r16
    38ba:	10 82       	st	Z, r1
    38bc:	2e 96       	adiw	r28, 0x0e	; 14
    38be:	e4 e0       	ldi	r30, 0x04	; 4
    38c0:	0c 94 31 1c 	jmp	0x3862	; 0x3862 <__epilogue_restores__+0x1c>

000038c4 <vfprintf>:
    38c4:	ab e0       	ldi	r26, 0x0B	; 11
    38c6:	b0 e0       	ldi	r27, 0x00	; 0
    38c8:	e8 e6       	ldi	r30, 0x68	; 104
    38ca:	fc e1       	ldi	r31, 0x1C	; 28
    38cc:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__prologue_saves__>
    38d0:	3c 01       	movw	r6, r24
    38d2:	2b 01       	movw	r4, r22
    38d4:	5a 01       	movw	r10, r20
    38d6:	fc 01       	movw	r30, r24
    38d8:	17 82       	std	Z+7, r1	; 0x07
    38da:	16 82       	std	Z+6, r1	; 0x06
    38dc:	83 81       	ldd	r24, Z+3	; 0x03
    38de:	81 fd       	sbrc	r24, 1
    38e0:	03 c0       	rjmp	.+6      	; 0x38e8 <vfprintf+0x24>
    38e2:	6f ef       	ldi	r22, 0xFF	; 255
    38e4:	7f ef       	ldi	r23, 0xFF	; 255
    38e6:	c6 c1       	rjmp	.+908    	; 0x3c74 <vfprintf+0x3b0>
    38e8:	9a e0       	ldi	r25, 0x0A	; 10
    38ea:	89 2e       	mov	r8, r25
    38ec:	1e 01       	movw	r2, r28
    38ee:	08 94       	sec
    38f0:	21 1c       	adc	r2, r1
    38f2:	31 1c       	adc	r3, r1
    38f4:	f3 01       	movw	r30, r6
    38f6:	23 81       	ldd	r18, Z+3	; 0x03
    38f8:	f2 01       	movw	r30, r4
    38fa:	23 fd       	sbrc	r18, 3
    38fc:	85 91       	lpm	r24, Z+
    38fe:	23 ff       	sbrs	r18, 3
    3900:	81 91       	ld	r24, Z+
    3902:	2f 01       	movw	r4, r30
    3904:	88 23       	and	r24, r24
    3906:	09 f4       	brne	.+2      	; 0x390a <vfprintf+0x46>
    3908:	b2 c1       	rjmp	.+868    	; 0x3c6e <vfprintf+0x3aa>
    390a:	85 32       	cpi	r24, 0x25	; 37
    390c:	39 f4       	brne	.+14     	; 0x391c <vfprintf+0x58>
    390e:	23 fd       	sbrc	r18, 3
    3910:	85 91       	lpm	r24, Z+
    3912:	23 ff       	sbrs	r18, 3
    3914:	81 91       	ld	r24, Z+
    3916:	2f 01       	movw	r4, r30
    3918:	85 32       	cpi	r24, 0x25	; 37
    391a:	29 f4       	brne	.+10     	; 0x3926 <vfprintf+0x62>
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	b3 01       	movw	r22, r6
    3920:	0e 94 55 1e 	call	0x3caa	; 0x3caa <fputc>
    3924:	e7 cf       	rjmp	.-50     	; 0x38f4 <vfprintf+0x30>
    3926:	98 2f       	mov	r25, r24
    3928:	ff 24       	eor	r15, r15
    392a:	ee 24       	eor	r14, r14
    392c:	99 24       	eor	r9, r9
    392e:	ff e1       	ldi	r31, 0x1F	; 31
    3930:	ff 15       	cp	r31, r15
    3932:	d0 f0       	brcs	.+52     	; 0x3968 <vfprintf+0xa4>
    3934:	9b 32       	cpi	r25, 0x2B	; 43
    3936:	69 f0       	breq	.+26     	; 0x3952 <vfprintf+0x8e>
    3938:	9c 32       	cpi	r25, 0x2C	; 44
    393a:	28 f4       	brcc	.+10     	; 0x3946 <vfprintf+0x82>
    393c:	90 32       	cpi	r25, 0x20	; 32
    393e:	59 f0       	breq	.+22     	; 0x3956 <vfprintf+0x92>
    3940:	93 32       	cpi	r25, 0x23	; 35
    3942:	91 f4       	brne	.+36     	; 0x3968 <vfprintf+0xa4>
    3944:	0e c0       	rjmp	.+28     	; 0x3962 <vfprintf+0x9e>
    3946:	9d 32       	cpi	r25, 0x2D	; 45
    3948:	49 f0       	breq	.+18     	; 0x395c <vfprintf+0x98>
    394a:	90 33       	cpi	r25, 0x30	; 48
    394c:	69 f4       	brne	.+26     	; 0x3968 <vfprintf+0xa4>
    394e:	41 e0       	ldi	r20, 0x01	; 1
    3950:	24 c0       	rjmp	.+72     	; 0x399a <vfprintf+0xd6>
    3952:	52 e0       	ldi	r21, 0x02	; 2
    3954:	f5 2a       	or	r15, r21
    3956:	84 e0       	ldi	r24, 0x04	; 4
    3958:	f8 2a       	or	r15, r24
    395a:	28 c0       	rjmp	.+80     	; 0x39ac <vfprintf+0xe8>
    395c:	98 e0       	ldi	r25, 0x08	; 8
    395e:	f9 2a       	or	r15, r25
    3960:	25 c0       	rjmp	.+74     	; 0x39ac <vfprintf+0xe8>
    3962:	e0 e1       	ldi	r30, 0x10	; 16
    3964:	fe 2a       	or	r15, r30
    3966:	22 c0       	rjmp	.+68     	; 0x39ac <vfprintf+0xe8>
    3968:	f7 fc       	sbrc	r15, 7
    396a:	29 c0       	rjmp	.+82     	; 0x39be <vfprintf+0xfa>
    396c:	89 2f       	mov	r24, r25
    396e:	80 53       	subi	r24, 0x30	; 48
    3970:	8a 30       	cpi	r24, 0x0A	; 10
    3972:	70 f4       	brcc	.+28     	; 0x3990 <vfprintf+0xcc>
    3974:	f6 fe       	sbrs	r15, 6
    3976:	05 c0       	rjmp	.+10     	; 0x3982 <vfprintf+0xbe>
    3978:	98 9c       	mul	r9, r8
    397a:	90 2c       	mov	r9, r0
    397c:	11 24       	eor	r1, r1
    397e:	98 0e       	add	r9, r24
    3980:	15 c0       	rjmp	.+42     	; 0x39ac <vfprintf+0xe8>
    3982:	e8 9c       	mul	r14, r8
    3984:	e0 2c       	mov	r14, r0
    3986:	11 24       	eor	r1, r1
    3988:	e8 0e       	add	r14, r24
    398a:	f0 e2       	ldi	r31, 0x20	; 32
    398c:	ff 2a       	or	r15, r31
    398e:	0e c0       	rjmp	.+28     	; 0x39ac <vfprintf+0xe8>
    3990:	9e 32       	cpi	r25, 0x2E	; 46
    3992:	29 f4       	brne	.+10     	; 0x399e <vfprintf+0xda>
    3994:	f6 fc       	sbrc	r15, 6
    3996:	6b c1       	rjmp	.+726    	; 0x3c6e <vfprintf+0x3aa>
    3998:	40 e4       	ldi	r20, 0x40	; 64
    399a:	f4 2a       	or	r15, r20
    399c:	07 c0       	rjmp	.+14     	; 0x39ac <vfprintf+0xe8>
    399e:	9c 36       	cpi	r25, 0x6C	; 108
    39a0:	19 f4       	brne	.+6      	; 0x39a8 <vfprintf+0xe4>
    39a2:	50 e8       	ldi	r21, 0x80	; 128
    39a4:	f5 2a       	or	r15, r21
    39a6:	02 c0       	rjmp	.+4      	; 0x39ac <vfprintf+0xe8>
    39a8:	98 36       	cpi	r25, 0x68	; 104
    39aa:	49 f4       	brne	.+18     	; 0x39be <vfprintf+0xfa>
    39ac:	f2 01       	movw	r30, r4
    39ae:	23 fd       	sbrc	r18, 3
    39b0:	95 91       	lpm	r25, Z+
    39b2:	23 ff       	sbrs	r18, 3
    39b4:	91 91       	ld	r25, Z+
    39b6:	2f 01       	movw	r4, r30
    39b8:	99 23       	and	r25, r25
    39ba:	09 f0       	breq	.+2      	; 0x39be <vfprintf+0xfa>
    39bc:	b8 cf       	rjmp	.-144    	; 0x392e <vfprintf+0x6a>
    39be:	89 2f       	mov	r24, r25
    39c0:	85 54       	subi	r24, 0x45	; 69
    39c2:	83 30       	cpi	r24, 0x03	; 3
    39c4:	18 f0       	brcs	.+6      	; 0x39cc <vfprintf+0x108>
    39c6:	80 52       	subi	r24, 0x20	; 32
    39c8:	83 30       	cpi	r24, 0x03	; 3
    39ca:	38 f4       	brcc	.+14     	; 0x39da <vfprintf+0x116>
    39cc:	44 e0       	ldi	r20, 0x04	; 4
    39ce:	50 e0       	ldi	r21, 0x00	; 0
    39d0:	a4 0e       	add	r10, r20
    39d2:	b5 1e       	adc	r11, r21
    39d4:	5f e3       	ldi	r21, 0x3F	; 63
    39d6:	59 83       	std	Y+1, r21	; 0x01
    39d8:	0f c0       	rjmp	.+30     	; 0x39f8 <vfprintf+0x134>
    39da:	93 36       	cpi	r25, 0x63	; 99
    39dc:	31 f0       	breq	.+12     	; 0x39ea <vfprintf+0x126>
    39de:	93 37       	cpi	r25, 0x73	; 115
    39e0:	79 f0       	breq	.+30     	; 0x3a00 <vfprintf+0x13c>
    39e2:	93 35       	cpi	r25, 0x53	; 83
    39e4:	09 f0       	breq	.+2      	; 0x39e8 <vfprintf+0x124>
    39e6:	56 c0       	rjmp	.+172    	; 0x3a94 <vfprintf+0x1d0>
    39e8:	20 c0       	rjmp	.+64     	; 0x3a2a <vfprintf+0x166>
    39ea:	f5 01       	movw	r30, r10
    39ec:	80 81       	ld	r24, Z
    39ee:	89 83       	std	Y+1, r24	; 0x01
    39f0:	42 e0       	ldi	r20, 0x02	; 2
    39f2:	50 e0       	ldi	r21, 0x00	; 0
    39f4:	a4 0e       	add	r10, r20
    39f6:	b5 1e       	adc	r11, r21
    39f8:	61 01       	movw	r12, r2
    39fa:	01 e0       	ldi	r16, 0x01	; 1
    39fc:	10 e0       	ldi	r17, 0x00	; 0
    39fe:	12 c0       	rjmp	.+36     	; 0x3a24 <vfprintf+0x160>
    3a00:	f5 01       	movw	r30, r10
    3a02:	c0 80       	ld	r12, Z
    3a04:	d1 80       	ldd	r13, Z+1	; 0x01
    3a06:	f6 fc       	sbrc	r15, 6
    3a08:	03 c0       	rjmp	.+6      	; 0x3a10 <vfprintf+0x14c>
    3a0a:	6f ef       	ldi	r22, 0xFF	; 255
    3a0c:	7f ef       	ldi	r23, 0xFF	; 255
    3a0e:	02 c0       	rjmp	.+4      	; 0x3a14 <vfprintf+0x150>
    3a10:	69 2d       	mov	r22, r9
    3a12:	70 e0       	ldi	r23, 0x00	; 0
    3a14:	42 e0       	ldi	r20, 0x02	; 2
    3a16:	50 e0       	ldi	r21, 0x00	; 0
    3a18:	a4 0e       	add	r10, r20
    3a1a:	b5 1e       	adc	r11, r21
    3a1c:	c6 01       	movw	r24, r12
    3a1e:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <strnlen>
    3a22:	8c 01       	movw	r16, r24
    3a24:	5f e7       	ldi	r21, 0x7F	; 127
    3a26:	f5 22       	and	r15, r21
    3a28:	14 c0       	rjmp	.+40     	; 0x3a52 <vfprintf+0x18e>
    3a2a:	f5 01       	movw	r30, r10
    3a2c:	c0 80       	ld	r12, Z
    3a2e:	d1 80       	ldd	r13, Z+1	; 0x01
    3a30:	f6 fc       	sbrc	r15, 6
    3a32:	03 c0       	rjmp	.+6      	; 0x3a3a <vfprintf+0x176>
    3a34:	6f ef       	ldi	r22, 0xFF	; 255
    3a36:	7f ef       	ldi	r23, 0xFF	; 255
    3a38:	02 c0       	rjmp	.+4      	; 0x3a3e <vfprintf+0x17a>
    3a3a:	69 2d       	mov	r22, r9
    3a3c:	70 e0       	ldi	r23, 0x00	; 0
    3a3e:	42 e0       	ldi	r20, 0x02	; 2
    3a40:	50 e0       	ldi	r21, 0x00	; 0
    3a42:	a4 0e       	add	r10, r20
    3a44:	b5 1e       	adc	r11, r21
    3a46:	c6 01       	movw	r24, r12
    3a48:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <strnlen_P>
    3a4c:	8c 01       	movw	r16, r24
    3a4e:	50 e8       	ldi	r21, 0x80	; 128
    3a50:	f5 2a       	or	r15, r21
    3a52:	f3 fe       	sbrs	r15, 3
    3a54:	07 c0       	rjmp	.+14     	; 0x3a64 <vfprintf+0x1a0>
    3a56:	1a c0       	rjmp	.+52     	; 0x3a8c <vfprintf+0x1c8>
    3a58:	80 e2       	ldi	r24, 0x20	; 32
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	b3 01       	movw	r22, r6
    3a5e:	0e 94 55 1e 	call	0x3caa	; 0x3caa <fputc>
    3a62:	ea 94       	dec	r14
    3a64:	8e 2d       	mov	r24, r14
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	08 17       	cp	r16, r24
    3a6a:	19 07       	cpc	r17, r25
    3a6c:	a8 f3       	brcs	.-22     	; 0x3a58 <vfprintf+0x194>
    3a6e:	0e c0       	rjmp	.+28     	; 0x3a8c <vfprintf+0x1c8>
    3a70:	f6 01       	movw	r30, r12
    3a72:	f7 fc       	sbrc	r15, 7
    3a74:	85 91       	lpm	r24, Z+
    3a76:	f7 fe       	sbrs	r15, 7
    3a78:	81 91       	ld	r24, Z+
    3a7a:	6f 01       	movw	r12, r30
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	b3 01       	movw	r22, r6
    3a80:	0e 94 55 1e 	call	0x3caa	; 0x3caa <fputc>
    3a84:	e1 10       	cpse	r14, r1
    3a86:	ea 94       	dec	r14
    3a88:	01 50       	subi	r16, 0x01	; 1
    3a8a:	10 40       	sbci	r17, 0x00	; 0
    3a8c:	01 15       	cp	r16, r1
    3a8e:	11 05       	cpc	r17, r1
    3a90:	79 f7       	brne	.-34     	; 0x3a70 <vfprintf+0x1ac>
    3a92:	ea c0       	rjmp	.+468    	; 0x3c68 <vfprintf+0x3a4>
    3a94:	94 36       	cpi	r25, 0x64	; 100
    3a96:	11 f0       	breq	.+4      	; 0x3a9c <vfprintf+0x1d8>
    3a98:	99 36       	cpi	r25, 0x69	; 105
    3a9a:	69 f5       	brne	.+90     	; 0x3af6 <vfprintf+0x232>
    3a9c:	f7 fe       	sbrs	r15, 7
    3a9e:	08 c0       	rjmp	.+16     	; 0x3ab0 <vfprintf+0x1ec>
    3aa0:	f5 01       	movw	r30, r10
    3aa2:	20 81       	ld	r18, Z
    3aa4:	31 81       	ldd	r19, Z+1	; 0x01
    3aa6:	42 81       	ldd	r20, Z+2	; 0x02
    3aa8:	53 81       	ldd	r21, Z+3	; 0x03
    3aaa:	84 e0       	ldi	r24, 0x04	; 4
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	0a c0       	rjmp	.+20     	; 0x3ac4 <vfprintf+0x200>
    3ab0:	f5 01       	movw	r30, r10
    3ab2:	80 81       	ld	r24, Z
    3ab4:	91 81       	ldd	r25, Z+1	; 0x01
    3ab6:	9c 01       	movw	r18, r24
    3ab8:	44 27       	eor	r20, r20
    3aba:	37 fd       	sbrc	r19, 7
    3abc:	40 95       	com	r20
    3abe:	54 2f       	mov	r21, r20
    3ac0:	82 e0       	ldi	r24, 0x02	; 2
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	a8 0e       	add	r10, r24
    3ac6:	b9 1e       	adc	r11, r25
    3ac8:	9f e6       	ldi	r25, 0x6F	; 111
    3aca:	f9 22       	and	r15, r25
    3acc:	57 ff       	sbrs	r21, 7
    3ace:	09 c0       	rjmp	.+18     	; 0x3ae2 <vfprintf+0x21e>
    3ad0:	50 95       	com	r21
    3ad2:	40 95       	com	r20
    3ad4:	30 95       	com	r19
    3ad6:	21 95       	neg	r18
    3ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    3ada:	4f 4f       	sbci	r20, 0xFF	; 255
    3adc:	5f 4f       	sbci	r21, 0xFF	; 255
    3ade:	e0 e8       	ldi	r30, 0x80	; 128
    3ae0:	fe 2a       	or	r15, r30
    3ae2:	ca 01       	movw	r24, r20
    3ae4:	b9 01       	movw	r22, r18
    3ae6:	a1 01       	movw	r20, r2
    3ae8:	2a e0       	ldi	r18, 0x0A	; 10
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__ultoa_invert>
    3af0:	d8 2e       	mov	r13, r24
    3af2:	d2 18       	sub	r13, r2
    3af4:	40 c0       	rjmp	.+128    	; 0x3b76 <vfprintf+0x2b2>
    3af6:	95 37       	cpi	r25, 0x75	; 117
    3af8:	29 f4       	brne	.+10     	; 0x3b04 <vfprintf+0x240>
    3afa:	1f 2d       	mov	r17, r15
    3afc:	1f 7e       	andi	r17, 0xEF	; 239
    3afe:	2a e0       	ldi	r18, 0x0A	; 10
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	1d c0       	rjmp	.+58     	; 0x3b3e <vfprintf+0x27a>
    3b04:	1f 2d       	mov	r17, r15
    3b06:	19 7f       	andi	r17, 0xF9	; 249
    3b08:	9f 36       	cpi	r25, 0x6F	; 111
    3b0a:	61 f0       	breq	.+24     	; 0x3b24 <vfprintf+0x260>
    3b0c:	90 37       	cpi	r25, 0x70	; 112
    3b0e:	20 f4       	brcc	.+8      	; 0x3b18 <vfprintf+0x254>
    3b10:	98 35       	cpi	r25, 0x58	; 88
    3b12:	09 f0       	breq	.+2      	; 0x3b16 <vfprintf+0x252>
    3b14:	ac c0       	rjmp	.+344    	; 0x3c6e <vfprintf+0x3aa>
    3b16:	0f c0       	rjmp	.+30     	; 0x3b36 <vfprintf+0x272>
    3b18:	90 37       	cpi	r25, 0x70	; 112
    3b1a:	39 f0       	breq	.+14     	; 0x3b2a <vfprintf+0x266>
    3b1c:	98 37       	cpi	r25, 0x78	; 120
    3b1e:	09 f0       	breq	.+2      	; 0x3b22 <vfprintf+0x25e>
    3b20:	a6 c0       	rjmp	.+332    	; 0x3c6e <vfprintf+0x3aa>
    3b22:	04 c0       	rjmp	.+8      	; 0x3b2c <vfprintf+0x268>
    3b24:	28 e0       	ldi	r18, 0x08	; 8
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	0a c0       	rjmp	.+20     	; 0x3b3e <vfprintf+0x27a>
    3b2a:	10 61       	ori	r17, 0x10	; 16
    3b2c:	14 fd       	sbrc	r17, 4
    3b2e:	14 60       	ori	r17, 0x04	; 4
    3b30:	20 e1       	ldi	r18, 0x10	; 16
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	04 c0       	rjmp	.+8      	; 0x3b3e <vfprintf+0x27a>
    3b36:	14 fd       	sbrc	r17, 4
    3b38:	16 60       	ori	r17, 0x06	; 6
    3b3a:	20 e1       	ldi	r18, 0x10	; 16
    3b3c:	32 e0       	ldi	r19, 0x02	; 2
    3b3e:	17 ff       	sbrs	r17, 7
    3b40:	08 c0       	rjmp	.+16     	; 0x3b52 <vfprintf+0x28e>
    3b42:	f5 01       	movw	r30, r10
    3b44:	60 81       	ld	r22, Z
    3b46:	71 81       	ldd	r23, Z+1	; 0x01
    3b48:	82 81       	ldd	r24, Z+2	; 0x02
    3b4a:	93 81       	ldd	r25, Z+3	; 0x03
    3b4c:	44 e0       	ldi	r20, 0x04	; 4
    3b4e:	50 e0       	ldi	r21, 0x00	; 0
    3b50:	08 c0       	rjmp	.+16     	; 0x3b62 <vfprintf+0x29e>
    3b52:	f5 01       	movw	r30, r10
    3b54:	80 81       	ld	r24, Z
    3b56:	91 81       	ldd	r25, Z+1	; 0x01
    3b58:	bc 01       	movw	r22, r24
    3b5a:	80 e0       	ldi	r24, 0x00	; 0
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	42 e0       	ldi	r20, 0x02	; 2
    3b60:	50 e0       	ldi	r21, 0x00	; 0
    3b62:	a4 0e       	add	r10, r20
    3b64:	b5 1e       	adc	r11, r21
    3b66:	a1 01       	movw	r20, r2
    3b68:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__ultoa_invert>
    3b6c:	d8 2e       	mov	r13, r24
    3b6e:	d2 18       	sub	r13, r2
    3b70:	8f e7       	ldi	r24, 0x7F	; 127
    3b72:	f8 2e       	mov	r15, r24
    3b74:	f1 22       	and	r15, r17
    3b76:	f6 fe       	sbrs	r15, 6
    3b78:	0b c0       	rjmp	.+22     	; 0x3b90 <vfprintf+0x2cc>
    3b7a:	5e ef       	ldi	r21, 0xFE	; 254
    3b7c:	f5 22       	and	r15, r21
    3b7e:	d9 14       	cp	r13, r9
    3b80:	38 f4       	brcc	.+14     	; 0x3b90 <vfprintf+0x2cc>
    3b82:	f4 fe       	sbrs	r15, 4
    3b84:	07 c0       	rjmp	.+14     	; 0x3b94 <vfprintf+0x2d0>
    3b86:	f2 fc       	sbrc	r15, 2
    3b88:	05 c0       	rjmp	.+10     	; 0x3b94 <vfprintf+0x2d0>
    3b8a:	8f ee       	ldi	r24, 0xEF	; 239
    3b8c:	f8 22       	and	r15, r24
    3b8e:	02 c0       	rjmp	.+4      	; 0x3b94 <vfprintf+0x2d0>
    3b90:	1d 2d       	mov	r17, r13
    3b92:	01 c0       	rjmp	.+2      	; 0x3b96 <vfprintf+0x2d2>
    3b94:	19 2d       	mov	r17, r9
    3b96:	f4 fe       	sbrs	r15, 4
    3b98:	0d c0       	rjmp	.+26     	; 0x3bb4 <vfprintf+0x2f0>
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	ed 0d       	add	r30, r13
    3b9e:	f1 1d       	adc	r31, r1
    3ba0:	80 81       	ld	r24, Z
    3ba2:	80 33       	cpi	r24, 0x30	; 48
    3ba4:	19 f4       	brne	.+6      	; 0x3bac <vfprintf+0x2e8>
    3ba6:	99 ee       	ldi	r25, 0xE9	; 233
    3ba8:	f9 22       	and	r15, r25
    3baa:	08 c0       	rjmp	.+16     	; 0x3bbc <vfprintf+0x2f8>
    3bac:	1f 5f       	subi	r17, 0xFF	; 255
    3bae:	f2 fe       	sbrs	r15, 2
    3bb0:	05 c0       	rjmp	.+10     	; 0x3bbc <vfprintf+0x2f8>
    3bb2:	03 c0       	rjmp	.+6      	; 0x3bba <vfprintf+0x2f6>
    3bb4:	8f 2d       	mov	r24, r15
    3bb6:	86 78       	andi	r24, 0x86	; 134
    3bb8:	09 f0       	breq	.+2      	; 0x3bbc <vfprintf+0x2f8>
    3bba:	1f 5f       	subi	r17, 0xFF	; 255
    3bbc:	0f 2d       	mov	r16, r15
    3bbe:	f3 fc       	sbrc	r15, 3
    3bc0:	14 c0       	rjmp	.+40     	; 0x3bea <vfprintf+0x326>
    3bc2:	f0 fe       	sbrs	r15, 0
    3bc4:	0f c0       	rjmp	.+30     	; 0x3be4 <vfprintf+0x320>
    3bc6:	1e 15       	cp	r17, r14
    3bc8:	10 f0       	brcs	.+4      	; 0x3bce <vfprintf+0x30a>
    3bca:	9d 2c       	mov	r9, r13
    3bcc:	0b c0       	rjmp	.+22     	; 0x3be4 <vfprintf+0x320>
    3bce:	9d 2c       	mov	r9, r13
    3bd0:	9e 0c       	add	r9, r14
    3bd2:	91 1a       	sub	r9, r17
    3bd4:	1e 2d       	mov	r17, r14
    3bd6:	06 c0       	rjmp	.+12     	; 0x3be4 <vfprintf+0x320>
    3bd8:	80 e2       	ldi	r24, 0x20	; 32
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	b3 01       	movw	r22, r6
    3bde:	0e 94 55 1e 	call	0x3caa	; 0x3caa <fputc>
    3be2:	1f 5f       	subi	r17, 0xFF	; 255
    3be4:	1e 15       	cp	r17, r14
    3be6:	c0 f3       	brcs	.-16     	; 0x3bd8 <vfprintf+0x314>
    3be8:	04 c0       	rjmp	.+8      	; 0x3bf2 <vfprintf+0x32e>
    3bea:	1e 15       	cp	r17, r14
    3bec:	10 f4       	brcc	.+4      	; 0x3bf2 <vfprintf+0x32e>
    3bee:	e1 1a       	sub	r14, r17
    3bf0:	01 c0       	rjmp	.+2      	; 0x3bf4 <vfprintf+0x330>
    3bf2:	ee 24       	eor	r14, r14
    3bf4:	04 ff       	sbrs	r16, 4
    3bf6:	0f c0       	rjmp	.+30     	; 0x3c16 <vfprintf+0x352>
    3bf8:	80 e3       	ldi	r24, 0x30	; 48
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	b3 01       	movw	r22, r6
    3bfe:	0e 94 55 1e 	call	0x3caa	; 0x3caa <fputc>
    3c02:	02 ff       	sbrs	r16, 2
    3c04:	1d c0       	rjmp	.+58     	; 0x3c40 <vfprintf+0x37c>
    3c06:	01 fd       	sbrc	r16, 1
    3c08:	03 c0       	rjmp	.+6      	; 0x3c10 <vfprintf+0x34c>
    3c0a:	88 e7       	ldi	r24, 0x78	; 120
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	0e c0       	rjmp	.+28     	; 0x3c2c <vfprintf+0x368>
    3c10:	88 e5       	ldi	r24, 0x58	; 88
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	0b c0       	rjmp	.+22     	; 0x3c2c <vfprintf+0x368>
    3c16:	80 2f       	mov	r24, r16
    3c18:	86 78       	andi	r24, 0x86	; 134
    3c1a:	91 f0       	breq	.+36     	; 0x3c40 <vfprintf+0x37c>
    3c1c:	01 ff       	sbrs	r16, 1
    3c1e:	02 c0       	rjmp	.+4      	; 0x3c24 <vfprintf+0x360>
    3c20:	8b e2       	ldi	r24, 0x2B	; 43
    3c22:	01 c0       	rjmp	.+2      	; 0x3c26 <vfprintf+0x362>
    3c24:	80 e2       	ldi	r24, 0x20	; 32
    3c26:	f7 fc       	sbrc	r15, 7
    3c28:	8d e2       	ldi	r24, 0x2D	; 45
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	b3 01       	movw	r22, r6
    3c2e:	0e 94 55 1e 	call	0x3caa	; 0x3caa <fputc>
    3c32:	06 c0       	rjmp	.+12     	; 0x3c40 <vfprintf+0x37c>
    3c34:	80 e3       	ldi	r24, 0x30	; 48
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	b3 01       	movw	r22, r6
    3c3a:	0e 94 55 1e 	call	0x3caa	; 0x3caa <fputc>
    3c3e:	9a 94       	dec	r9
    3c40:	d9 14       	cp	r13, r9
    3c42:	c0 f3       	brcs	.-16     	; 0x3c34 <vfprintf+0x370>
    3c44:	da 94       	dec	r13
    3c46:	f1 01       	movw	r30, r2
    3c48:	ed 0d       	add	r30, r13
    3c4a:	f1 1d       	adc	r31, r1
    3c4c:	80 81       	ld	r24, Z
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	b3 01       	movw	r22, r6
    3c52:	0e 94 55 1e 	call	0x3caa	; 0x3caa <fputc>
    3c56:	dd 20       	and	r13, r13
    3c58:	a9 f7       	brne	.-22     	; 0x3c44 <vfprintf+0x380>
    3c5a:	06 c0       	rjmp	.+12     	; 0x3c68 <vfprintf+0x3a4>
    3c5c:	80 e2       	ldi	r24, 0x20	; 32
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	b3 01       	movw	r22, r6
    3c62:	0e 94 55 1e 	call	0x3caa	; 0x3caa <fputc>
    3c66:	ea 94       	dec	r14
    3c68:	ee 20       	and	r14, r14
    3c6a:	c1 f7       	brne	.-16     	; 0x3c5c <vfprintf+0x398>
    3c6c:	43 ce       	rjmp	.-890    	; 0x38f4 <vfprintf+0x30>
    3c6e:	f3 01       	movw	r30, r6
    3c70:	66 81       	ldd	r22, Z+6	; 0x06
    3c72:	77 81       	ldd	r23, Z+7	; 0x07
    3c74:	cb 01       	movw	r24, r22
    3c76:	2b 96       	adiw	r28, 0x0b	; 11
    3c78:	e2 e1       	ldi	r30, 0x12	; 18
    3c7a:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__epilogue_restores__>

00003c7e <strnlen_P>:
    3c7e:	fc 01       	movw	r30, r24
    3c80:	05 90       	lpm	r0, Z+
    3c82:	61 50       	subi	r22, 0x01	; 1
    3c84:	70 40       	sbci	r23, 0x00	; 0
    3c86:	01 10       	cpse	r0, r1
    3c88:	d8 f7       	brcc	.-10     	; 0x3c80 <strnlen_P+0x2>
    3c8a:	80 95       	com	r24
    3c8c:	90 95       	com	r25
    3c8e:	8e 0f       	add	r24, r30
    3c90:	9f 1f       	adc	r25, r31
    3c92:	08 95       	ret

00003c94 <strnlen>:
    3c94:	fc 01       	movw	r30, r24
    3c96:	61 50       	subi	r22, 0x01	; 1
    3c98:	70 40       	sbci	r23, 0x00	; 0
    3c9a:	01 90       	ld	r0, Z+
    3c9c:	01 10       	cpse	r0, r1
    3c9e:	d8 f7       	brcc	.-10     	; 0x3c96 <strnlen+0x2>
    3ca0:	80 95       	com	r24
    3ca2:	90 95       	com	r25
    3ca4:	8e 0f       	add	r24, r30
    3ca6:	9f 1f       	adc	r25, r31
    3ca8:	08 95       	ret

00003caa <fputc>:
    3caa:	0f 93       	push	r16
    3cac:	1f 93       	push	r17
    3cae:	cf 93       	push	r28
    3cb0:	df 93       	push	r29
    3cb2:	8c 01       	movw	r16, r24
    3cb4:	eb 01       	movw	r28, r22
    3cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb8:	81 ff       	sbrs	r24, 1
    3cba:	1b c0       	rjmp	.+54     	; 0x3cf2 <fputc+0x48>
    3cbc:	82 ff       	sbrs	r24, 2
    3cbe:	0d c0       	rjmp	.+26     	; 0x3cda <fputc+0x30>
    3cc0:	2e 81       	ldd	r18, Y+6	; 0x06
    3cc2:	3f 81       	ldd	r19, Y+7	; 0x07
    3cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    3cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    3cc8:	28 17       	cp	r18, r24
    3cca:	39 07       	cpc	r19, r25
    3ccc:	64 f4       	brge	.+24     	; 0x3ce6 <fputc+0x3c>
    3cce:	e8 81       	ld	r30, Y
    3cd0:	f9 81       	ldd	r31, Y+1	; 0x01
    3cd2:	01 93       	st	Z+, r16
    3cd4:	f9 83       	std	Y+1, r31	; 0x01
    3cd6:	e8 83       	st	Y, r30
    3cd8:	06 c0       	rjmp	.+12     	; 0x3ce6 <fputc+0x3c>
    3cda:	e8 85       	ldd	r30, Y+8	; 0x08
    3cdc:	f9 85       	ldd	r31, Y+9	; 0x09
    3cde:	80 2f       	mov	r24, r16
    3ce0:	09 95       	icall
    3ce2:	89 2b       	or	r24, r25
    3ce4:	31 f4       	brne	.+12     	; 0x3cf2 <fputc+0x48>
    3ce6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ce8:	9f 81       	ldd	r25, Y+7	; 0x07
    3cea:	01 96       	adiw	r24, 0x01	; 1
    3cec:	9f 83       	std	Y+7, r25	; 0x07
    3cee:	8e 83       	std	Y+6, r24	; 0x06
    3cf0:	02 c0       	rjmp	.+4      	; 0x3cf6 <fputc+0x4c>
    3cf2:	0f ef       	ldi	r16, 0xFF	; 255
    3cf4:	1f ef       	ldi	r17, 0xFF	; 255
    3cf6:	c8 01       	movw	r24, r16
    3cf8:	df 91       	pop	r29
    3cfa:	cf 91       	pop	r28
    3cfc:	1f 91       	pop	r17
    3cfe:	0f 91       	pop	r16
    3d00:	08 95       	ret

00003d02 <__ultoa_invert>:
    3d02:	fa 01       	movw	r30, r20
    3d04:	aa 27       	eor	r26, r26
    3d06:	28 30       	cpi	r18, 0x08	; 8
    3d08:	51 f1       	breq	.+84     	; 0x3d5e <__ultoa_invert+0x5c>
    3d0a:	20 31       	cpi	r18, 0x10	; 16
    3d0c:	81 f1       	breq	.+96     	; 0x3d6e <__ultoa_invert+0x6c>
    3d0e:	e8 94       	clt
    3d10:	6f 93       	push	r22
    3d12:	6e 7f       	andi	r22, 0xFE	; 254
    3d14:	6e 5f       	subi	r22, 0xFE	; 254
    3d16:	7f 4f       	sbci	r23, 0xFF	; 255
    3d18:	8f 4f       	sbci	r24, 0xFF	; 255
    3d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d1c:	af 4f       	sbci	r26, 0xFF	; 255
    3d1e:	b1 e0       	ldi	r27, 0x01	; 1
    3d20:	3e d0       	rcall	.+124    	; 0x3d9e <__ultoa_invert+0x9c>
    3d22:	b4 e0       	ldi	r27, 0x04	; 4
    3d24:	3c d0       	rcall	.+120    	; 0x3d9e <__ultoa_invert+0x9c>
    3d26:	67 0f       	add	r22, r23
    3d28:	78 1f       	adc	r23, r24
    3d2a:	89 1f       	adc	r24, r25
    3d2c:	9a 1f       	adc	r25, r26
    3d2e:	a1 1d       	adc	r26, r1
    3d30:	68 0f       	add	r22, r24
    3d32:	79 1f       	adc	r23, r25
    3d34:	8a 1f       	adc	r24, r26
    3d36:	91 1d       	adc	r25, r1
    3d38:	a1 1d       	adc	r26, r1
    3d3a:	6a 0f       	add	r22, r26
    3d3c:	71 1d       	adc	r23, r1
    3d3e:	81 1d       	adc	r24, r1
    3d40:	91 1d       	adc	r25, r1
    3d42:	a1 1d       	adc	r26, r1
    3d44:	20 d0       	rcall	.+64     	; 0x3d86 <__ultoa_invert+0x84>
    3d46:	09 f4       	brne	.+2      	; 0x3d4a <__ultoa_invert+0x48>
    3d48:	68 94       	set
    3d4a:	3f 91       	pop	r19
    3d4c:	2a e0       	ldi	r18, 0x0A	; 10
    3d4e:	26 9f       	mul	r18, r22
    3d50:	11 24       	eor	r1, r1
    3d52:	30 19       	sub	r19, r0
    3d54:	30 5d       	subi	r19, 0xD0	; 208
    3d56:	31 93       	st	Z+, r19
    3d58:	de f6       	brtc	.-74     	; 0x3d10 <__ultoa_invert+0xe>
    3d5a:	cf 01       	movw	r24, r30
    3d5c:	08 95       	ret
    3d5e:	46 2f       	mov	r20, r22
    3d60:	47 70       	andi	r20, 0x07	; 7
    3d62:	40 5d       	subi	r20, 0xD0	; 208
    3d64:	41 93       	st	Z+, r20
    3d66:	b3 e0       	ldi	r27, 0x03	; 3
    3d68:	0f d0       	rcall	.+30     	; 0x3d88 <__ultoa_invert+0x86>
    3d6a:	c9 f7       	brne	.-14     	; 0x3d5e <__ultoa_invert+0x5c>
    3d6c:	f6 cf       	rjmp	.-20     	; 0x3d5a <__ultoa_invert+0x58>
    3d6e:	46 2f       	mov	r20, r22
    3d70:	4f 70       	andi	r20, 0x0F	; 15
    3d72:	40 5d       	subi	r20, 0xD0	; 208
    3d74:	4a 33       	cpi	r20, 0x3A	; 58
    3d76:	18 f0       	brcs	.+6      	; 0x3d7e <__ultoa_invert+0x7c>
    3d78:	49 5d       	subi	r20, 0xD9	; 217
    3d7a:	31 fd       	sbrc	r19, 1
    3d7c:	40 52       	subi	r20, 0x20	; 32
    3d7e:	41 93       	st	Z+, r20
    3d80:	02 d0       	rcall	.+4      	; 0x3d86 <__ultoa_invert+0x84>
    3d82:	a9 f7       	brne	.-22     	; 0x3d6e <__ultoa_invert+0x6c>
    3d84:	ea cf       	rjmp	.-44     	; 0x3d5a <__ultoa_invert+0x58>
    3d86:	b4 e0       	ldi	r27, 0x04	; 4
    3d88:	a6 95       	lsr	r26
    3d8a:	97 95       	ror	r25
    3d8c:	87 95       	ror	r24
    3d8e:	77 95       	ror	r23
    3d90:	67 95       	ror	r22
    3d92:	ba 95       	dec	r27
    3d94:	c9 f7       	brne	.-14     	; 0x3d88 <__ultoa_invert+0x86>
    3d96:	00 97       	sbiw	r24, 0x00	; 0
    3d98:	61 05       	cpc	r22, r1
    3d9a:	71 05       	cpc	r23, r1
    3d9c:	08 95       	ret
    3d9e:	9b 01       	movw	r18, r22
    3da0:	ac 01       	movw	r20, r24
    3da2:	0a 2e       	mov	r0, r26
    3da4:	06 94       	lsr	r0
    3da6:	57 95       	ror	r21
    3da8:	47 95       	ror	r20
    3daa:	37 95       	ror	r19
    3dac:	27 95       	ror	r18
    3dae:	ba 95       	dec	r27
    3db0:	c9 f7       	brne	.-14     	; 0x3da4 <__ultoa_invert+0xa2>
    3db2:	62 0f       	add	r22, r18
    3db4:	73 1f       	adc	r23, r19
    3db6:	84 1f       	adc	r24, r20
    3db8:	95 1f       	adc	r25, r21
    3dba:	a0 1d       	adc	r26, r0
    3dbc:	08 95       	ret

00003dbe <_exit>:
    3dbe:	f8 94       	cli

00003dc0 <__stop_program>:
    3dc0:	ff cf       	rjmp	.-2      	; 0x3dc0 <__stop_program>
